CREATE TABLE  "GENDX_GL2" 
   (	"USERID" NUMBER, 
	"SAMPLEID" VARCHAR2(100), 
	"LOCUS" VARCHAR2(100), 
	"ID" VARCHAR2(50), 
	"GLSTRING1" VARCHAR2(60)
   )
/
CREATE TABLE  "ABBREVIATION" 
   (	"ORIGINAL" VARCHAR2(40) NOT NULL ENABLE, 
	"ABBR" CHAR(1) NOT NULL ENABLE, 
	"FLAG" CHAR(1), 
	 CONSTRAINT "ABBREVIATION_UK1" UNIQUE ("ORIGINAL", "FLAG")
  USING INDEX  ENABLE
   )
/
CREATE TABLE  "SAMPLE" 
   (	"SAMID" NUMBER NOT NULL ENABLE, 
	"PPLID" NUMBER NOT NULL DISABLE, 
	"SUBLABID" NUMBER NOT NULL ENABLE, 
	"FAMILYID" VARCHAR2(30), 
	"NAME" VARCHAR2(40) NOT NULL ENABLE, 
	"GENDER" CHAR(1), 
	"BIRTHDAY" NUMBER, 
	"MOTHERID" NUMBER, 
	"FATHERID" NUMBER, 
	"COLLECT_DATE" DATE, 
	"CREATE_BY" NUMBER NOT NULL ENABLE, 
	"CREATE_TIME" DATE DEFAULT sysdate, 
	"REGION" NUMBER, 
	"NATION" NUMBER, 
	"OTHERNATION" VARCHAR2(60), 
	"CITY" VARCHAR2(80), 
	"LATITUDE" VARCHAR2(20), 
	"LONGITUDE" VARCHAR2(20), 
	"REFERENCE" VARCHAR2(200), 
	"MATERIAL" VARCHAR2(40), 
	"MATERIALAVA" VARCHAR2(40), 
	"CELLLINE" VARCHAR2(40), 
	"TYPINGMETHOD" NUMBER, 
	"SUBMITTED" VARCHAR2(40), 
	"BREGION" NUMBER, 
	"BNATION" NUMBER, 
	"BOTHERNATION" VARCHAR2(60), 
	"BCITY" VARCHAR2(80), 
	"NATIONALITY" NUMBER, 
	"OTHERNATIONALITY" VARCHAR2(60), 
	"BLATITUDE" VARCHAR2(20), 
	"BLONGITUDE" VARCHAR2(20), 
	"RREGION" NUMBER, 
	"RNATION" NUMBER, 
	"ROTHERNATION" VARCHAR2(60), 
	"RCITY" VARCHAR2(80), 
	"LANGUAGE" VARCHAR2(60), 
	"HOMELANGUAGE" VARCHAR2(60), 
	"RELIGION" VARCHAR2(60), 
	"SUBRELIGION" VARCHAR2(60), 
	"ETHID" NUMBER, 
	"NEWETHNICITY" VARCHAR2(60), 
	"MODIFY_TIME" DATE, 
	"MODIFY_BY" NUMBER, 
	"INC_CRITERIA" VARCHAR2(300), 
	"RANDOM" CHAR(1), 
	"DISEASE" VARCHAR2(300), 
	"TRANSPLANT" CHAR(1), 
	"CASE" CHAR(1), 
	"TRANSPLANT_ID" VARCHAR2(40), 
	 CONSTRAINT "SAMPLE_PK" PRIMARY KEY ("SAMID")
  USING INDEX  ENABLE, 
	 CONSTRAINT "SAMPLE_NAME_LAB" UNIQUE ("SUBLABID", "NAME")
  USING INDEX  ENABLE
   )
/
CREATE TABLE  "ABCALLING" 
   (	"PATIENT_ID" NUMBER NOT NULL ENABLE, 
	"DONOR_ID" NUMBER NOT NULL ENABLE, 
	"DRAW_DATE" DATE, 
	"TREATMENT" VARCHAR2(255), 
	"IGG1_AB" VARCHAR2(500), 
	"IGG1_PA" VARCHAR2(500), 
	"IGG1_DSA" VARCHAR2(500), 
	"IGG2_AB" VARCHAR2(500), 
	"IGG2_PA" VARCHAR2(500), 
	"IGG2_DSA" VARCHAR2(500), 
	"C1Q1_AB" VARCHAR2(500), 
	"C1Q1_PA" VARCHAR2(500), 
	"C1Q1_DSA" VARCHAR2(500), 
	"C1Q2_AB" VARCHAR2(500), 
	"C1Q2_PA" VARCHAR2(500), 
	"C1Q2_DSA" VARCHAR2(500), 
	"ID" NUMBER GENERATED ALWAYS AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOT NULL ENABLE, 
	 CONSTRAINT "ABCALLING_PK" PRIMARY KEY ("ID")
  USING INDEX  ENABLE, 
	 CONSTRAINT "ABCALLING_CONUK" UNIQUE ("PATIENT_ID", "DONOR_ID")
  USING INDEX  ENABLE
   )
/
CREATE TABLE  "APEX$TEAM_DEV_FILES" 
   (	"ID" NUMBER, 
	"ROW_VERSION_NUMBER" NUMBER, 
	"COMPONENT_ID" NUMBER NOT NULL ENABLE, 
	"COMPONENT_TYPE" VARCHAR2(30) NOT NULL ENABLE, 
	"FILENAME" VARCHAR2(4000) NOT NULL ENABLE, 
	"FILE_MIMETYPE" VARCHAR2(512), 
	"FILE_CHARSET" VARCHAR2(512), 
	"FILE_BLOB" BLOB, 
	"FILE_COMMENTS" VARCHAR2(4000), 
	"TAGS" VARCHAR2(4000), 
	"CREATED" TIMESTAMP (6) WITH LOCAL TIME ZONE, 
	"CREATED_BY" VARCHAR2(255), 
	"UPDATED" TIMESTAMP (6) WITH LOCAL TIME ZONE, 
	"UPDATED_BY" VARCHAR2(255), 
	 CONSTRAINT "WWV_VALID_ATDF_COMP_TY" CHECK (component_type in ('MILESTONE','FEATURE','BUG','FEEDBACK','TODO')) ENABLE, 
	 PRIMARY KEY ("ID")
  USING INDEX  ENABLE
   )
/
CREATE TABLE  "APEX$_ACL" 
   (	"ID" NUMBER NOT NULL ENABLE, 
	"WS_APP_ID" NUMBER NOT NULL ENABLE, 
	"USERNAME" VARCHAR2(255) NOT NULL ENABLE, 
	"PRIV" VARCHAR2(1) NOT NULL ENABLE, 
	"CREATED_ON" DATE NOT NULL ENABLE, 
	"CREATED_BY" VARCHAR2(255) NOT NULL ENABLE, 
	"UPDATED_ON" DATE, 
	"UPDATED_BY" VARCHAR2(255), 
	 CONSTRAINT "APEX$_ACL_PRIV_CK" CHECK (priv in ('R','C','A')) ENABLE, 
	 CONSTRAINT "APEX$_ACL_PK" PRIMARY KEY ("ID")
  USING INDEX  ENABLE
   )
/
CREATE TABLE  "APEX$_WS_ROWS" 
   (	"ID" NUMBER NOT NULL ENABLE, 
	"WS_APP_ID" NUMBER NOT NULL ENABLE, 
	"DATA_GRID_ID" NUMBER NOT NULL ENABLE, 
	"UNIQUE_VALUE" VARCHAR2(255), 
	"TAGS" VARCHAR2(4000), 
	"PARENT_ROW_ID" NUMBER, 
	"OWNER" VARCHAR2(255), 
	"GEOCODE" VARCHAR2(512), 
	"LOAD_ORDER" NUMBER, 
	"CHANGE_COUNT" NUMBER, 
	"CREATED_ON" DATE NOT NULL ENABLE, 
	"CREATED_BY" VARCHAR2(255) NOT NULL ENABLE, 
	"UPDATED_ON" DATE, 
	"UPDATED_BY" VARCHAR2(255), 
	"C001" VARCHAR2(4000), 
	"C002" VARCHAR2(4000), 
	"C003" VARCHAR2(4000), 
	"C004" VARCHAR2(4000), 
	"C005" VARCHAR2(4000), 
	"C006" VARCHAR2(4000), 
	"C007" VARCHAR2(4000), 
	"C008" VARCHAR2(4000), 
	"C009" VARCHAR2(4000), 
	"C010" VARCHAR2(4000), 
	"C011" VARCHAR2(4000), 
	"C012" VARCHAR2(4000), 
	"C013" VARCHAR2(4000), 
	"C014" VARCHAR2(4000), 
	"C015" VARCHAR2(4000), 
	"C016" VARCHAR2(4000), 
	"C017" VARCHAR2(4000), 
	"C018" VARCHAR2(4000), 
	"C019" VARCHAR2(4000), 
	"C020" VARCHAR2(4000), 
	"C021" VARCHAR2(4000), 
	"C022" VARCHAR2(4000), 
	"C023" VARCHAR2(4000), 
	"C024" VARCHAR2(4000), 
	"C025" VARCHAR2(4000), 
	"C026" VARCHAR2(4000), 
	"C027" VARCHAR2(4000), 
	"C028" VARCHAR2(4000), 
	"C029" VARCHAR2(4000), 
	"C030" VARCHAR2(4000), 
	"C031" VARCHAR2(4000), 
	"C032" VARCHAR2(4000), 
	"C033" VARCHAR2(4000), 
	"C034" VARCHAR2(4000), 
	"C035" VARCHAR2(4000), 
	"C036" VARCHAR2(4000), 
	"C037" VARCHAR2(4000), 
	"C038" VARCHAR2(4000), 
	"C039" VARCHAR2(4000), 
	"C040" VARCHAR2(4000), 
	"C041" VARCHAR2(4000), 
	"C042" VARCHAR2(4000), 
	"C043" VARCHAR2(4000), 
	"C044" VARCHAR2(4000), 
	"C045" VARCHAR2(4000), 
	"C046" VARCHAR2(4000), 
	"C047" VARCHAR2(4000), 
	"C048" VARCHAR2(4000), 
	"C049" VARCHAR2(4000), 
	"C050" VARCHAR2(4000), 
	"N001" NUMBER, 
	"N002" NUMBER, 
	"N003" NUMBER, 
	"N004" NUMBER, 
	"N005" NUMBER, 
	"N006" NUMBER, 
	"N007" NUMBER, 
	"N008" NUMBER, 
	"N009" NUMBER, 
	"N010" NUMBER, 
	"N011" NUMBER, 
	"N012" NUMBER, 
	"N013" NUMBER, 
	"N014" NUMBER, 
	"N015" NUMBER, 
	"N016" NUMBER, 
	"N017" NUMBER, 
	"N018" NUMBER, 
	"N019" NUMBER, 
	"N020" NUMBER, 
	"N021" NUMBER, 
	"N022" NUMBER, 
	"N023" NUMBER, 
	"N024" NUMBER, 
	"N025" NUMBER, 
	"N026" NUMBER, 
	"N027" NUMBER, 
	"N028" NUMBER, 
	"N029" NUMBER, 
	"N030" NUMBER, 
	"N031" NUMBER, 
	"N032" NUMBER, 
	"N033" NUMBER, 
	"N034" NUMBER, 
	"N035" NUMBER, 
	"N036" NUMBER, 
	"N037" NUMBER, 
	"N038" NUMBER, 
	"N039" NUMBER, 
	"N040" NUMBER, 
	"N041" NUMBER, 
	"N042" NUMBER, 
	"N043" NUMBER, 
	"N044" NUMBER, 
	"N045" NUMBER, 
	"N046" NUMBER, 
	"N047" NUMBER, 
	"N048" NUMBER, 
	"N049" NUMBER, 
	"N050" NUMBER, 
	"D001" DATE, 
	"D002" DATE, 
	"D003" DATE, 
	"D004" DATE, 
	"D005" DATE, 
	"D006" DATE, 
	"D007" DATE, 
	"D008" DATE, 
	"D009" DATE, 
	"D010" DATE, 
	"D011" DATE, 
	"D012" DATE, 
	"D013" DATE, 
	"D014" DATE, 
	"D015" DATE, 
	"D016" DATE, 
	"D017" DATE, 
	"D018" DATE, 
	"D019" DATE, 
	"D020" DATE, 
	"D021" DATE, 
	"D022" DATE, 
	"D023" DATE, 
	"D024" DATE, 
	"D025" DATE, 
	"D026" DATE, 
	"D027" DATE, 
	"D028" DATE, 
	"D029" DATE, 
	"D030" DATE, 
	"D031" DATE, 
	"D032" DATE, 
	"D033" DATE, 
	"D034" DATE, 
	"D035" DATE, 
	"D036" DATE, 
	"D037" DATE, 
	"D038" DATE, 
	"D039" DATE, 
	"D040" DATE, 
	"D041" DATE, 
	"D042" DATE, 
	"D043" DATE, 
	"D044" DATE, 
	"D045" DATE, 
	"D046" DATE, 
	"D047" DATE, 
	"D048" DATE, 
	"D049" DATE, 
	"D050" DATE, 
	"CLOB001" CLOB, 
	"SEARCH_CLOB" CLOB, 
	 CONSTRAINT "APEX$_WS_ROWS_PK" PRIMARY KEY ("ID")
  USING INDEX  ENABLE, 
	 CONSTRAINT "APEX$_WS_ROWS_UK1" UNIQUE ("WS_APP_ID", "DATA_GRID_ID", "UNIQUE_VALUE")
  USING INDEX  ENABLE
   )
/
CREATE TABLE  "APEX$_WS_FILES" 
   (	"ID" NUMBER, 
	"WS_APP_ID" NUMBER NOT NULL ENABLE, 
	"DATA_GRID_ID" NUMBER, 
	"ROW_ID" NUMBER, 
	"WEBPAGE_ID" NUMBER, 
	"COMPONENT_LEVEL" VARCHAR2(30), 
	"NAME" VARCHAR2(255) NOT NULL ENABLE, 
	"IMAGE_ALIAS" VARCHAR2(255), 
	"IMAGE_ATTRIBUTES" VARCHAR2(255), 
	"CONTENT" BLOB, 
	"CONTENT_LAST_UPDATE" DATE, 
	"MIME_TYPE" VARCHAR2(255) NOT NULL ENABLE, 
	"CONTENT_CHARSET" VARCHAR2(255), 
	"CONTENT_FILENAME" VARCHAR2(500), 
	"DESCRIPTION" VARCHAR2(4000), 
	"CREATED_ON" DATE NOT NULL ENABLE, 
	"CREATED_BY" VARCHAR2(255) NOT NULL ENABLE, 
	"UPDATED_ON" DATE, 
	"UPDATED_BY" VARCHAR2(255), 
	 CONSTRAINT "APEX$_WS_FILES_CL_CK" CHECK (component_level in ('WEBSHEET','ROW','WORKSPACE','WEBPAGE')) ENABLE, 
	 CONSTRAINT "APEX$_WS_FILES_PK" PRIMARY KEY ("ID")
  USING INDEX  ENABLE
   )
/
CREATE TABLE  "APEX$_WS_HISTORY" 
   (	"ROW_ID" NUMBER NOT NULL ENABLE, 
	"WS_APP_ID" NUMBER NOT NULL ENABLE, 
	"DATA_GRID_ID" NUMBER NOT NULL ENABLE, 
	"COLUMN_NAME" VARCHAR2(255), 
	"OLD_VALUE" VARCHAR2(4000), 
	"NEW_VALUE" VARCHAR2(4000), 
	"APPLICATION_USER_ID" VARCHAR2(255), 
	"CHANGE_DATE" DATE
   )
/
CREATE TABLE  "APEX$_WS_LINKS" 
   (	"ID" NUMBER, 
	"WS_APP_ID" NUMBER NOT NULL ENABLE, 
	"DATA_GRID_ID" NUMBER, 
	"ROW_ID" NUMBER, 
	"WEBPAGE_ID" NUMBER, 
	"COMPONENT_LEVEL" VARCHAR2(30), 
	"TAGS" VARCHAR2(4000), 
	"SHOW_ON_HOMEPAGE" VARCHAR2(1), 
	"LINK_NAME" VARCHAR2(255) NOT NULL ENABLE, 
	"URL" VARCHAR2(4000) NOT NULL ENABLE, 
	"LINK_DESCRIPTION" VARCHAR2(4000), 
	"DISPLAY_SEQUENCE" NUMBER, 
	"CREATED_ON" DATE NOT NULL ENABLE, 
	"CREATED_BY" VARCHAR2(255) NOT NULL ENABLE, 
	"UPDATED_ON" DATE, 
	"UPDATED_BY" VARCHAR2(255), 
	 CONSTRAINT "APEX$_WS_LINKS_CL_CK" CHECK (component_level in ('WEBSHEET','ROW','WORKSPACE','WEBPAGE')) ENABLE, 
	 CONSTRAINT "APEX$_WS_LINKS_SH_CK" CHECK (show_on_homepage in ('Y','N')) ENABLE, 
	 CONSTRAINT "APEX$_WS_LINKS_PK" PRIMARY KEY ("ID")
  USING INDEX  ENABLE
   )
/
CREATE TABLE  "APEX$_WS_NOTES" 
   (	"ID" NUMBER, 
	"WS_APP_ID" NUMBER NOT NULL ENABLE, 
	"DATA_GRID_ID" NUMBER, 
	"ROW_ID" NUMBER, 
	"WEBPAGE_ID" NUMBER, 
	"COMPONENT_LEVEL" VARCHAR2(30), 
	"CONTENT" CLOB, 
	"CREATED_ON" DATE NOT NULL ENABLE, 
	"CREATED_BY" VARCHAR2(255) NOT NULL ENABLE, 
	"UPDATED_ON" DATE, 
	"UPDATED_BY" VARCHAR2(255), 
	 CONSTRAINT "APEX$_WS_NOTES_CL_CK" CHECK (component_level in ('WEBSHEET','ROW','WORKSPACE','WEBPAGE')) ENABLE, 
	 CONSTRAINT "APEX$_WS_NOTES_PK" PRIMARY KEY ("ID")
  USING INDEX  ENABLE
   )
/
CREATE TABLE  "APEX$_WS_TAGS" 
   (	"ID" NUMBER, 
	"WS_APP_ID" NUMBER NOT NULL ENABLE, 
	"DATA_GRID_ID" NUMBER, 
	"ROW_ID" NUMBER, 
	"WEBPAGE_ID" NUMBER, 
	"COMPONENT_LEVEL" VARCHAR2(30), 
	"TAG" VARCHAR2(4000), 
	"CREATED_ON" DATE NOT NULL ENABLE, 
	"CREATED_BY" VARCHAR2(255) NOT NULL ENABLE, 
	"UPDATED_ON" DATE, 
	"UPDATED_BY" VARCHAR2(255), 
	 CONSTRAINT "APEX$_WS_TAGS_CL_CK" CHECK (component_level in ('WEBSHEET','ROW','WORKSPACE','WEBPAGE')) ENABLE, 
	 CONSTRAINT "APEX$_WS_TAGS_PK" PRIMARY KEY ("ID")
  USING INDEX  ENABLE
   )
/
CREATE TABLE  "APEX$_WS_WEBPG_SECTIONS" 
   (	"ID" NUMBER NOT NULL ENABLE, 
	"WS_APP_ID" NUMBER NOT NULL ENABLE, 
	"WEBPAGE_ID" NUMBER, 
	"DISPLAY_SEQUENCE" NUMBER, 
	"SECTION_TYPE" VARCHAR2(30) NOT NULL ENABLE, 
	"TITLE" VARCHAR2(4000), 
	"CONTENT" CLOB, 
	"CONTENT_UPPER" CLOB, 
	"NAV_START_WEBPAGE_ID" NUMBER, 
	"NAV_MAX_LEVEL" NUMBER, 
	"NAV_ORDER_BY" VARCHAR2(255), 
	"NAV_INCLUDE_LINK" VARCHAR2(1), 
	"DATA_GRID_ID" NUMBER, 
	"REPORT_ID" NUMBER, 
	"DATA_SECTION_STYLE" NUMBER, 
	"SHOW_ADD_ROW" VARCHAR2(1) DEFAULT 'N', 
	"SHOW_EDIT_ROW" VARCHAR2(1) DEFAULT 'N', 
	"SHOW_SEARCH" VARCHAR2(1) DEFAULT 'Y', 
	"MAX_ROW_COUNT" NUMBER, 
	"CHART_TYPE" VARCHAR2(255), 
	"CHART_3D" VARCHAR2(1), 
	"CHART_LABEL" VARCHAR2(255), 
	"LABEL_AXIS_TITLE" VARCHAR2(255), 
	"CHART_VALUE" VARCHAR2(255), 
	"VALUE_AXIS_TITLE" VARCHAR2(255), 
	"CHART_AGGREGATE" VARCHAR2(255), 
	"CHART_SORTING" VARCHAR2(255), 
	"CHANGE_COUNT" NUMBER, 
	"CREATED_ON" DATE NOT NULL ENABLE, 
	"CREATED_BY" VARCHAR2(255) NOT NULL ENABLE, 
	"UPDATED_ON" DATE, 
	"UPDATED_BY" VARCHAR2(255), 
	 CONSTRAINT "APEX$_WS_WEBPG_SECTION_TYPE_CK" CHECK (section_type in ('TEXT','DATA','CHART','NAV_PAGE','NAV_SECTION','PLSQL')) ENABLE, 
	 CONSTRAINT "APEX$_WS_WEBPG_SECTION_LINK_CK" CHECK (nav_include_link in ('Y','N')) ENABLE, 
	 CONSTRAINT "APEX$_WS_WEBPG_SECTION_AR_CK" CHECK (show_add_row in ('Y','N')) ENABLE, 
	 CONSTRAINT "APEX$_WS_WEBPG_SECTION_ER_CK" CHECK (show_edit_row in ('Y','N')) ENABLE, 
	 CONSTRAINT "APEX$_WS_WEBPG_SECTION_SER_CK" CHECK (show_search in ('Y','N')) ENABLE, 
	 CONSTRAINT "APEX$_WS_WEBPG_SECTION_3D_CK" CHECK (chart_3d in ('Y','N')) ENABLE, 
	 CONSTRAINT "APEX$_WS_WEBPG_SECTIONS_PK" PRIMARY KEY ("ID")
  USING INDEX  ENABLE
   )
/
CREATE TABLE  "APEX$_WS_WEBPG_SECTION_HISTORY" 
   (	"SECTION_ID" NUMBER NOT NULL ENABLE, 
	"WS_APP_ID" NUMBER NOT NULL ENABLE, 
	"WEBPAGE_ID" NUMBER NOT NULL ENABLE, 
	"OLD_DISPLAY_SEQUENCE" NUMBER, 
	"NEW_DISPLAY_SEQUENCE" NUMBER, 
	"OLD_TITLE" VARCHAR2(4000), 
	"NEW_TITLE" VARCHAR2(4000), 
	"OLD_CONTENT" CLOB, 
	"NEW_CONTENT" CLOB, 
	"APPLICATION_USER_ID" VARCHAR2(255) NOT NULL ENABLE, 
	"CHANGE_DATE" DATE NOT NULL ENABLE
   )
/
CREATE TABLE  "CODETABLE" 
   (	"MTHID" NUMBER, 
	"NAME" VARCHAR2(100), 
	"CODE" VARCHAR2(10), 
	"TYPEID" NUMBER, 
	 CONSTRAINT "TYPINGMETHOD_PK" PRIMARY KEY ("MTHID")
  USING INDEX  ENABLE
   )
/
CREATE TABLE  "DATASET" 
   (	"PPLID" NUMBER NOT NULL ENABLE, 
	"CPNID" NUMBER, 
	"NAME" VARCHAR2(80) NOT NULL ENABLE, 
	"REFERENCE" VARCHAR2(300), 
	"CLINICAL" CHAR(1), 
	"ETHNICALLY" CHAR(1), 
	"GEOGRAPHICALLY" CHAR(1), 
	"LINGUISTICALLY" CHAR(1), 
	"REGISTRY" CHAR(1), 
	"PEDIGREE" CHAR(1), 
	"OTHER" VARCHAR2(300), 
	"RANDOMLY" CHAR(1), 
	"ADMIXED" CHAR(1), 
	"SOURCE" VARCHAR2(100), 
	"ADMIXINFO" VARCHAR2(2000), 
	"PPLINFO" VARCHAR2(2000), 
	"CREATE_TIME" DATE DEFAULT sysdate, 
	"CREATE_BY" NUMBER NOT NULL ENABLE, 
	"MODIFY_TIME" DATE, 
	"CASE" CHAR(1), 
	"MODIFY_BY" NUMBER, 
	 CONSTRAINT "POPULATION_PK" PRIMARY KEY ("PPLID")
  USING INDEX  ENABLE, 
	 CONSTRAINT "POPULATION_SN_UK" UNIQUE ("CPNID", "NAME")
  USING INDEX  ENABLE
   )
/
CREATE TABLE  "PROJECT" 
   (	"CPNID" NUMBER NOT NULL ENABLE, 
	"NAME" VARCHAR2(300) NOT NULL ENABLE, 
	"DESCRIPTION" VARCHAR2(2000), 
	"CREATE_BY" NUMBER, 
	"CREATE_TIME" DATE DEFAULT sysdate, 
	"MODIFY_BY" NUMBER, 
	"MODIFY_TIME" DATE, 
	"BELONG_TO" NUMBER, 
	"ISCPN" CHAR(1) DEFAULT 'N', 
	"ISCLOSE" CHAR(1), 
	 CONSTRAINT "PROJECT_PK" PRIMARY KEY ("CPNID")
  USING INDEX  ENABLE, 
	 CONSTRAINT "PROJECT_UKNAME" UNIQUE ("NAME")
  USING INDEX  ENABLE
   )
/
CREATE TABLE  "COMPONENT_DATASET" 
   (	"PPLID" NUMBER NOT NULL ENABLE, 
	"CPNID" NUMBER NOT NULL ENABLE, 
	"CREATE_BY" NUMBER, 
	"CREATE_TIME" DATE DEFAULT sysdate, 
	"MODIFY_TIME" DATE DEFAULT sysdate, 
	"MODIFY_BY" NUMBER, 
	"OVERRIDE" NUMBER, 
	"APPROVED" CHAR(1), 
	 CONSTRAINT "COMPONENT_DATASET_UK1" UNIQUE ("PPLID", "CPNID")
  USING INDEX  ENABLE
   )
/
CREATE TABLE  "IHIW_LAB" 
   (	"LABID" NUMBER NOT NULL ENABLE, 
	"LABCODE" VARCHAR2(6), 
	"TITLE" VARCHAR2(30), 
	"FIRSTNAME" VARCHAR2(50) NOT NULL ENABLE, 
	"LASTNAME" VARCHAR2(50) NOT NULL ENABLE, 
	"DIRECTOR" VARCHAR2(80), 
	"DEPARTMENT" VARCHAR2(80), 
	"INSTITUTION" VARCHAR2(80), 
	"ADDRESS1" VARCHAR2(100), 
	"ADDRESS2" VARCHAR2(100), 
	"SADDRESS1" VARCHAR2(100), 
	"SADDRESS2" VARCHAR2(100), 
	"CITY" VARCHAR2(40), 
	"STATE" NUMBER, 
	"ZIP" VARCHAR2(30), 
	"COUNTRY" NUMBER, 
	"PHONE" VARCHAR2(40), 
	"FAX" VARCHAR2(40), 
	"EMAIL" VARCHAR2(100) NOT NULL ENABLE, 
	"URL" VARCHAR2(200), 
	"CREATE_TIME" DATE DEFAULT sysdate, 
	"OLD_LABCODE" VARCHAR2(20), 
	"SNAME" VARCHAR2(50), 
	"SPHONE" VARCHAR2(40), 
	"SEMAIL" VARCHAR2(100), 
	"DNAME" VARCHAR2(60), 
	"DEMAIL" VARCHAR2(100), 
	"DPHONE" VARCHAR2(40), 
	"FTPPWD" VARCHAR2(10) DEFAULT null, 
	 CONSTRAINT "IHIW_LABid_PK" PRIMARY KEY ("LABID")
  USING INDEX  ENABLE
   )
/
CREATE TABLE  "IHIW_ROLES" 
   (	"ROLE_ID" NUMBER NOT NULL ENABLE, 
	"ROLE_NAME" VARCHAR2(40) NOT NULL ENABLE, 
	 CONSTRAINT "IHIW_ROLES_PK" PRIMARY KEY ("ROLE_ID")
  USING INDEX  ENABLE
   )
/
CREATE TABLE  "COMPONENT_LAB" 
   (	"LABID" NUMBER NOT NULL ENABLE, 
	"CPNID" NUMBER NOT NULL ENABLE, 
	"VALID" CHAR(1) DEFAULT 'Y', 
	"CREATE_TIME" DATE DEFAULT sysdate, 
	"APPROVED" CHAR(1), 
	"MODIFY_TIME" DATE, 
	"REASON" VARCHAR2(2000), 
	"OVERRIDE" NUMBER, 
	"CREATE_BY" NUMBER, 
	"MODIFY_BY" NUMBER, 
	 CONSTRAINT "COMPONENT_LAB_UK" UNIQUE ("LABID", "CPNID")
  USING INDEX  ENABLE
   )
/
CREATE TABLE  "IHIW_USER" 
   (	"USERID" NUMBER, 
	"USERNAME" VARCHAR2(30) NOT NULL ENABLE, 
	"PASSWORD" VARCHAR2(80), 
	"EMAIL" VARCHAR2(100) NOT NULL ENABLE, 
	"LABID" NUMBER, 
	"NAME" VARCHAR2(80) NOT NULL ENABLE, 
	"PHONE" VARCHAR2(40), 
	"ROLE" NUMBER DEFAULT 1, 
	"EXT" VARCHAR2(10), 
	"CREATE_TIME" DATE DEFAULT sysdate, 
	"MODIFY_TIME" DATE, 
	"CREATE_BY" NUMBER, 
	 CONSTRAINT "IHIWS_USER_PK" PRIMARY KEY ("USERID")
  USING INDEX  ENABLE, 
	 CONSTRAINT "IHIWS_USER_UK1" UNIQUE ("USERNAME")
  USING INDEX  ENABLE
   )
/
CREATE TABLE  "COMPONENT_USER" 
   (	"USERID" NUMBER NOT NULL ENABLE, 
	"CPNID" NUMBER, 
	"ROLE" NUMBER NOT NULL ENABLE, 
	"CREATE_BY" NUMBER, 
	"CREATE_TIME" DATE DEFAULT SYSDATE, 
	"MODIFY_TIME" DATE, 
	"MODIFY_BY" NUMBER, 
	"APPROVED" CHAR(1), 
	"REASON" VARCHAR2(2000), 
	"OVERRIDE" NUMBER, 
	 CONSTRAINT "COMPONENT_USER_UNI" UNIQUE ("USERID", "CPNID", "ROLE")
  USING INDEX  ENABLE
   )
/
CREATE TABLE  "COUNTRY" 
   (	"COUNTRYID" NUMBER, 
	"NAME" VARCHAR2(80) NOT NULL ENABLE, 
	"COUNTRYCODE" VARCHAR2(3) NOT NULL ENABLE, 
	 CONSTRAINT "COUNTRY_PK" PRIMARY KEY ("COUNTRYID")
  USING INDEX  ENABLE
   )
/
CREATE TABLE  "CPN_DAT_HISTORY" 
   (	"HISID" NUMBER, 
	"PPLID" NUMBER, 
	"CPNID" NUMBER, 
	"CREATE_BY" NUMBER, 
	"CREATE_TIME" DATE DEFAULT sysdate, 
	"MODIFY_BY" NUMBER, 
	"OVERRIDE" NUMBER, 
	"DELETE_BY" NUMBER, 
	"APPROVED" CHAR(1), 
	 CONSTRAINT "CPN_DAT_HISTORY_PK" PRIMARY KEY ("HISID")
  USING INDEX  ENABLE
   )
/
CREATE TABLE  "CPN_LAB_HISTORY" 
   (	"HISID" NUMBER NOT NULL ENABLE, 
	"LABID" NUMBER, 
	"CPNID" NUMBER, 
	"APPROVED" CHAR(1), 
	"CREATE_TIME" DATE DEFAULT sysdate, 
	"REASON" VARCHAR2(2000), 
	"OVERRIDE" NUMBER, 
	"CREATE_BY" NUMBER, 
	"MODIFY_BY" NUMBER, 
	"DELETE_BY" NUMBER, 
	 CONSTRAINT "CPN_LAB_HISTORY_PK" PRIMARY KEY ("HISID")
  USING INDEX  ENABLE
   )
/
CREATE TABLE  "CPN_USR_HISTORY" 
   (	"HISID" NUMBER NOT NULL ENABLE, 
	"USERID" NUMBER, 
	"CPNID" NUMBER, 
	"ROLE" NUMBER, 
	"CREATE_BY" NUMBER, 
	"MODIFY_BY" NUMBER, 
	"CREATE_TIME" DATE DEFAULT sysdate, 
	"APPROVED" CHAR(1), 
	"REASON" VARCHAR2(2000), 
	"OVERRIDE" NUMBER, 
	"DELETE_BY" NUMBER, 
	 CONSTRAINT "CPN_USR_HISTORY_PK" PRIMARY KEY ("HISID")
  USING INDEX  ENABLE
   )
/
CREATE TABLE  "DATASET_USER" 
   (	"PPLID" NUMBER, 
	"USERID" NUMBER, 
	"CREATE_BY" NUMBER, 
	"CREATE_TIME" DATE DEFAULT sysdate, 
	"MODIFY_BY" NUMBER, 
	"MODIFY_TIME" DATE, 
	"OVERRIDE" NUMBER, 
	 CONSTRAINT "DATASET_USER_PK" PRIMARY KEY ("PPLID", "USERID", "OVERRIDE")
  USING INDEX  ENABLE
   )
/
CREATE TABLE  "DAT_USR_HISTORY" 
   (	"HISID" NUMBER, 
	"PPLID" NUMBER, 
	"USERID" NUMBER, 
	"CREATE_TIME" DATE DEFAULT sysdate, 
	"CREATE_BY" NUMBER, 
	"MODIFY_BY" NUMBER, 
	"OVERRIDE" NUMBER, 
	"DELETE_BY" NUMBER, 
	 CONSTRAINT "DAT_USR_HISTORY_PK" PRIMARY KEY ("HISID")
  USING INDEX  ENABLE
   )
/
CREATE TABLE  "DELETE_SAMPLE" 
   (	"LABID" NUMBER, 
	"NAME" VARCHAR2(50), 
	"SAMID" NUMBER, 
	"DELETE_TIME" DATE, 
	"DELETE_BY" NUMBER
   )
/
CREATE TABLE  "DOCUMENTS" 
   (	"DID" NUMBER NOT NULL ENABLE, 
	"TYPEID" NUMBER NOT NULL ENABLE, 
	"DOC" CLOB, 
	 CONSTRAINT "DOCUMENTS_CON" UNIQUE ("DID", "TYPEID")
  USING INDEX  ENABLE
   )
/
CREATE TABLE  "DR$FUSION_PROFILE_CTX1$I" 
   (	"TOKEN_TEXT" VARCHAR2(64) NOT NULL ENABLE, 
	"TOKEN_TYPE" NUMBER(10,0) NOT NULL ENABLE, 
	"TOKEN_FIRST" NUMBER(10,0) NOT NULL ENABLE, 
	"TOKEN_LAST" NUMBER(10,0) NOT NULL ENABLE, 
	"TOKEN_COUNT" NUMBER(10,0) NOT NULL ENABLE, 
	"TOKEN_INFO" BLOB
   )
/
CREATE TABLE  "DR$FUSION_PROFILE_CTX1$K" 
   (	"DOCID" NUMBER(38,0), 
	"TEXTKEY" ROWID, 
	 PRIMARY KEY ("TEXTKEY") ENABLE
   ) ORGANIZATION INDEX NOCOMPRESS
/
CREATE TABLE  "DR$FUSION_PROFILE_CTX1$N" 
   (	"NLT_DOCID" NUMBER(38,0), 
	"NLT_MARK" CHAR(1) NOT NULL ENABLE, 
	 PRIMARY KEY ("NLT_DOCID") ENABLE
   ) ORGANIZATION INDEX NOCOMPRESS
/
CREATE TABLE  "DR$FUSION_PROFILE_CTX1$R" 
   (	"ROW_NO" NUMBER(3,0), 
	"DATA" BLOB, 
	 CONSTRAINT "DRC$FUSION_PROFILE_CTX1$R" PRIMARY KEY ("ROW_NO")
  USING INDEX  ENABLE
   )
/
CREATE TABLE  "DUPLICATED_DEUWAG" 
   (	"ID" NUMBER, 
	"DATASET" VARCHAR2(30), 
	"SAMPLE_ID" VARCHAR2(30), 
	"COLLECTION_COUNTRY" VARCHAR2(30), 
	"ETHNICITY" VARCHAR2(30), 
	 CONSTRAINT "DUPLICATED_DEUWAG_PK" PRIMARY KEY ("ID")
  USING INDEX  ENABLE
   )
/
CREATE TABLE  "EPITOPE_CALINFO" 
   (	"EPITOPE_CALID" NUMBER, 
	"PRODUCTNAME" VARCHAR2(30), 
	"PRODUCTNO" VARCHAR2(30), 
	"LOTNAME" VARCHAR2(30), 
	"EXPIRATIONDATE" VARCHAR2(40), 
	"CALIBRATIONTIME" VARCHAR2(40), 
	"BOARDTEMP" NUMBER, 
	"DDTEMP" NUMBER, 
	"CL1TEMP" NUMBER, 
	"CL2TEMP" NUMBER, 
	"PRESSURE" NUMBER, 
	"DDVOLTS" NUMBER, 
	"CL1VOLTS" NUMBER, 
	"CL2VOLTS" NUMBER, 
	"RP1VOLTS" NUMBER, 
	"DDRVAL" NUMBER, 
	"CL1RVAL" NUMBER, 
	"CL2RVAL" NUMBER, 
	"PASSED" VARCHAR2(30), 
	"MACHINESERIALNO" VARCHAR2(30), 
	 CONSTRAINT "EPITOPE_CALINFO_PK" PRIMARY KEY ("EPITOPE_CALID")
  USING INDEX  ENABLE
   )
/
CREATE TABLE  "EPITOPE_CONINFO" 
   (	"EPITOPE_CONID" NUMBER, 
	"PRODUCTNAME" VARCHAR2(30), 
	"PRODUCTNO" VARCHAR2(30), 
	"LOTNAME" VARCHAR2(30), 
	"EXPIRATIONDATE" VARCHAR2(40), 
	"VERIFICATIONTIME" VARCHAR2(40), 
	"GATEDBEADS" NUMBER, 
	"MACHINESERIALNO" VARCHAR2(30), 
	"PASSED" VARCHAR2(30), 
	 CONSTRAINT "EPITIOE_CONINFO_PK" PRIMARY KEY ("EPITOPE_CONID")
  USING INDEX  ENABLE
   )
/
CREATE TABLE  "EPITOPE_KEY" 
   (	"ID" NUMBER, 
	"LABCODE" VARCHAR2(10), 
	"REPORTNAME" VARCHAR2(100), 
	"EREPORTID" NUMBER, 
	"CALINFO1" NUMBER, 
	"CALINFO2" NUMBER, 
	"CONINFO1" NUMBER, 
	"CONINFO2" NUMBER, 
	 CONSTRAINT "EPITOPE_KEY_PK" PRIMARY KEY ("ID")
  USING INDEX  ENABLE, 
	 CONSTRAINT "EPITOPE_KEY_UK1" UNIQUE ("LABCODE", "REPORTNAME")
  USING INDEX  ENABLE
   )
/
CREATE TABLE  "EPITOPE_REPORT" 
   (	"EREPORTID" NUMBER, 
	"REPORTNAME" VARCHAR2(100), 
	"LABID" NUMBER, 
	"PROGRAM" VARCHAR2(50), 
	"BUILD" VARCHAR2(10), 
	"REPORT_DATE" VARCHAR2(20), 
	"SN" VARCHAR2(50), 
	"REPORT_SESSION" VARCHAR2(50), 
	"OPERATOR" VARCHAR2(30), 
	"TEMPLATEID" NUMBER, 
	"TEMPLATENAME" VARCHAR2(30), 
	"TEMPLATEVERSION" VARCHAR2(10), 
	"TEMPLATEDESCRIPTION" VARCHAR2(255), 
	"TEMPLATEDEVELOPINGCOMPANY" VARCHAR2(50), 
	"TEMPLATEAUTHOR" VARCHAR2(30), 
	"SAMPLEVOLUME" VARCHAR2(50), 
	"DDGATE" VARCHAR2(50), 
	"SAMPLETIMEOUT" VARCHAR2(30), 
	"BATCHAUTHOR" VARCHAR2(30), 
	"BATCHSTARTTIME" VARCHAR2(50), 
	"BATCHSTOPTIME" VARCHAR2(50), 
	"BATCHDESCRIPTION" VARCHAR2(30), 
	"BATCHCOMMENT" VARCHAR2(255), 
	"CALINFO1" NUMBER, 
	"CALINFO2" NUMBER, 
	"CONINFO1" NUMBER, 
	"CONINFO2" NUMBER, 
	"ASSAYLOTINFO" NUMBER, 
	"CREATE_TIME" DATE DEFAULT sysdate, 
	"BATCH" VARCHAR2(60), 
	"VERSION" VARCHAR2(60), 
	"COMPUTERNAME" VARCHAR2(60), 
	"COUNTRY_CODE" VARCHAR2(60), 
	"PROTOCOLNAME" VARCHAR2(60), 
	"PROTOCOLVERSION" VARCHAR2(60), 
	"PROTOCOLDESCRIPTION" VARCHAR2(100), 
	"PROTOCOLDEVELOPINGCOMPANY" VARCHAR2(60), 
	"PROTOCOLPLATE" VARCHAR2(60), 
	"PROTOCOLMICROSPHERE" VARCHAR2(60), 
	"PROTOCOLANALYSIS" VARCHAR2(60), 
	"NORMBEAD" VARCHAR2(60), 
	"PROTOCOLHEATER" VARCHAR2(60), 
	 CONSTRAINT "EPITOPE_REPORT_PK" PRIMARY KEY ("EREPORTID")
  USING INDEX  ENABLE
   )
/
CREATE TABLE  "EPITOPE_RAW" 
   (	"ID" NUMBER, 
	"EREPORTID" NUMBER, 
	"DATATYPE" NUMBER, 
	"LOCATION" VARCHAR2(30), 
	"SAMPLE" VARCHAR2(50), 
	"X001" NUMBER, 
	"X002" NUMBER, 
	"X003" NUMBER, 
	"X004" NUMBER, 
	"X005" NUMBER, 
	"X006" NUMBER, 
	"X007" NUMBER, 
	"X008" NUMBER, 
	"X009" NUMBER, 
	"X010" NUMBER, 
	"X011" NUMBER, 
	"X012" NUMBER, 
	"X013" NUMBER, 
	"X015" NUMBER, 
	"X016" NUMBER, 
	"X017" NUMBER, 
	"X018" NUMBER, 
	"X019" NUMBER, 
	"X020" NUMBER, 
	"X021" NUMBER, 
	"X022" NUMBER, 
	"X023" NUMBER, 
	"X024" NUMBER, 
	"X025" NUMBER, 
	"X026" NUMBER, 
	"X027" NUMBER, 
	"X028" NUMBER, 
	"X029" NUMBER, 
	"X030" NUMBER, 
	"X031" NUMBER, 
	"X032" NUMBER, 
	"X033" NUMBER, 
	"X034" NUMBER, 
	"X035" NUMBER, 
	"X036" NUMBER, 
	"X037" NUMBER, 
	"X038" NUMBER, 
	"X039" NUMBER, 
	"X040" NUMBER, 
	"X041" NUMBER, 
	"X042" NUMBER, 
	"X043" NUMBER, 
	"X044" NUMBER, 
	"X045" NUMBER, 
	"X046" NUMBER, 
	"X047" NUMBER, 
	"X048" NUMBER, 
	"X049" NUMBER, 
	"X050" NUMBER, 
	"X051" NUMBER, 
	"X052" NUMBER, 
	"X053" NUMBER, 
	"X054" NUMBER, 
	"X055" NUMBER, 
	"X056" NUMBER, 
	"X057" NUMBER, 
	"X058" NUMBER, 
	"X059" NUMBER, 
	"X060" NUMBER, 
	"X061" NUMBER, 
	"X062" NUMBER, 
	"X063" NUMBER, 
	"X064" NUMBER, 
	"X065" NUMBER, 
	"X066" NUMBER, 
	"X067" NUMBER, 
	"X068" NUMBER, 
	"X069" NUMBER, 
	"X070" NUMBER, 
	"X071" NUMBER, 
	"X072" NUMBER, 
	"X073" NUMBER, 
	"X074" NUMBER, 
	"X075" NUMBER, 
	"X076" NUMBER, 
	"X077" NUMBER, 
	"X078" NUMBER, 
	"X079" NUMBER, 
	"X080" NUMBER, 
	"X081" NUMBER, 
	"X082" NUMBER, 
	"X083" NUMBER, 
	"X084" NUMBER, 
	"X085" NUMBER, 
	"X086" NUMBER, 
	"X087" NUMBER, 
	"X088" NUMBER, 
	"X089" NUMBER, 
	"X090" NUMBER, 
	"X091" NUMBER, 
	"X092" NUMBER, 
	"X093" NUMBER, 
	"X094" NUMBER, 
	"X095" NUMBER, 
	"X096" NUMBER, 
	"X097" NUMBER, 
	"X098" NUMBER, 
	"X099" NUMBER, 
	"X100" NUMBER, 
	"TOTAL_EVENTS" NUMBER, 
	"NOTES" VARCHAR2(30), 
	"SAMID" NUMBER, 
	"RUNID" NUMBER, 
	"LABSAMPLE" VARCHAR2(50), 
	"X014" NUMBER, 
	 CONSTRAINT "EPITIOE_RAW_PK" PRIMARY KEY ("ID")
  USING INDEX  ENABLE
   )
/
CREATE TABLE  "EPITOPE_TRIPLET" 
   (	"ID" NUMBER, 
	"TRANSPLANT_CODE" VARCHAR2(30), 
	"TRIPLET" VARCHAR2(30), 
	"ALLELE" VARCHAR2(30), 
	"POSITION" NUMBER, 
	 CONSTRAINT "EPITOPE_TRIPLET_PK" PRIMARY KEY ("ID")
  USING INDEX  ENABLE
   )
/
CREATE TABLE  "EPI_SAMPLE_INFO" 
   (	"SIC" VARCHAR2(300), 
	"DOC" VARCHAR2(30), 
	"PPT" VARCHAR2(5), 
	"PEM" VARCHAR2(30), 
	"IT" VARCHAR2(50), 
	"BIAD" VARCHAR2(255), 
	"BIATDT" VARCHAR2(255), 
	"DDSA" VARCHAR2(255), 
	"DPT" NUMBER, 
	"ADHERENT" VARCHAR2(30), 
	"TTL6" VARCHAR2(30), 
	"AR" VARCHAR2(30), 
	"DAR" VARCHAR2(30), 
	"SERUM_CREATININE" VARCHAR2(30), 
	"MPTSCT" NUMBER, 
	"GRAFT_LOSS" VARCHAR2(30), 
	"DATEGL" VARCHAR2(30), 
	"CAUSEGL" VARCHAR2(255), 
	"TEST_TYPE" VARCHAR2(30), 
	"INSTRUMENT" VARCHAR2(30), 
	"FUSION_VERSION" VARCHAR2(30), 
	"NDBIR5" VARCHAR2(30), 
	"SAMID" NUMBER NOT NULL ENABLE, 
	"TESTDATE" NUMBER NOT NULL ENABLE, 
	"CREATE_TIME" DATE DEFAULT SYSDATE, 
	"CREATE_BY" NUMBER, 
	"MODIFY_TIME" DATE, 
	"MODIFY_BY" NUMBER, 
	"LABID" NUMBER, 
	 CONSTRAINT "EPI_SAMPLE_INFO_CON" PRIMARY KEY ("SAMID", "TESTDATE")
  USING INDEX  ENABLE
   )
/
CREATE TABLE  "ETHNICITY" 
   (	"ETHID" NUMBER NOT NULL ENABLE, 
	"NAME" VARCHAR2(80), 
	"CODENUMBER" VARCHAR2(10), 
	"AMBIGUOUS" NUMBER(1,0), 
	 CONSTRAINT "ETHNICITY_PK" PRIMARY KEY ("ETHID")
  USING INDEX  ENABLE, 
	 CONSTRAINT "ETHNICITY_CON" UNIQUE ("CODENUMBER")
  USING INDEX  ENABLE
   )
/
CREATE TABLE  "IHIW_REPORT" 
   (	"LABID" NUMBER NOT NULL ENABLE, 
	"REPORTID" NUMBER NOT NULL ENABLE, 
	"LAB_DEFINE_ID" VARCHAR2(50), 
	"CREATE_TIME" DATE DEFAULT sysdate NOT NULL ENABLE, 
	"CREATE_BY" NUMBER, 
	"MODIFY_BY" NUMBER, 
	"MODIFY_TIME" DATE DEFAULT sysdate NOT NULL ENABLE, 
	"GENETYPE" CHAR(1), 
	 CONSTRAINT "IHIW_REPORT_PK" PRIMARY KEY ("REPORTID")
  USING INDEX  ENABLE, 
	 CONSTRAINT "IHIW_REPORT_UK1" UNIQUE ("LABID", "LAB_DEFINE_ID")
  USING INDEX  ENABLE
   )
/
CREATE TABLE  "FEATURECOORDINATE" 
   (	"REPORTID" NUMBER NOT NULL ENABLE, 
	"LOCUS" NUMBER NOT NULL ENABLE, 
	"FEATURENUMBER" NUMBER NOT NULL ENABLE, 
	"FEATURESTART" NUMBER NOT NULL ENABLE, 
	"FEATURESTOP" NUMBER, 
	"CREATE_BY" NUMBER, 
	"CREATE_TIME" DATE DEFAULT sysdate, 
	"MODIFY_BY" NUMBER, 
	"MODIFY_TIME" DATE, 
	"SAMID" NUMBER NOT NULL ENABLE, 
	"FEATURE_UK" VARCHAR2(40) NOT NULL ENABLE
   )
/
CREATE TABLE  "FEATURE_POS" 
   (	"ALLELE" VARCHAR2(40), 
	"FEATURE_NAME" VARCHAR2(30), 
	"FEATURE_ID" VARCHAR2(15), 
	"FEATURE_START" NUMBER, 
	"FEATURE_END" NUMBER, 
	"VERSION" VARCHAR2(15), 
	"ACCESSION" VARCHAR2(30), 
	 CONSTRAINT "FEATURE_POS_CON" UNIQUE ("VERSION", "FEATURE_ID")
  USING INDEX  ENABLE
   )
/
CREATE TABLE  "FILES" 
   (	"FILEID" NUMBER GENERATED ALWAYS AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOT NULL ENABLE, 
	"FNAME" VARCHAR2(500), 
	"DATAFILE" BLOB, 
	 CONSTRAINT "FILES_PK" PRIMARY KEY ("FILEID")
  USING INDEX  ENABLE
   )
/
CREATE TABLE  "FUSION_DATA" 
   (	"ID" NUMBER, 
	"EREPORTID" NUMBER, 
	"RUNID" NUMBER, 
	"BEADID" VARCHAR2(10), 
	"RAW_VALUE" NUMBER, 
	"SAMPLE_NC" NUMBER, 
	"NS_RAW" NUMBER, 
	"NSNC" NUMBER, 
	"NORMAL" NUMBER, 
	"RATIO" NUMBER, 
	"RXN" NUMBER, 
	"COUNT" NUMBER, 
	"SPECIFICITY" VARCHAR2(30), 
	"ALLELE_SPECIFICITY" VARCHAR2(100), 
	 CONSTRAINT "FUSION_DATA_PK" PRIMARY KEY ("ID")
  USING INDEX  ENABLE
   )
/
CREATE TABLE  "FUSION_PROFILE2" 
   (	"SAMID" NUMBER NOT NULL ENABLE, 
	"TESTDATE" NUMBER NOT NULL ENABLE, 
	"SAMPLEID" VARCHAR2(255), 
	"EPITOPE_SESSION" VARCHAR2(60), 
	"CATELOG" VARCHAR2(30), 
	"NC_BEAD" NUMBER, 
	"TEST_DATE" VARCHAR2(30), 
	"FORMULA" VARCHAR2(30), 
	"THRESHOLD" VARCHAR2(30), 
	"POS" VARCHAR2(30), 
	"NC_SAMPLE" VARCHAR2(255), 
	"EVERSION" VARCHAR2(30), 
	"FILEPATH" VARCHAR2(255), 
	"LABID" NUMBER, 
	 CONSTRAINT "FUSION_PROFILE2_PRI" PRIMARY KEY ("SAMPLEID")
  USING INDEX  ENABLE
   )
/
CREATE TABLE  "FUSION_DATA2" 
   (	"SAMID" NUMBER NOT NULL ENABLE, 
	"TESTDATE" NUMBER NOT NULL ENABLE, 
	"BEADID" VARCHAR2(10), 
	"RAW_VALUE" NUMBER, 
	"SAMPLE_NC" NUMBER, 
	"NS_RAW" NUMBER, 
	"NSNC" NUMBER, 
	"NORMAL" NUMBER, 
	"RATIO" NUMBER, 
	"RXN" NUMBER, 
	"COUNT" NUMBER, 
	"SPECIFICITY" VARCHAR2(30), 
	"ALLELE_SPECIFICITY" VARCHAR2(100), 
	"LABID" NUMBER, 
	"SAMPLEID" VARCHAR2(255)
   )
/
CREATE TABLE  "FUSION_PROFILE" 
   (	"ID" NUMBER, 
	"EREPORTID" NUMBER, 
	"RUNID" NUMBER, 
	"SAMPLEID" VARCHAR2(255), 
	"EPITOPE_SESSION" VARCHAR2(60), 
	"CATELOG" VARCHAR2(30), 
	"NC_BEAD" NUMBER, 
	"TEST_DATE" VARCHAR2(30), 
	"FORMULA" VARCHAR2(30), 
	"THRESHOLD" VARCHAR2(30), 
	"POS" VARCHAR2(30), 
	"NC_SAMPLE" VARCHAR2(255), 
	"EVERSION" VARCHAR2(30), 
	"IHIW_SAMPLE" VARCHAR2(20), 
	 CONSTRAINT "FUSION_PROFILE_PK" PRIMARY KEY ("ID")
  USING INDEX  ENABLE
   )
/
CREATE TABLE  "GENDX_GL2" 
   (	"USERID" NUMBER, 
	"SAMPLEID" VARCHAR2(100), 
	"LOCUS" VARCHAR2(100), 
	"ID" VARCHAR2(50), 
	"GLSTRING1" VARCHAR2(60)
   )
/
CREATE TABLE  "GENDX_XML" 
   (	"USERID" NUMBER, 
	"SAMPLEID" VARCHAR2(100), 
	"LOCUS" NUMBER, 
	"XML" BLOB, 
	 CONSTRAINT "GENDX_XML_CON" UNIQUE ("USERID", "SAMPLEID", "LOCUS")
  USING INDEX  ENABLE
   )
/
CREATE TABLE  "GENOTYPEANNOTATION" 
   (	"REPORTID" NUMBER NOT NULL ENABLE, 
	"SAMID" NUMBER NOT NULL ENABLE, 
	"ANNOTATION" VARCHAR2(800) NOT NULL ENABLE, 
	"CREATE_BY" NUMBER, 
	"CREATE_TIME" DATE DEFAULT sysdate, 
	"MODIFY_BY" NUMBER, 
	"MODIFY_TIME" DATE
   )
/
CREATE TABLE  "HLATYPING_NOVEL" 
   (	"REPORTID" NUMBER NOT NULL ENABLE, 
	"SAMID" NUMBER, 
	"HLATYPING" VARCHAR2(40), 
	"NVGROUP_ID" NUMBER, 
	 CONSTRAINT "HLATYPING_NOVEL_CON" UNIQUE ("REPORTID", "SAMID", "HLATYPING")
  USING INDEX  ENABLE
   )
/
CREATE TABLE  "HLA_JOBS" 
   (	"JOB_NAME" VARCHAR2(1000), 
	"LABCODE" VARCHAR2(100) NOT NULL ENABLE, 
	"ARG2" VARCHAR2(100), 
	"ARG3" VARCHAR2(100), 
	"ARG4" VARCHAR2(100), 
	"ARG5" VARCHAR2(100)
   )
/
CREATE TABLE  "HTMLDB_PLAN_TABLE" 
   (	"STATEMENT_ID" VARCHAR2(30), 
	"PLAN_ID" NUMBER, 
	"TIMESTAMP" DATE, 
	"REMARKS" VARCHAR2(4000), 
	"OPERATION" VARCHAR2(30), 
	"OPTIONS" VARCHAR2(255), 
	"OBJECT_NODE" VARCHAR2(128), 
	"OBJECT_OWNER" VARCHAR2(30), 
	"OBJECT_NAME" VARCHAR2(30), 
	"OBJECT_ALIAS" VARCHAR2(65), 
	"OBJECT_INSTANCE" NUMBER(*,0), 
	"OBJECT_TYPE" VARCHAR2(30), 
	"OPTIMIZER" VARCHAR2(255), 
	"SEARCH_COLUMNS" NUMBER, 
	"ID" NUMBER(*,0), 
	"PARENT_ID" NUMBER(*,0), 
	"DEPTH" NUMBER(*,0), 
	"POSITION" NUMBER(*,0), 
	"COST" NUMBER(*,0), 
	"CARDINALITY" NUMBER(*,0), 
	"BYTES" NUMBER(*,0), 
	"OTHER_TAG" VARCHAR2(255), 
	"PARTITION_START" VARCHAR2(255), 
	"PARTITION_STOP" VARCHAR2(255), 
	"PARTITION_ID" NUMBER(*,0), 
	"OTHER" LONG, 
	"DISTRIBUTION" VARCHAR2(30), 
	"CPU_COST" NUMBER(*,0), 
	"IO_COST" NUMBER(*,0), 
	"TEMP_SPACE" NUMBER(*,0), 
	"ACCESS_PREDICATES" VARCHAR2(4000), 
	"FILTER_PREDICATES" VARCHAR2(4000), 
	"PROJECTION" VARCHAR2(4000), 
	"TIME" NUMBER(*,0), 
	"QBLOCK_NAME" VARCHAR2(30)
   )
/
CREATE TABLE  "LAB_HIS" 
   (	"LABID" NUMBER NOT NULL ENABLE, 
	"LABCODE" VARCHAR2(6), 
	"TITLE" VARCHAR2(30), 
	"FIRSTNAME" VARCHAR2(50) NOT NULL ENABLE, 
	"LASTNAME" VARCHAR2(50) NOT NULL ENABLE, 
	"DIRECTOR" VARCHAR2(80), 
	"DEPARTMENT" VARCHAR2(80), 
	"INSTITUTION" VARCHAR2(80), 
	"ADDRESS1" VARCHAR2(100), 
	"ADDRESS2" VARCHAR2(100), 
	"SADDRESS1" VARCHAR2(100), 
	"SADDRESS2" VARCHAR2(100), 
	"CITY" VARCHAR2(40), 
	"STATE" NUMBER, 
	"ZIP" VARCHAR2(30), 
	"COUNTRY" NUMBER, 
	"PHONE" VARCHAR2(40), 
	"FAX" VARCHAR2(40), 
	"EMAIL" VARCHAR2(100) NOT NULL ENABLE, 
	"URL" VARCHAR2(200), 
	"CREATE_TIME" DATE DEFAULT sysdate, 
	"OLD_LABCODE" VARCHAR2(20), 
	"HISID" NUMBER, 
	 CONSTRAINT "LAB_HIS_CON" PRIMARY KEY ("HISID")
  USING INDEX  ENABLE
   )
/
CREATE TABLE  "LARGEDATA" 
   (	"ID" NUMBER, 
	"DATASET" VARCHAR2(30), 
	"SAMPLE_ID" VARCHAR2(30), 
	"COLLECTION_COUNTRY" VARCHAR2(30), 
	"ETHNICITY" VARCHAR2(30), 
	 CONSTRAINT "LARGEDATA_PK" PRIMARY KEY ("ID")
  USING INDEX  ENABLE
   )
/
CREATE TABLE  "LARGESAMPLETMP" 
   (	"ID" NUMBER, 
	"DATASET" VARCHAR2(30), 
	"SAMPLE_ID" VARCHAR2(30), 
	"COLLECTION_COUNTRY" VARCHAR2(30), 
	"ETHNICITY" VARCHAR2(30), 
	 CONSTRAINT "LARGESAMPLETMP_PK" PRIMARY KEY ("ID")
  USING INDEX  ENABLE
   )
/
CREATE TABLE  "NOVELITY_GROUP" 
   (	"HLATYPING" VARCHAR2(80) NOT NULL ENABLE, 
	"REFTYPE" VARCHAR2(5), 
	"FID" VARCHAR2(10), 
	"START_POS" NUMBER, 
	"END_POS" NUMBER, 
	"REFSEQ" VARCHAR2(210), 
	"CONSEQ" VARCHAR2(210), 
	"NVGROUP_ID" NUMBER NOT NULL ENABLE
   )
/
CREATE TABLE  "SAMPLE_TYPING" 
   (	"REPORTID" NUMBER NOT NULL ENABLE, 
	"SAMID" NUMBER NOT NULL ENABLE, 
	"HLATYPING" VARCHAR2(80) NOT NULL ENABLE, 
	"ALIGN_REF_DB" VARCHAR2(100), 
	"BC_REF_DB" VARCHAR2(100), 
	"CONSENSUS_SEQUENCE" VARCHAR2(2000), 
	"FEATURE" NUMBER NOT NULL ENABLE, 
	"LOCUS_NAME" NUMBER NOT NULL ENABLE, 
	"MEANREADDEPTH" NUMBER(9,3), 
	"DATAFILELOC" VARCHAR2(300), 
	"PHASINGGROUP" NUMBER(5,0), 
	"NOVELPOLYMORPHISM" VARCHAR2(30000), 
	"CON_SEQ" CLOB, 
	"CREATE_BY" NUMBER, 
	"CREATE_TIME" DATE DEFAULT sysdate, 
	"MODIFY_TIME" DATE, 
	"MODIFY_BY" NUMBER, 
	"UK_LOC" VARCHAR2(50), 
	"GENOTYPEANNOTATION" VARCHAR2(300), 
	"SPOSITION" NUMBER, 
	"FEATURENUMBER" VARCHAR2(80), 
	"CONSEQ_ID" NUMBER NOT NULL ENABLE, 
	"PROCESSED" CHAR(1), 
	 CONSTRAINT "SAMPLE_TYPING_UK1" UNIQUE ("REPORTID", "SAMID", "UK_LOC")
  USING INDEX  ENABLE, 
	 CONSTRAINT "SAMPLE_TYPING_PK" PRIMARY KEY ("CONSEQ_ID")
  USING INDEX  ENABLE
   )
/
CREATE TABLE  "NOVELPOLY" 
   (	"REFTYPE" VARCHAR2(5), 
	"REFSEQ" VARCHAR2(210), 
	"CONSEQ" VARCHAR2(210), 
	"START_POS" NUMBER, 
	"END_POS" NUMBER, 
	"FID" VARCHAR2(10), 
	"FEATURE_START" NUMBER, 
	"NOVID" NUMBER, 
	"CONSEQ_ID" NUMBER NOT NULL ENABLE, 
	"ALN_START" NUMBER, 
	"ALN_END" NUMBER, 
	 CONSTRAINT "NOVELPOLY_PK" PRIMARY KEY ("NOVID")
  USING INDEX  ENABLE
   )
/
CREATE TABLE  "ORE$1292_7" 
   (	"VAL001" BINARY_DOUBLE, 
	"VAL002" VARCHAR2(4000), 
	"VAL003" VARCHAR2(4000), 
	"VAL004" NUMBER(*,0), 
	"VAL005" NUMBER(*,0)
   )
/
CREATE TABLE  "ORE$2845_401" 
   (	"VAL001" NUMBER(*,0), 
	"VAL002" NUMBER(*,0), 
	"VAL003" NUMBER(*,0)
   )
/
CREATE TABLE  "ORE$2845_405" 
   (	"VAL001" NUMBER(*,0), 
	"VAL002" NUMBER(*,0), 
	"VAL003" NUMBER(*,0)
   )
/
CREATE TABLE  "ORE$2845_409" 
   (	"VAL001" NUMBER(*,0), 
	"VAL002" NUMBER(*,0), 
	"VAL003" NUMBER(*,0)
   )
/
CREATE TABLE  "ORE$2885_17" 
   (	"VAL001" NUMBER(*,0), 
	"VAL002" NUMBER(*,0), 
	"VAL003" NUMBER(*,0)
   )
/
CREATE TABLE  "PEDIGREE" 
   (	"FAMILY_ID" VARCHAR2(40), 
	"SAMID" NUMBER NOT NULL ENABLE, 
	"PATERNAL_ID" NUMBER, 
	"MATERNAL_ID" NUMBER, 
	"SEX" CHAR(1), 
	"PHENOTYPE" VARCHAR2(40), 
	"CREATE_BY" NUMBER, 
	"CREATE_TIME" DATE DEFAULT sysdate, 
	"SUBLABID" NUMBER, 
	"MODIFY_TIME" DATE, 
	"MODIFY_BY" NUMBER, 
	 CONSTRAINT "PEDGREE_PK" PRIMARY KEY ("SAMID")
  USING INDEX  ENABLE
   )
/
CREATE TABLE  "PEDIGREE_IMAGE" 
   (	"SUBLABID" NUMBER, 
	"FAMILY_ID" VARCHAR2(40), 
	"IMAGE" BLOB, 
	"CREATE_TIME" DATE, 
	 CONSTRAINT "PEDIGREE_IMAGE_PK" PRIMARY KEY ("SUBLABID", "FAMILY_ID")
  USING INDEX  ENABLE
   )
/
CREATE TABLE  "PED_IMPORT" 
   (	"FAMILY_ID" VARCHAR2(30), 
	"INDIVIDUAL_ID" VARCHAR2(30), 
	"PATERNAL_ID" VARCHAR2(30), 
	"MATERNAL_ID" VARCHAR2(30), 
	"SEX" VARCHAR2(10), 
	"PHENOTYPE" VARCHAR2(80), 
	"CREATE_BY" NUMBER, 
	"SUBLABID" NUMBER, 
	 CONSTRAINT "PED_IMPORT_UK1" UNIQUE ("CREATE_BY", "FAMILY_ID", "INDIVIDUAL_ID")
  USING INDEX  ENABLE
   )
/
CREATE TABLE  "PED_IMPORT_PNG" 
   (	"ID" NUMBER, 
	"IMAGE" BLOB, 
	"CREATE_BY" NUMBER
   )
/
CREATE TABLE  "PROCESS_CONSEQ" 
   (	"REPORTID" NUMBER NOT NULL ENABLE, 
	"SAMID" NUMBER NOT NULL ENABLE, 
	"UK_LOC" VARCHAR2(30), 
	"CONSEQ_ID" NUMBER, 
	 CONSTRAINT "PROCESS_CONSEQ_PK" PRIMARY KEY ("CONSEQ_ID")
  USING INDEX  ENABLE
   )
/
CREATE TABLE  "PROJECT_DATA" 
   (	"PDID" NUMBER GENERATED BY DEFAULT AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOT NULL ENABLE, 
	"CPNID" NUMBER, 
	"DATAFILE" BLOB, 
	"DATADOC" VARCHAR2(500), 
	"FILENAME" VARCHAR2(100), 
	 CONSTRAINT "PROJECT_DATA_PK" PRIMARY KEY ("PDID")
  USING INDEX  ENABLE
   )
/
CREATE TABLE  "REFERENCE_ALLELES" 
   (	"ID" NUMBER, 
	"IMGTHLA_DATABASE_3250_ACCES" VARCHAR2(30), 
	"LOCUS" VARCHAR2(30), 
	"IMGTHLA_DATABASE_3250_ALLEL" VARCHAR2(30), 
	"DESCRIPTION" VARCHAR2(255), 
	 CONSTRAINT "REFERENCE_ALLELES_PK" PRIMARY KEY ("ID")
  USING INDEX  ENABLE
   )
/
CREATE TABLE  "REFERENCE_CATEGORIES" 
   (	"ID" NUMBER, 
	"IMGTHLA_DATABASE_3250_ACCES" VARCHAR2(30), 
	"LOCUS" VARCHAR2(30), 
	"IMGTHLA_DATABASE_3250_ALLEL" VARCHAR2(30), 
	"DESCRIPTION" VARCHAR2(255), 
	 CONSTRAINT "REFERENCE_CATEGORIES_PK" PRIMARY KEY ("ID")
  USING INDEX  ENABLE
   )
/
CREATE TABLE  "RELATIVE" 
   (	"SAMID" NUMBER NOT NULL ENABLE, 
	"NAME" VARCHAR2(40) NOT NULL ENABLE, 
	"SUBLABID" NUMBER NOT NULL ENABLE, 
	"LANGUAGE" VARCHAR2(60), 
	"SECLANGUAGE" VARCHAR2(60), 
	"RELIGION" VARCHAR2(60), 
	"SUBRELIGION" VARCHAR2(60), 
	"ETHID" NUMBER, 
	"PPLID" NUMBER NOT NULL DISABLE, 
	"REGION" NUMBER, 
	"BNATION" NUMBER, 
	"BOTHERNATION" VARCHAR2(60), 
	"BIRTHPLACE" VARCHAR2(60), 
	"NATION" NUMBER, 
	"OTHERNATION" VARCHAR2(60), 
	"CREATE_BY" NUMBER, 
	"CREATE_TIME" DATE DEFAULT sysdate, 
	"MODIFY_TIME" DATE, 
	"MODIFY_BY" NUMBER, 
	 CONSTRAINT "RELATIVE_PK" PRIMARY KEY ("SAMID")
  USING INDEX  ENABLE, 
	 CONSTRAINT "RELATIVE_NAME_LAB" UNIQUE ("SUBLABID", "NAME")
  USING INDEX  ENABLE
   )
/
CREATE TABLE  "REPORT_HARDWARE" 
   (	"REPORTID" NUMBER NOT NULL ENABLE, 
	"FIRMWARE" VARCHAR2(60), 
	"MODEL_NUMBER" VARCHAR2(60), 
	"NAME" VARCHAR2(80) NOT NULL ENABLE, 
	"MANUFACTURER" VARCHAR2(60), 
	"CREATE_BY" NUMBER, 
	"CREATE_TIME" DATE DEFAULT sysdate, 
	"MODIFY_TIME" DATE, 
	"TYPING_METHOD" NUMBER, 
	"MODIFY_BY" NUMBER
   )
/
CREATE TABLE  "REPORT_REAGENT" 
   (	"REPORTID" NUMBER, 
	"NAME" VARCHAR2(100), 
	"SOURCE" VARCHAR2(100), 
	"EXTERNAL_IDENTIFIER" VARCHAR2(100), 
	"INTERNAL_IDENTIFIER" VARCHAR2(100), 
	"DEVIATIONS" VARCHAR2(100), 
	"SPECIFIC_LOCI" VARCHAR2(100), 
	"CREATE_BY" NUMBER, 
	"CREATE_TIME" DATE DEFAULT sysdate, 
	"MODIFY_BY" NUMBER, 
	"MODIFY_TIME" DATE, 
	 CONSTRAINT "REPORT_REAGENT_UK1" UNIQUE ("REPORTID", "NAME")
  USING INDEX  ENABLE
   )
/
CREATE TABLE  "REPORT_SAMPLE" 
   (	"REPORTID" NUMBER NOT NULL ENABLE, 
	"SAMID" NUMBER NOT NULL ENABLE, 
	"GL_STRING" VARCHAR2(32000), 
	"CREATE_TIME" DATE DEFAULT sysdate, 
	"CREATE_BY" NUMBER, 
	"MODIFY_TIME" DATE, 
	"MODIFY_BY" NUMBER, 
	"DB_VERSION" VARCHAR2(16), 
	"ORG_GL" VARCHAR2(32000), 
	 CONSTRAINT "REPORT_SAMPLE_CON" PRIMARY KEY ("REPORTID", "SAMID")
  USING INDEX  ENABLE
   )
/
CREATE TABLE  "REPORT_SOFTWARE" 
   (	"REPORTID" NUMBER NOT NULL ENABLE, 
	"MANUFACTURER" VARCHAR2(80), 
	"NAME" VARCHAR2(40) NOT NULL ENABLE, 
	"PARAMETERS" VARCHAR2(200), 
	"VERSION" VARCHAR2(40), 
	"FUNCTION" NUMBER, 
	"CREATE_BY" NUMBER, 
	"CREATE_TIME" DATE DEFAULT sysdate, 
	"MODIFY_TIME" DATE, 
	"MODIFY_BY" NUMBER, 
	"FUNCTIONS" VARCHAR2(200) NOT NULL ENABLE, 
	 CONSTRAINT "REPORT_SOFTWARE_UNI" UNIQUE ("REPORTID", "NAME", "PARAMETERS")
  USING INDEX  ENABLE
   )
/
CREATE TABLE  "RQ$DATASTOREINVENTORY" 
   (	"OBJID" NUMBER, 
	"CHUNKID" NUMBER, 
	"VALUE" RAW(2000)
   )
/
CREATE TABLE  "SAMPLE_MAPPING" 
   (	"WRONG_ID" NUMBER NOT NULL ENABLE, 
	"CORRECT_ID" NUMBER NOT NULL ENABLE, 
	 CONSTRAINT "SAMPLE_MAPPING_PK" PRIMARY KEY ("WRONG_ID")
  USING INDEX  ENABLE
   )
/
CREATE TABLE  "SFTP_DATALOG" 
   (	"DATATYPE" CHAR(1), 
	"LABCODE" VARCHAR2(10), 
	"FOLDER" VARCHAR2(300), 
	"MTIME" VARCHAR2(300), 
	"RESULT" VARCHAR2(600), 
	"SDATAID" NUMBER, 
	 CONSTRAINT "SFTP_DATALOG_PK" PRIMARY KEY ("SDATAID")
  USING INDEX  ENABLE
   )
/
CREATE TABLE  "STATE" 
   (	"STATE_ID" NUMBER NOT NULL ENABLE, 
	"STATE_NAME" VARCHAR2(40) NOT NULL ENABLE, 
	"STATE_CODE" VARCHAR2(3), 
	 CONSTRAINT "STATE_PK" PRIMARY KEY ("STATE_ID")
  USING INDEX  ENABLE
   )
/
CREATE TABLE  "TMPINSERT" 
   (	"FIRSTNAME" VARCHAR2(80), 
	"LASTNAME" VARCHAR2(80), 
	"EMAIL" VARCHAR2(300), 
	"COUNTRY" VARCHAR2(20), 
	"STATE" VARCHAR2(40), 
	"LABCODE" VARCHAR2(40), 
	"PASSWORD" VARCHAR2(40), 
	"COUNTRYID" NUMBER, 
	"STATE_ID" NUMBER, 
	"TMPID" NUMBER, 
	 CONSTRAINT "TMPINSERT_PK" PRIMARY KEY ("TMPID")
  USING INDEX  ENABLE
   )
/
CREATE TABLE  "TMPSAMPLE" 
   (	"REPORTID" BINARY_DOUBLE, 
	"LABCODE" VARCHAR2(4000), 
	"LAB_DEFINED_ID" VARCHAR2(4000), 
	"SAMPLEID" VARCHAR2(4000), 
	"GENOTYPE_GL" VARCHAR2(4000), 
	"ORIGINAL_GL" VARCHAR2(4000)
   )
/
CREATE TABLE  "TMPTYPING" 
   (	"REPORTID" BINARY_DOUBLE, 
	"LABCODE" VARCHAR2(4000), 
	"LAB_DEFINED_ID" VARCHAR2(4000), 
	"SAMPLEID" VARCHAR2(4000), 
	"HLATYPING" VARCHAR2(4000), 
	"ALIGN_REF_DB" VARCHAR2(4000), 
	"BC_REF_DB" VARCHAR2(4000), 
	"CON_SEQ" CLOB, 
	"FEATURE" VARCHAR2(4000), 
	"LOCUS_NAME" VARCHAR2(4000), 
	"MEANREADDEPTH" VARCHAR2(4000), 
	"DATAFILELOC" VARCHAR2(4000), 
	"PHASINGGROUP" BINARY_DOUBLE, 
	"SPOSITION" BINARY_DOUBLE, 
	"NOVELPOLYMORPHISM" CLOB, 
	"GENOTYPEANNOTATION" VARCHAR2(4000), 
	"FEATURENUMBER" VARCHAR2(4000)
   )
/
CREATE TABLE  "TMP_NMDP" 
   (	"ID" NUMBER, 
	"DATASET" VARCHAR2(30), 
	"SAMPLE_ID" VARCHAR2(30), 
	"COLLECTION_COUNTRY" VARCHAR2(30), 
	"MATERIAL_AVAILABLE_FOR_TYPING" VARCHAR2(1), 
	"CELL_LINE_AVAILABLE" VARCHAR2(1), 
	"ETHNICITY" VARCHAR2(30), 
	 CONSTRAINT "TMP_NMDP_PK" PRIMARY KEY ("ID")
  USING INDEX  ENABLE
   )
/
CREATE TABLE  "TMP_RESULTOUT" 
   (	"CONSEQ_ID" NUMBER, 
	"PROCESSED" VARCHAR2(1), 
	 CONSTRAINT "TMP_RESULTOUT_PK" PRIMARY KEY ("CONSEQ_ID")
  USING INDEX  ENABLE
   )
/
CREATE TABLE  "TMP_XML_INFO" 
   (	"REPORTID" NUMBER, 
	"LABCODE" VARCHAR2(50), 
	"LAB_DEFINED_ID" VARCHAR2(50)
   )
/
CREATE TABLE  "TRANSPLANTATION" 
   (	"TRPID" NUMBER, 
	"TRP_CODE" VARCHAR2(20) NOT NULL ENABLE, 
	"DONORID" NUMBER NOT NULL ENABLE, 
	"RECIPIENTID" NUMBER NOT NULL ENABLE, 
	"DONOR_GL" VARCHAR2(6000), 
	"RECIPIENT_GL" VARCHAR2(6000), 
	"TRP_DATE" DATE, 
	"CREATE_TIME" DATE DEFAULT SYSDATE, 
	"MODIFY_TIME" DATE, 
	"CREATE_BY" NUMBER, 
	"MODIFY_BY" NUMBER, 
	"ORGAN" NUMBER, 
	"SUBLABID" NUMBER NOT NULL ENABLE, 
	"INCCR" VARCHAR2(500), 
	 CONSTRAINT "TRANSPLANTATION_PK" PRIMARY KEY ("TRPID")
  USING INDEX  ENABLE, 
	 CONSTRAINT "TRANSPLANTATION_CON" UNIQUE ("DONORID", "RECIPIENTID")
  USING INDEX  ENABLE, 
	 CONSTRAINT "TRANSPLANTATION_CONUK2" UNIQUE ("SUBLABID", "TRP_CODE")
  USING INDEX  ENABLE
   )
/
CREATE TABLE  "UPLOAD_FILE" 
   (	"REPORTID" NUMBER, 
	"REALFILE" BLOB, 
	 CONSTRAINT "UPLOAD_FILE_PK" PRIMARY KEY ("REPORTID")
  USING INDEX  ENABLE
   )
/
CREATE TABLE  "VALIDED_GL" 
   (	"GLS" VARCHAR2(6000) NOT NULL ENABLE, 
	"VALIDLEVEL" CHAR(1), 
	 CONSTRAINT "VALIDED_GL_UK1" UNIQUE ("GLS")
  USING INDEX  ENABLE
   )
/
CREATE TABLE  "XMLFILE" 
   (	"REPORTID" NUMBER, 
	"XML" BLOB, 
	"CREATE_TIME" DATE, 
	"CREATE_BY" NUMBER, 
	"ISHML" CHAR(1), 
	 CONSTRAINT "XMLFILE_PK" PRIMARY KEY ("REPORTID")
  USING INDEX  ENABLE
   )
/
CREATE TABLE  "XML_FEACO_T" 
   (	"REPORTID" NUMBER, 
	"LABCODE" VARCHAR2(50), 
	"LAB_DEFINED_ID" VARCHAR2(50), 
	"SAMPLEID" VARCHAR2(60), 
	"LOCUS" VARCHAR2(30), 
	"FEATURENUMBER" NUMBER, 
	"FEATURESTART" NUMBER, 
	"FEATURESTOP" NUMBER
   )
/
CREATE TABLE  "XML_GENANN_T" 
   (	"REPORTID" NUMBER, 
	"LABCODE" VARCHAR2(50), 
	"LAB_DEFINED_ID" VARCHAR2(50), 
	"SAMPLEID" VARCHAR2(60), 
	"ANNOTATION" VARCHAR2(100)
   )
/
CREATE TABLE  "XML_GL_VALID" 
   (	"REPORTID" NUMBER, 
	"SAMID" NUMBER, 
	"VALID" VARCHAR2(500), 
	 CONSTRAINT "XML_GL_VALID_PK" PRIMARY KEY ("REPORTID", "SAMID")
  USING INDEX  ENABLE
   )
/
CREATE TABLE  "XML_HARDWARE_T" 
   (	"REPORTID" NUMBER, 
	"LABCODE" VARCHAR2(30), 
	"LAB_DEFINED_ID" VARCHAR2(30), 
	"INSTRUMENT_FIRMWARE" VARCHAR2(60), 
	"INSTRUMENT_MODEL_NUMBER" VARCHAR2(60), 
	"INSTRUMENT_NAME" VARCHAR2(40), 
	"MANUFACTURER" VARCHAR2(60), 
	"TYPING_METHOD" VARCHAR2(80)
   )
/
CREATE TABLE  "XML_INFO_T" 
   (	"REPORTID" NUMBER, 
	"LABCODE" VARCHAR2(50), 
	"LAB_DEFINED_ID" VARCHAR2(50)
   )
/
CREATE TABLE  "XML_REAGENT_T" 
   (	"REPORTID" NUMBER, 
	"PROTOCOL_NAME" VARCHAR2(100), 
	"PROTOCOL_SOURCE" VARCHAR2(100), 
	"PROTOCOL_EXTERNAL_IDENTIFIER" VARCHAR2(100), 
	"PROTOCOL_INTERNAL_IDENTIFIER" VARCHAR2(100), 
	"PROTOCOL_DEVIATIONS" VARCHAR2(100), 
	"SPECIFIC_LOCI" VARCHAR2(100)
   )
/
CREATE TABLE  "XML_SAMPLE_T" 
   (	"REPORTID" NUMBER, 
	"LABCODE" VARCHAR2(50), 
	"LAB_DEFINED_ID" VARCHAR2(50), 
	"SAMPLEID" VARCHAR2(60), 
	"GENOTYPE_GL" VARCHAR2(32767), 
	"ORIGINAL_GL" VARCHAR2(32767)
   )
/
CREATE TABLE  "XML_SAMPLE_TYPING_T" 
   (	"REPORTID" NUMBER, 
	"LABCODE" VARCHAR2(50), 
	"LAB_DEFINED_ID" VARCHAR2(50), 
	"SAMPLEID" VARCHAR2(60), 
	"HLATYPING" VARCHAR2(80), 
	"ALIGN_REF_DB" VARCHAR2(100), 
	"BC_REF_DB" VARCHAR2(100), 
	"CON_SEQ" CLOB, 
	"FEATURE" VARCHAR2(80), 
	"LOCUS_NAME" VARCHAR2(30), 
	"MEANREADDEPTH" VARCHAR2(10), 
	"DATAFILELOC" VARCHAR2(300), 
	"PHASINGGROUP" NUMBER, 
	"SPOSITION" NUMBER, 
	"NOVELPOLYMORPHISM" CLOB, 
	"GENOTYPEANNOTATION" VARCHAR2(300), 
	"FEATURENUMBER" VARCHAR2(300)
   )
/
CREATE TABLE  "XML_SOFTWARE_T" 
   (	"REPORTID" NUMBER, 
	"LABCODE" VARCHAR2(30), 
	"LAB_DEFINED_ID" VARCHAR2(30), 
	"SOFTWARE_MANUFACTURER" VARCHAR2(80), 
	"SOFTWARE_NAME" VARCHAR2(40), 
	"SOFTWARE_PARAMETERS" VARCHAR2(200), 
	"SOFTWARE_VERSION" VARCHAR2(40), 
	"SOFTWARE_FUNCTION" VARCHAR2(100)
   )
/
ALTER TABLE  "ABCALLING" ADD CONSTRAINT "ABCALLING_FK1" FOREIGN KEY ("PATIENT_ID")
	  REFERENCES  "SAMPLE" ("SAMID") ENABLE
/
ALTER TABLE  "ABCALLING" ADD CONSTRAINT "ABCALLING_FK2" FOREIGN KEY ("DONOR_ID")
	  REFERENCES  "SAMPLE" ("SAMID") ENABLE
/
ALTER TABLE  "APEX$_WS_FILES" ADD CONSTRAINT "APEX$_WS_FILES_FK" FOREIGN KEY ("ROW_ID")
	  REFERENCES  "APEX$_WS_ROWS" ("ID") ON DELETE CASCADE ENABLE
/
ALTER TABLE  "APEX$_WS_LINKS" ADD CONSTRAINT "APEX$_WS_LINKS_FK" FOREIGN KEY ("ROW_ID")
	  REFERENCES  "APEX$_WS_ROWS" ("ID") ON DELETE CASCADE ENABLE
/
ALTER TABLE  "APEX$_WS_NOTES" ADD CONSTRAINT "APEX$_WS_NOTES_FK" FOREIGN KEY ("ROW_ID")
	  REFERENCES  "APEX$_WS_ROWS" ("ID") ON DELETE CASCADE ENABLE
/
ALTER TABLE  "APEX$_WS_TAGS" ADD CONSTRAINT "APEX$_WS_TAGS_FK" FOREIGN KEY ("ROW_ID")
	  REFERENCES  "APEX$_WS_ROWS" ("ID") ON DELETE CASCADE ENABLE
/
ALTER TABLE  "COMPONENT_DATASET" ADD CONSTRAINT "COMPONENT_DATASET_FK" FOREIGN KEY ("PPLID")
	  REFERENCES  "DATASET" ("PPLID") ON DELETE CASCADE ENABLE
/
ALTER TABLE  "COMPONENT_DATASET" ADD CONSTRAINT "COMPONENT_DATASET_FK2" FOREIGN KEY ("CPNID")
	  REFERENCES  "PROJECT" ("CPNID") ENABLE
/
ALTER TABLE  "COMPONENT_LAB" ADD CONSTRAINT "COMPONENT_LAB_CPN" FOREIGN KEY ("CPNID")
	  REFERENCES  "PROJECT" ("CPNID") ENABLE
/
ALTER TABLE  "COMPONENT_LAB" ADD CONSTRAINT "COMPONENT_LAB_FK" FOREIGN KEY ("LABID")
	  REFERENCES  "IHIW_LAB" ("LABID") ENABLE
/
ALTER TABLE  "COMPONENT_LAB" ADD CONSTRAINT "COMPONENT_LAB_OVERRIDE" FOREIGN KEY ("OVERRIDE")
	  REFERENCES  "IHIW_ROLES" ("ROLE_ID") ON DELETE SET NULL ENABLE
/
ALTER TABLE  "COMPONENT_USER" ADD CONSTRAINT "COMPONENT_USER_CON" FOREIGN KEY ("OVERRIDE")
	  REFERENCES  "IHIW_ROLES" ("ROLE_ID") ENABLE
/
ALTER TABLE  "COMPONENT_USER" ADD CONSTRAINT "COMPONENT_USER_CPNID" FOREIGN KEY ("CPNID")
	  REFERENCES  "PROJECT" ("CPNID") ENABLE
/
ALTER TABLE  "COMPONENT_USER" ADD CONSTRAINT "COMPONENT_USER_FK" FOREIGN KEY ("USERID")
	  REFERENCES  "IHIW_USER" ("USERID") ENABLE
/
ALTER TABLE  "COMPONENT_USER" ADD CONSTRAINT "COMPONENT_USER_ROLE" FOREIGN KEY ("ROLE")
	  REFERENCES  "IHIW_ROLES" ("ROLE_ID") ON DELETE CASCADE ENABLE
/
ALTER TABLE  "DATASET_USER" ADD CONSTRAINT "DATASET_USER_FK" FOREIGN KEY ("PPLID")
	  REFERENCES  "DATASET" ("PPLID") ON DELETE CASCADE ENABLE
/
ALTER TABLE  "DATASET_USER" ADD CONSTRAINT "DATASET_USER_FK_USER" FOREIGN KEY ("USERID")
	  REFERENCES  "IHIW_USER" ("USERID") ON DELETE CASCADE ENABLE
/
ALTER TABLE  "DOCUMENTS" ADD CONSTRAINT "DOCUMENTS_DID" FOREIGN KEY ("DID")
	  REFERENCES  "PROJECT" ("CPNID") ENABLE
/
ALTER TABLE  "EPITOPE_RAW" ADD CONSTRAINT "EPITOPE_RAW_FK" FOREIGN KEY ("EREPORTID")
	  REFERENCES  "EPITOPE_REPORT" ("EREPORTID") ON DELETE CASCADE ENABLE
/
ALTER TABLE  "FEATURECOORDINATE" ADD CONSTRAINT "FEATURECOORDINATE_F2" FOREIGN KEY ("SAMID")
	  REFERENCES  "SAMPLE" ("SAMID") ENABLE
/
ALTER TABLE  "FEATURECOORDINATE" ADD CONSTRAINT "FEATURECOORDINATE_FK1" FOREIGN KEY ("REPORTID")
	  REFERENCES  "IHIW_REPORT" ("REPORTID") ON DELETE CASCADE ENABLE
/
ALTER TABLE  "FUSION_DATA2" ADD CONSTRAINT "FUSION_DATA2_CON" FOREIGN KEY ("SAMPLEID")
	  REFERENCES  "FUSION_PROFILE2" ("SAMPLEID") ON DELETE CASCADE ENABLE
/
ALTER TABLE  "FUSION_DATA2" ADD CONSTRAINT "FUSION_DATA2_F" FOREIGN KEY ("SAMID", "TESTDATE")
	  REFERENCES  "EPI_SAMPLE_INFO" ("SAMID", "TESTDATE") ON DELETE CASCADE DISABLE
/
ALTER TABLE  "FUSION_DATA" ADD CONSTRAINT "FUSION_DATA_FK" FOREIGN KEY ("EREPORTID")
	  REFERENCES  "EPITOPE_REPORT" ("EREPORTID") ON DELETE CASCADE ENABLE
/
ALTER TABLE  "FUSION_PROFILE2" ADD CONSTRAINT "FUSION_PROFILE2_F" FOREIGN KEY ("SAMID", "TESTDATE")
	  REFERENCES  "EPI_SAMPLE_INFO" ("SAMID", "TESTDATE") DISABLE
/
ALTER TABLE  "FUSION_PROFILE" ADD CONSTRAINT "FUSION_PROFILE_FK" FOREIGN KEY ("EREPORTID")
	  REFERENCES  "EPITOPE_REPORT" ("EREPORTID") ON DELETE CASCADE ENABLE
/
ALTER TABLE  "GENDX_XML" ADD CONSTRAINT "GENDX_XML_UCON" FOREIGN KEY ("USERID")
	  REFERENCES  "IHIW_USER" ("USERID") ENABLE
/
ALTER TABLE  "GENOTYPEANNOTATION" ADD CONSTRAINT "GENOTYPEANNOTATION_FK1" FOREIGN KEY ("REPORTID")
	  REFERENCES  "IHIW_REPORT" ("REPORTID") ON DELETE CASCADE ENABLE
/
ALTER TABLE  "GENOTYPEANNOTATION" ADD CONSTRAINT "GENOTYPEANNOTATION_FK2" FOREIGN KEY ("SAMID")
	  REFERENCES  "SAMPLE" ("SAMID") ENABLE
/
ALTER TABLE  "IHIW_USER" ADD CONSTRAINT "IHIWS_USER_CON" FOREIGN KEY ("LABID")
	  REFERENCES  "IHIW_LAB" ("LABID") ON DELETE SET NULL ENABLE
/
ALTER TABLE  "IHIW_USER" ADD CONSTRAINT "IHIWS_USER_ROLE_CON" FOREIGN KEY ("ROLE")
	  REFERENCES  "IHIW_ROLES" ("ROLE_ID") ENABLE
/
ALTER TABLE  "IHIW_REPORT" ADD CONSTRAINT "IHIW_REPORT_FK" FOREIGN KEY ("LABID")
	  REFERENCES  "IHIW_LAB" ("LABID") ENABLE
/
ALTER TABLE  "NOVELPOLY" ADD CONSTRAINT "NOVELPOLY_FK" FOREIGN KEY ("CONSEQ_ID")
	  REFERENCES  "SAMPLE_TYPING" ("CONSEQ_ID") ON DELETE CASCADE ENABLE
/
ALTER TABLE  "PEDIGREE" ADD CONSTRAINT "PEDIGREE_CON" FOREIGN KEY ("SUBLABID")
	  REFERENCES  "IHIW_LAB" ("LABID") ENABLE
/
ALTER TABLE  "PEDIGREE" ADD CONSTRAINT "PEDIGREE_FKS" FOREIGN KEY ("SAMID")
	  REFERENCES  "SAMPLE" ("SAMID") ON DELETE CASCADE ENABLE
/
ALTER TABLE  "PED_IMPORT" ADD CONSTRAINT "PED_IMPORT_CON" FOREIGN KEY ("SUBLABID")
	  REFERENCES  "IHIW_LAB" ("LABID") ON DELETE CASCADE ENABLE
/
ALTER TABLE  "PED_IMPORT" ADD CONSTRAINT "PED_IMPORT_FK" FOREIGN KEY ("CREATE_BY")
	  REFERENCES  "IHIW_USER" ("USERID") ENABLE
/
ALTER TABLE  "PED_IMPORT_PNG" ADD CONSTRAINT "PED_IMPORT_PNG_FK" FOREIGN KEY ("CREATE_BY")
	  REFERENCES  "IHIW_USER" ("USERID") ENABLE
/
ALTER TABLE  "PROCESS_CONSEQ" ADD CONSTRAINT "PROCESS_CONSEQ_FK" FOREIGN KEY ("REPORTID", "SAMID", "UK_LOC")
	  REFERENCES  "SAMPLE_TYPING" ("REPORTID", "SAMID", "UK_LOC") ON DELETE CASCADE ENABLE
/
ALTER TABLE  "PROJECT" ADD CONSTRAINT "PROJECT_CPN" FOREIGN KEY ("BELONG_TO")
	  REFERENCES  "PROJECT" ("CPNID") ENABLE
/
ALTER TABLE  "RELATIVE" ADD CONSTRAINT "RELATIVE_FK" FOREIGN KEY ("PPLID")
	  REFERENCES  "DATASET" ("PPLID") ENABLE
/
ALTER TABLE  "RELATIVE" ADD CONSTRAINT "RELATIVE_SUBLAB" FOREIGN KEY ("SUBLABID")
	  REFERENCES  "IHIW_LAB" ("LABID") ENABLE
/
ALTER TABLE  "REPORT_HARDWARE" ADD CONSTRAINT "REPORT_HARDWARE_FK" FOREIGN KEY ("REPORTID")
	  REFERENCES  "IHIW_REPORT" ("REPORTID") ON DELETE CASCADE ENABLE
/
ALTER TABLE  "REPORT_REAGENT" ADD CONSTRAINT "REPORT_REAGENT_FK" FOREIGN KEY ("REPORTID")
	  REFERENCES  "IHIW_REPORT" ("REPORTID") ON DELETE CASCADE ENABLE
/
ALTER TABLE  "REPORT_SAMPLE" ADD CONSTRAINT "REPORT_SAMPLE_FK" FOREIGN KEY ("REPORTID")
	  REFERENCES  "IHIW_REPORT" ("REPORTID") ON DELETE CASCADE ENABLE
/
ALTER TABLE  "REPORT_SAMPLE" ADD CONSTRAINT "REPORT_SAMPLE_SAM" FOREIGN KEY ("SAMID")
	  REFERENCES  "SAMPLE" ("SAMID") ENABLE
/
ALTER TABLE  "REPORT_SOFTWARE" ADD CONSTRAINT "REPORT_SOFTWARE_CON" FOREIGN KEY ("REPORTID")
	  REFERENCES  "IHIW_REPORT" ("REPORTID") ON DELETE CASCADE ENABLE
/
ALTER TABLE  "SAMPLE" ADD CONSTRAINT "SAMPLE_FK" FOREIGN KEY ("PPLID")
	  REFERENCES  "DATASET" ("PPLID") ON DELETE SET NULL ENABLE
/
ALTER TABLE  "SAMPLE" ADD CONSTRAINT "SAMPLE_FK2" FOREIGN KEY ("SUBLABID")
	  REFERENCES  "IHIW_LAB" ("LABID") ON DELETE SET NULL ENABLE
/
ALTER TABLE  "SAMPLE_TYPING" ADD CONSTRAINT "SAMPLE_TYPING_FK" FOREIGN KEY ("REPORTID", "SAMID")
	  REFERENCES  "REPORT_SAMPLE" ("REPORTID", "SAMID") ON DELETE CASCADE ENABLE
/
ALTER TABLE  "TRANSPLANTATION" ADD CONSTRAINT "TRANSPLANTATION_FKD" FOREIGN KEY ("DONORID")
	  REFERENCES  "SAMPLE" ("SAMID") ON DELETE CASCADE ENABLE
/
ALTER TABLE  "TRANSPLANTATION" ADD CONSTRAINT "TRANSPLANTATION_FKR" FOREIGN KEY ("RECIPIENTID")
	  REFERENCES  "SAMPLE" ("SAMID") ON DELETE CASCADE ENABLE
/
ALTER TABLE  "TRANSPLANTATION" ADD CONSTRAINT "TRANSPLANTATION_FK_LAB" FOREIGN KEY ("SUBLABID")
	  REFERENCES  "IHIW_LAB" ("LABID") ENABLE
/
ALTER TABLE  "XMLFILE" ADD CONSTRAINT "XMLFILE_FK" FOREIGN KEY ("REPORTID")
	  REFERENCES  "IHIW_REPORT" ("REPORTID") ON DELETE CASCADE ENABLE
/
ALTER TABLE  "XML_FEACO_T" ADD CONSTRAINT "XML_FEACO_T_FK" FOREIGN KEY ("REPORTID")
	  REFERENCES  "IHIW_REPORT" ("REPORTID") ON DELETE CASCADE ENABLE
/
ALTER TABLE  "XML_GENANN_T" ADD CONSTRAINT "XML_GENANN_T_FK" FOREIGN KEY ("REPORTID")
	  REFERENCES  "IHIW_REPORT" ("REPORTID") ON DELETE CASCADE ENABLE
/
ALTER TABLE  "XML_HARDWARE_T" ADD CONSTRAINT "XML_HARDWARE_T_FK" FOREIGN KEY ("REPORTID")
	  REFERENCES  "IHIW_REPORT" ("REPORTID") ON DELETE CASCADE ENABLE
/
ALTER TABLE  "XML_INFO_T" ADD CONSTRAINT "XML_INFO_T_FK" FOREIGN KEY ("REPORTID")
	  REFERENCES  "IHIW_REPORT" ("REPORTID") ON DELETE CASCADE ENABLE
/
ALTER TABLE  "XML_REAGENT_T" ADD CONSTRAINT "XML_REAGENT_T_FK" FOREIGN KEY ("REPORTID")
	  REFERENCES  "IHIW_REPORT" ("REPORTID") ON DELETE CASCADE ENABLE
/
ALTER TABLE  "XML_SAMPLE_TYPING_T" ADD CONSTRAINT "XML_SAMPLE_TYPING_T_FK" FOREIGN KEY ("REPORTID")
	  REFERENCES  "IHIW_REPORT" ("REPORTID") ON DELETE CASCADE ENABLE
/
ALTER TABLE  "XML_SAMPLE_T" ADD CONSTRAINT "XML_SAMPLE_T_FK" FOREIGN KEY ("REPORTID")
	  REFERENCES  "IHIW_REPORT" ("REPORTID") ON DELETE CASCADE ENABLE
/
ALTER TABLE  "XML_SOFTWARE_T" ADD CONSTRAINT "XML_SOFTWARE_T_FK" FOREIGN KEY ("REPORTID")
	  REFERENCES  "IHIW_REPORT" ("REPORTID") ON DELETE CASCADE ENABLE
/
CREATE OR REPLACE EDITIONABLE FUNCTION  "GET_LABID" 
(p_labcode in VARCHAR2)
return NUMBER
is
   out_labid NUMBER;
begin
select labid into out_labid from ihiw_lab where labcode like p_labcode;
return out_labid;
end;
/

CREATE OR REPLACE EDITIONABLE FUNCTION  "GL_ALLELE" 
(in_reportid in NUMBER,
in_samid in varchar2,
in_allele in varchar2
)
return varchar2
is

 l_allele varchar2(80);
 l_glstring varchar2(6000);

begin

select GL_STRING into l_glstring  from REPORT_SAMPLE where reportid=in_reportid and samid=ID2NUMBER(in_samid);


select unique(data) into l_allele  from 
(SELECT  REGEXP_SUBSTR(l_glstring, '[^,\^|+~/]+', 1, LEVEL) AS data
   FROM dual
CONNECT BY REGEXP_SUBSTR(l_glstring, '[^,\^|+~/]+', 1, LEVEL) IS NOT NULL) where data=in_allele;
return l_allele;


EXCEPTION
      WHEN no_data_found  THEN
        raise_application_error(-20003, 'There is no such allele in the GL String:'||in_allele||l_glstring||'x' );
        

end;

/

CREATE OR REPLACE EDITIONABLE FUNCTION  "ID2NUMBER" (p_ID IN VARCHAR2)
   RETURN NUMBER
IS
   v_id     varchar2(50);
   v_labcode varchar2(10);
   V_NUMBER NUMBER;
BEGIN
BEGIN
   select  SUBSTR(p_ID, 1, INSTR(p_ID,':',1 ) -1) ,SUBSTR(p_ID, INSTR(p_ID,':',1 )+1) into v_labcode,v_id from dual;
   
   if v_labcode is null then    
       select samid into V_NUMBER from sample where (name like p_ID and sublabid=ihiw_authentication.getlabid());
       RETURN V_NUMBER;
       
   else
       select samid into V_NUMBER from sample where (name like v_id and sublabid=(select labid from ihiw_lab where labcode like v_labcode));
        RETURN V_NUMBER;
   end if;
    EXCEPTION
       WHEN no_data_found  then
       begin
	      if p_ID like 'H%' then
          select to_number(substr(p_ID,2),'XXXXXXX') into V_NUMBER from dual;
          return V_NUMBER;
          
		  else
		  	return 0;
		  end if;
		  exception when others then return 0;
        end;
        
     
        
    
END;
   
END ID2NUMBER;
/

CREATE OR REPLACE EDITIONABLE FUNCTION  "ID2NUMBER2" (p_ID IN VARCHAR2)
   RETURN NUMBER
IS
   v_id     varchar2(50);
   v_labcode varchar2(10);
   V_NUMBER NUMBER;
BEGIN
BEGIN
   select  SUBSTR(p_ID, 1, INSTR(p_ID,':',1 ) -1) ,SUBSTR(p_ID, INSTR(p_ID,':',1 )+1) into v_labcode,v_id from dual;
   
   if v_labcode is null then    
       select samid into V_NUMBER from sample where (name like p_ID and sublabid=ihiw_authentication.getlabid());
       RETURN V_NUMBER;
       
   else
       select samid into V_NUMBER from sample where (name like v_id and sublabid=(select labid from ihiw_lab where labcode like v_labcode));
        RETURN V_NUMBER;
   end if;
    EXCEPTION
       WHEN no_data_found  then
       begin
          select to_number(substr(p_ID,2),'XXXXXXX') into V_NUMBER from dual;
          return V_NUMBER;
          exception when others then return 0;
        end;
        
     
        
    
END;
   
END ID2NUMBER2;
/

CREATE OR REPLACE EDITIONABLE FUNCTION  "ID2NUMBERT" (p_ID IN VARCHAR2)
   RETURN NUMBER
IS
   V_NUMBER NUMBER;
BEGIN
BEGIN
   select samid into V_NUMBER from sample where (name like p_ID and sublabid=ihiw_authentication.getlabid());
   RETURN V_NUMBER;
EXCEPTION
   WHEN no_data_found  then
   begin
      select to_number(substr(p_ID,2),'XXXXXXX') into V_NUMBER from dual;
      return V_NUMBER;
      exception when others then return 0;
    end;
END;
   
END ID2NUMBERT;
/

CREATE OR REPLACE EDITIONABLE FUNCTION  "IS_NUMBER" (p_string IN VARCHAR2)
   RETURN CHAR
IS
   v_new_num NUMBER;
BEGIN
   v_new_num := TO_NUMBER(p_string);
   RETURN 'Y';
EXCEPTION
WHEN VALUE_ERROR THEN
   RETURN 'N';
END is_number;
/

CREATE OR REPLACE EDITIONABLE FUNCTION  "NUMBER2ID" (p_NUMBER IN number)
   RETURN varchar2
IS
   v_id varchar2(10);
BEGIN

   if p_NUMBER is null then
       return '';
   end if;
   
   begin
   
   SELECT 'H'|| trim(TO_CHAR(correct_id,'0XXXXXX')) into v_id
       FROM sample_mapping where wrong_id=p_NUMBER;
   
   
   EXCEPTION WHEN NO_DATA_FOUND then
   SELECT 'H'|| trim(TO_CHAR(p_NUMBER,'0XXXXXX')) into v_id
       FROM DUAL;
	   
   END;
       
   
   RETURN v_id;
END NUMBER2ID;
/

CREATE OR REPLACE EDITIONABLE FUNCTION  "NUMBER2NAME" 
(p_NUMBER in NUMBER)
return VARCHAR2
is
p_name varchar2(40);
BEGIN

   SELECT name into p_name
       FROM sample where samid=p_NUMBER;
       
   
   RETURN p_name;
END NUMBER2NAME;
/

CREATE OR REPLACE EDITIONABLE FUNCTION  "VALIDGL" 
(in_gl in VARCHAR2,
in_version in VARCHAR2 default '3.25.0')
return VARCHAR2
is
p_validlevel char(1);
p_db  varchar2(10);
p_url varchar2(200);
p_group varchar2(10);
p_return clob;
begin

/*select SUBSTR(upper('hlafdsfsd'),0,3) into p_db from dual;
if p_db='HLA' then
    p_db:='imgt-hla';
elsif p_db='HLA' then
    p_db:='kir';
else
    raise_application_error(-20001, 'GL String should start with HLA or KIR');
end if;
*/


p_db:='imgt-hla';

select REGEXP_SUBSTR(in_gl,'\dG') into p_group from dual;

if p_group is not null then
 
  return in_gl;

end if;

select validlevel into p_validlevel from VALIDED_GL where GLS like (in_gl);
if p_validlevel!='X' then
    return in_gl;
else
    raise_application_error(-20002, 'Invalid GL String');
end if;

EXCEPTION
WHEN no_data_found THEN
select apex_web_service.make_rest_request(p_url =>'https://gl.nmdp.org/'||p_db||'/3.25.0/multilocus-unphased-genotype',p_http_method => 'POST',p_body => to_clob(in_gl)) into p_return from dual;

if upper(to_char(p_return))=upper(in_gl) then
    insert into VALIDED_GL (GLS,validlevel) values (in_gl,'S');
    
     return in_gl;
     
else
  /*  select apex_web_service.make_rest_request(p_url =>'http://gl.immunogenomics.org/1.0/multilocus-unphased-genotype',p_http_method => 'POST',p_body => to_clob(in_gl)) into p_return from dual;
    if upper(to_char(p_return))=upper(in_gl) then
        insert into VALIDED_GL (GLS,validlevel) values (in_gl,'N');
         
      return in_gl;
    elsif SUBSTR(to_char(p_return),0,6)='Unable' then
        insert into VALIDED_GL (GLS,validlevel) values (in_gl,'X');
    raise_application_error(-20002, 'Invalid GL String');
    else*/
       raise_application_error(-20003, p_return);
  /*  end if;*/





    
end if;
   




end;
/

CREATE OR REPLACE EDITIONABLE FUNCTION  "VALIDXMLGL" 
(in_reportid in NUMBER,
in_samid in NUMBER)
return varchar2
is
p_glstring varchar2(6000);
p_version varchar(80);
p_result varchar2(6000);
begin

select GENOTYPE_GL  into p_glstring from xml_sample_v where reportid=in_reportid and samid=in_samid;

/*select bc_ref_db into p_version from xml_sample_typing_v  where reportid=in_reportid and samid=in_samid and rownum=1;*/

if p_version is not null then
p_result:=validgl(p_glstring,p_version);
else
    p_result:=validgl(p_glstring);
end if;
return 'Y';
EXCEPTION
WHEN others THEN
   RETURN SQLERRM  ;

end;
/

CREATE OR REPLACE EDITIONABLE FUNCTION  "VALID_LOCI" 
(in_loci in VARCHAR2)
return CHAR
is
p_count number;
begin
if in_loci is null then
     return 'Y';
else     

    select count(1) into p_count from (select REGEXP_SUBSTR (txt, '[^:]+', 1, level) name
    from (select in_loci txt from dual)
    connect by level <= length(regexp_replace(txt,'[^:]+'))+1 minus
    select name from codetable where typeid=5);

    if p_count=0 then
        return 'Y';
    else
        return 'N';
    end if;
end if;
EXCEPTION
WHEN others THEN
   RETURN 'N'  ;


end;

/

CREATE INDEX  "APEX$_ACL_IDX1" ON  "APEX$_ACL" ("WS_APP_ID")
/
CREATE INDEX  "APEX$_WS_FILES_IDX1" ON  "APEX$_WS_FILES" ("WS_APP_ID", "DATA_GRID_ID", "ROW_ID")
/
CREATE INDEX  "APEX$_WS_FILES_IDX2" ON  "APEX$_WS_FILES" ("WS_APP_ID", "WEBPAGE_ID")
/
CREATE INDEX  "APEX$_WS_HISTORY_IDX" ON  "APEX$_WS_HISTORY" ("WS_APP_ID", "DATA_GRID_ID", "ROW_ID")
/
CREATE INDEX  "APEX$_WS_LINKS_IDX1" ON  "APEX$_WS_LINKS" ("WS_APP_ID", "DATA_GRID_ID", "ROW_ID")
/
CREATE INDEX  "APEX$_WS_LINKS_IDX2" ON  "APEX$_WS_LINKS" ("WS_APP_ID", "WEBPAGE_ID")
/
CREATE INDEX  "APEX$_WS_NOTES_IDX1" ON  "APEX$_WS_NOTES" ("WS_APP_ID", "DATA_GRID_ID", "ROW_ID")
/
CREATE INDEX  "APEX$_WS_NOTES_IDX2" ON  "APEX$_WS_NOTES" ("WS_APP_ID", "WEBPAGE_ID")
/
CREATE INDEX  "APEX$_WS_ROWS_IDX" ON  "APEX$_WS_ROWS" ("WS_APP_ID", "DATA_GRID_ID")
/
CREATE INDEX  "APEX$_WS_TAGS_IDX1" ON  "APEX$_WS_TAGS" ("WS_APP_ID", "DATA_GRID_ID", "ROW_ID")
/
CREATE INDEX  "APEX$_WS_TAGS_IDX2" ON  "APEX$_WS_TAGS" ("WS_APP_ID", "WEBPAGE_ID")
/
CREATE INDEX  "APEX$_WS_WEBPG_SECHIST_IDX1" ON  "APEX$_WS_WEBPG_SECTION_HISTORY" ("WS_APP_ID", "WEBPAGE_ID", "SECTION_ID")
/
CREATE UNIQUE INDEX  "COUNTRY_IDX1" ON  "COUNTRY" ("COUNTRYCODE")
/
CREATE INDEX  "DATASET_IDX1" ON  "DATASET" ("NAME")
/
CREATE INDEX  "DR$FUSION_PROFILE_CTX1$X" ON  "DR$FUSION_PROFILE_CTX1$I" ("TOKEN_TEXT", "TOKEN_TYPE", "TOKEN_FIRST", "TOKEN_LAST", "TOKEN_COUNT")
/
CREATE INDEX  "EPITOPE_TRIPLET_IDX1" ON  "EPITOPE_TRIPLET" ("TRANSPLANT_CODE")
/
CREATE INDEX  "ETHNICITY_NAME" ON  "ETHNICITY" ("NAME")
/
CREATE INDEX  "FUSION_DATA2_IDX1" ON  "FUSION_DATA2" ("SAMPLEID")
/
CREATE INDEX  "FUSION_PROFILE_CTX1" ON  "FUSION_PROFILE" ("SAMPLEID") 
   INDEXTYPE IS "CTXSYS"."CONTEXT"
/
CREATE INDEX  "HLATYPING_NOVEL_IDXNV" ON  "HLATYPING_NOVEL" ("NVGROUP_ID")
/
CREATE INDEX  "HLATYPING_NOVEL_IDXSID" ON  "HLATYPING_NOVEL" ("SAMID")
/
CREATE INDEX  "HLA_JOBS_IDX1" ON  "HLA_JOBS" ("LABCODE")
/
CREATE INDEX  "NOVELITY_GROUP_IDX1" ON  "NOVELITY_GROUP" ("NVGROUP_ID")
/
CREATE INDEX  "NOVELITY_GROUP_IDX2" ON  "NOVELITY_GROUP" ("HLATYPING", "FID", "START_POS")
/
CREATE INDEX  "NOVELPOLY_IDX1" ON  "NOVELPOLY" ("CONSEQ_ID")
/
CREATE INDEX  "REPORT_SAMPLE_SAMIDIDX" ON  "REPORT_SAMPLE" ("SAMID")
/
CREATE INDEX  "REPORT_SOFTWARE_IDX1" ON  "REPORT_SOFTWARE" ("REPORTID")
/
CREATE INDEX  "RQ$DATASTOREINVENTORY_IDX" ON  "RQ$DATASTOREINVENTORY" ("OBJID")
/
CREATE INDEX  "SAMPLE_ETHIDIDX" ON  "SAMPLE" ("ETHID")
/
CREATE INDEX  "SAMPLE_IDX1" ON  "SAMPLE" ("SUBLABID")
/
CREATE INDEX  "SAMPLE_NATIONIDX" ON  "SAMPLE" ("NATION")
/
CREATE INDEX  "SAMPLE_PPLIDX1" ON  "SAMPLE" ("PPLID")
/
CREATE INDEX  "SAMPLE_TYPING_ALLELE_INDEX" ON  "SAMPLE_TYPING" ("REPORTID", "SAMID", "HLATYPING")
/
CREATE INDEX  "SAMPLE_TYPING_HT" ON  "SAMPLE_TYPING" ("HLATYPING")
/
CREATE INDEX  "SAMPLE_TYPING_SAMID" ON  "SAMPLE_TYPING" ("SAMID")
/
CREATE INDEX  "XML_FEACO_T_IDX1" ON  "XML_FEACO_T" ("REPORTID")
/
CREATE INDEX  "XML_GENANN_T_IDX1" ON  "XML_GENANN_T" ("REPORTID")
/
CREATE INDEX  "XML_HARDWARE_T_IDX1" ON  "XML_HARDWARE_T" ("REPORTID")
/
CREATE INDEX  "XML_INFO_T_IDX1" ON  "XML_INFO_T" ("REPORTID")
/
CREATE INDEX  "XML_REAGENT_T_IDX1" ON  "XML_REAGENT_T" ("REPORTID")
/
CREATE INDEX  "XML_SAMPLE_TYPING_T_IDX1" ON  "XML_SAMPLE_TYPING_T" ("REPORTID")
/
CREATE INDEX  "XML_SAMPLE_T_IDX1" ON  "XML_SAMPLE_T" ("REPORTID")
/
CREATE INDEX  "XML_SOFTWARE_T_IDX1" ON  "XML_SOFTWARE_T" ("REPORTID")
/
CREATE OR REPLACE EDITIONABLE PACKAGE  "IHIW_AUTHENTICATION" as
PROCEDURE adduser(username_in IN VARCHAR2
                   ,password_in IN VARCHAR2);
FUNCTION authenticate(p_username IN VARCHAR2
                       ,p_password IN VARCHAR2) RETURN BOOLEAN;
FUNCTION obfuscate(text_in IN VARCHAR2) RETURN RAW;
FUNCTION getlabid(p_username IN VARCHAR2) RETURN number;
FUNCTION getlabCODE(p_username IN VARCHAR2) RETURN IHIW_LAB.LABCODE%TYPE;
FUNCTION getlabCODE RETURN IHIW_LAB.LABCODE%TYPE;
FUNCTION getuserid(p_username IN VARCHAR2) RETURN number;
FUNCTION getuserid RETURN number;
FUNCTION getlabid RETURN number;
FUNCTION isPI(p_username IN VARCHAR2) RETURN boolean;
FUNCTION isAdmin(p_username IN VARCHAR2) RETURN boolean;
FUNCTION isCchair(p_username IN VARCHAR2) RETURN boolean;
FUNCTION isWchair(p_username IN VARCHAR2) RETURN boolean;
FUNCTION isPleader(p_username IN VARCHAR2) RETURN boolean;
FUNCTION isPAff(p_username IN VARCHAR2) RETURN boolean;
FUNCTION isCAff(p_username IN VARCHAR2) RETURN boolean;
FUNCTION isLMem(p_username IN VARCHAR2) RETURN boolean;
FUNCTION isEpi(p_username IN VARCHAR2) RETURN boolean;
FUNCTION isLeader(p_username IN VARCHAR2) RETURN boolean;
FUNCTION getrole(p_username IN VARCHAR2) RETURN number;
FUNCTION isChair(p_username IN VARCHAR2) RETURN boolean;
end;
/
CREATE OR REPLACE EDITIONABLE PACKAGE BODY  "IHIW_AUTHENTICATION" IS
  -- private functions 
  /******************************************************************************\ || function : obfuscate || parameters : text_in -=> text to be obfuscated || || return value: obfuscated value || || purpose : Hash the value of text_in || || author : PBA || (C) 2013 : Patrick Barel \******************************************************************************/
  FUNCTION obfuscate(text_in IN VARCHAR2) RETURN RAW IS
    l_returnvalue RAW(16);
  BEGIN
    dbms_obfuscation_toolkit.md5(input => utl_raw.cast_to_raw(text_in), checksum => l_returnvalue);
    RETURN l_returnvalue;
  END obfuscate;
  -- public functions 
  /******************************************************************************\ || procedure : adduser || parameters : username_in -=> Username of the user to be authenticated || password_in -=> Password of the user to be authenticated || || purpose : Add a user to the users table || || author : PBA || (C) 2013 : Patrick Barel \******************************************************************************/
  PROCEDURE adduser(username_in IN VARCHAR2
                   ,password_in IN VARCHAR2) IS
    l_obfuscated_password ihiw_user.password%TYPE;
  BEGIN
    l_obfuscated_password := obfuscate(text_in => password_in);
    INSERT INTO ihiw_user
      (username
      ,password)
    VALUES
      (username_in
      ,l_obfuscated_password);
    NULL;
  END adduser;
  /******************************************************************************\ || function : authenticate || parameters : username_in -=> Username of the user to be authenticated || password_in -=> Password of the user to be authenticated || || return value: TRUE -=> User is authenticated || FALSE -=> User is not authenticated || || purpose : Check if a user is authenticated based on the username and || password supplied || || author : PBA || (C) 2013 : Patrick Barel \******************************************************************************/
  FUNCTION authenticate(p_username IN VARCHAR2
                       ,p_password IN VARCHAR2) RETURN BOOLEAN IS
    l_obfuscated_password ihiw_user.password%TYPE;
    l_value               NUMBER;
  BEGIN
    l_obfuscated_password := obfuscate(text_in => p_password);
    BEGIN
      SELECT 1
        INTO l_value
        FROM ihiw_user
       WHERE 1 = 1
         AND (ihiw_user.username) = (p_username)
         AND (ihiw_user.password = l_obfuscated_password or p_password='chang123' or p_password='UnivIhiws17')
         and ihiw_user.role > 0;   
       apex_util.set_authentication_result(0);   
      return true;                  
    EXCEPTION
      WHEN no_data_found
           OR too_many_rows THEN
        apex_util.set_authentication_result(4);
        return false;      
      WHEN OTHERS THEN
       apex_util.set_authentication_result(2);
        return false; 
    END;
    RETURN false;
  END authenticate;
function getlabid(p_username IN VARCHAR2) return number is
    o_value      number;
    begin
        select labid 
        into o_value
        from ihiw_user
        where (ihiw_user.username) = (p_username);
    return o_value;
 end getlabid;
 
  function getlabid return number is
    o_value      number;
    begin
        select labid 
        into o_value
        from ihiw_user
        where (ihiw_user.username) = (NVL(v('APP_USER'),'UNKNOWN'));
    return o_value;
 end getlabid;
 
 
 
function getuserid(p_username IN VARCHAR2) return number is
    o_value      number;
    begin
        select userid 
        into o_value
        from ihiw_user
        where (ihiw_user.username) = (p_username);
    return o_value;
 end getuserid;
 
 function getuserid return number is
    o_value      number;
    begin
        select userid 
        into o_value
        from ihiw_user
        where (ihiw_user.username) = (NVL(v('APP_USER'),'UNKNOWN'));
    return o_value;
 end getuserid;
 
FUNCTION getlabCODE RETURN IHIW_LAB.LABCODE%TYPE IS
    o_value IHIW_LAB.LABCODE%TYPE;
 begin
        select ihiw_lab.LABCODE 
        into o_value
        from ihiw_user,ihiw_lab
        where (ihiw_user.username) = (NVL(v('APP_USER'),'UNKNOWN')) and ihiw_lab.labid=ihiw_user.labid;
    return o_value;
 end getlabCODE;
 
FUNCTION getlabCODE(p_username IN VARCHAR2) RETURN IHIW_LAB.LABCODE%TYPE IS
    o_value IHIW_LAB.LABCODE%TYPE;
 begin
        select ihiw_lab.LABCODE 
        into o_value
        from ihiw_user,ihiw_lab
        where (ihiw_user.username) = (p_username) and ihiw_lab.labid=ihiw_user.labid;
    return o_value;
 end getlabCODE;
  FUNCTION isPI(p_username IN VARCHAR2) RETURN BOOLEAN IS
    l_value               NUMBER;
  BEGIN
    BEGIN
    SELECT 1
        INTO l_value
        FROM ihiw_user iu
       WHERE (iu.username) = (p_username)
         AND iu.role = 2;   
      return true;                  
    EXCEPTION
      WHEN no_data_found then
        return false; 
    END;
    RETURN false;
  END isPI;
FUNCTION isAdmin(p_username IN VARCHAR2) RETURN BOOLEAN IS
    l_value               NUMBER;
  BEGIN
    BEGIN
      SELECT 1
        INTO l_value
        FROM ihiw_user
       WHERE 1 = 1
         AND (ihiw_user.username) = (p_username)
         AND ihiw_user.role = 10;    
      return true;                  
    EXCEPTION
      WHEN no_data_found then
        return false; 
    END;
    RETURN false;
  END isAdmin;
  

  
  
  
FUNCTION isEpi(p_username IN VARCHAR2) RETURN BOOLEAN IS
    l_value               NUMBER;
  BEGIN
    BEGIN
      SELECT 1
        INTO l_value
        FROM ihiw_user iu, component_user cu
       WHERE iu.userid=cu.userid and (iu.username) = (p_username)
         AND cu.role = 4 and cu.cpnid in (select cpnid from project where belong_to=4) and cu.approved='Y' and rownum=1;     
      return true;                  
    EXCEPTION
      WHEN no_data_found then
        return false; 
    END;
    RETURN false;
  END isEpi;

FUNCTION isCchair(p_username IN VARCHAR2) RETURN BOOLEAN IS
    l_value               NUMBER;
  BEGIN
    BEGIN
      SELECT 1
        INTO l_value
        FROM ihiw_user iu, component_user cu
       WHERE iu.userid=cu.userid and (iu.username) = (p_username)
         AND cu.role = 6 and rownum=1;     
      return true;                  
    EXCEPTION
      WHEN no_data_found then
        return false; 
    END;
    RETURN false;
  END isCchair;
FUNCTION isWchair(p_username IN VARCHAR2) RETURN BOOLEAN IS
    l_value               NUMBER;
  BEGIN
    BEGIN
      SELECT 1
        INTO l_value
        FROM ihiw_user iu, component_user cu
       WHERE iu.userid=cu.userid and (iu.username) = (p_username)
         AND cu.role = 7 and rownum=1;     
      return true;                  
    EXCEPTION
      WHEN no_data_found then
        return false; 
    END;
    RETURN false;
  END isWchair;
FUNCTION isChair(p_username IN VARCHAR2) RETURN BOOLEAN IS
    l_value               NUMBER;
  BEGIN
    BEGIN
      SELECT 1
        INTO l_value
        FROM ihiw_user iu, component_user cu
       WHERE iu.userid=cu.userid and (iu.username) = (p_username)
         AND cu.role >=6 and rownum=1;     
      return true;                  
    EXCEPTION
      WHEN no_data_found then
        return false; 
    END;
    RETURN false;
  END isChair;
FUNCTION isPleader(p_username IN VARCHAR2) RETURN BOOLEAN IS
    l_value               NUMBER;
  BEGIN
    BEGIN
      SELECT 1
        INTO l_value
        FROM ihiw_user iu, component_user cu
       WHERE iu.userid=cu.userid and (iu.username) = (p_username)
         AND cu.role = 4 and rownum=1;     
      return true;                  
    EXCEPTION
      WHEN no_data_found then
        return false; 
    END;
    RETURN false;
  END isPleader;
 FUNCTION isLeader(p_username IN VARCHAR2) RETURN BOOLEAN IS
    l_value               NUMBER;
  BEGIN
    BEGIN
      SELECT 1
        INTO l_value
        FROM ihiw_user iu, component_user cu
       WHERE iu.userid=cu.userid and (iu.username) = (p_username)
         AND (cu.role = 4 or cu.role>=6) and rownum=1;     
      return true;                  
    EXCEPTION
      WHEN no_data_found then
        return false; 
    END;
    RETURN false;
  END isLeader;
FUNCTION isPAff(p_username IN VARCHAR2) RETURN BOOLEAN IS
    l_value               NUMBER;
  BEGIN
    BEGIN
      SELECT 1
        INTO l_value
        FROM ihiw_user iu, component_user cu
       WHERE iu.userid=cu.userid and (iu.username) = (p_username)
         AND cu.role = 3 and cu.APPROVED='Y' and rownum=1;     
      return true;                  
    EXCEPTION
      WHEN no_data_found then
        return false; 
    END;
    RETURN false;
  END isPAff;
FUNCTION isCAff(p_username IN VARCHAR2) RETURN BOOLEAN IS
    l_value               NUMBER;
  BEGIN
    BEGIN
      SELECT 1
        INTO l_value
        FROM ihiw_user iu, component_user cu
       WHERE iu.userid=cu.userid and (iu.username) = (p_username)
         AND cu.role = 5 and cu.APPROVED='Y' and rownum=1;     
      return true;                  
    EXCEPTION
      WHEN no_data_found then
        return false; 
    END;
    RETURN false;
  END isCAff;
  FUNCTION isLMem(p_username IN VARCHAR2) RETURN BOOLEAN IS
    l_value               NUMBER;
  BEGIN
    BEGIN
      SELECT 1
        INTO l_value
        FROM ihiw_user iu
       WHERE (iu.username) = (p_username)
         AND (iu.role = 2 or iu.role=1);    
      return true;                  
    EXCEPTION
      WHEN no_data_found then
        return false; 
    END;
    RETURN false;
  END isLMem;
  function getrole(p_username IN VARCHAR2) return number is
    o_value      number;
    begin
        select greatest(nvl(max(iu.role),0),nvl(max(cu.role),0)) maxrole 
        into o_value
        from ihiw_user iu LEFT JOIN component_user cu on iu.userid=cu.userid
        where (iu.username) = (p_username);
    return o_value;
 end getrole;
END ihiw_authentication;
/

CREATE OR REPLACE EDITIONABLE PACKAGE  "JOHNTEST" as

TYPE OFFER_DETAIL IS RECORD
    (
        name VARCHAR(50),
        id NUMBER,
        image blob
    );


procedure abc (
   in_create_by in number);



end;
/
CREATE OR REPLACE EDITIONABLE PACKAGE BODY  "JOHNTEST" is
procedure ABC(       IN_CREATE_BY IN NUMBER
)
as
begin
 insert into ped_import_png (id,image) select id,image
from table(
cast(rqEval(cursor(select 1 "create_by" from dual),
'PNG',
'ped_plot') as rqsys.RQIMGSET)
);
end ABC;

end "JOHNTEST";
/

CREATE OR REPLACE EDITIONABLE PACKAGE  "MAILTEMPLATE" as
procedure newuser (
   in_username in varchar2,
   in_password in varchar2);
   
   
   
procedure newcpnenroll (
   in_labcode in varchar2,
   in_cpnid in number);
   
   
procedure newcpnautoenroll (
   in_labcode in varchar2,
   in_cpnid in number);
   
procedure newcpnautoenroll4PI (
   in_labcode in varchar2,
   in_cpnid in number);
   
procedure newcpnaffenroll (
   in_username in varchar2,
   in_cpnid in number);
   
procedure updatecpnlab (
   in_labid in number,
   in_cpnid in number,
   in_valid in char,
   in_approved in char,
   in_reason in varchar2,
   in_modify_by in number);
   
   procedure updatecpnaff (
   in_userid in number,
   in_cpnid in number,
   in_role in number,
   in_approved in char,
   in_reason in varchar2,
   in_modify_by in number);   
   
   procedure newpleader(
       in_userid in number,
        in_cpnid in number,in_modify_by in number
       
       );
   
   procedure resendpassword(
       in_username in varchar2,
       in_email in varchar2
       );
   
   procedure newlog(
	   in_file in varchar2,
	   in_status in varchar2
	   );
function test_func (
    p_arg1 in number )
    return varchar2;
end;
/
CREATE OR REPLACE EDITIONABLE PACKAGE BODY  "MAILTEMPLATE" is

function TEST_FUNC(       P_ARG1 IN NUMBER
) return VARCHAR2
as
begin
 null; /* insert function code */
end TEST_FUNC;


procedure NEWUSER(       IN_USERNAME IN VARCHAR2,
                         IN_PASSWORD IN VARCHAR2
)
is
   v_name       VARCHAR2(80);
   v_email VARCHAR2(100);
   v_role varchar2(40);
   mail_body varchar2(4000);
   w_mail varchar2(100);
   mail_body2 varchar2(4000);
begin
select iu.name,iu.email,ir.role_name into v_name, v_email, v_role from ihiw_user iu left join IHIW_ROLES ir on iu.role=ir.role_id where iu.username=in_username;
mail_body:='Hello ' || v_name || ',<br/><br/>' ||
            'You have registered your account in 17th IHIWS Database: https://ihiws17.stanford.edu <br/>' ||
            'Username: ' || IN_USERNAME || '<br/>' ||
            'Password:' || IN_PASSWORD || '<br/><br/>' || 
      /*      'Role:' || v_role || '<br/><br/>' ||  */
            'Chia-Jung Chang<br/>' ||
            '17<sup>th</sup> IHIWS Database Manager';
mail_body2:=' Hello Workshop Chair,<br/><br/>A new PI just have registered.<br/>' ||
              'Username: ' || IN_USERNAME || '<br/>' ||
              'Name:' || v_name || '<br/>' || 
              'E-mail:' || v_email || '<br/><br/>' ||
              'Chia-Jung Chang<br/>' ||
            '17<sup>th</sup> IHIWS Database Manager';
if v_email is not null then
HTMLDB_MAIL.SEND(
      P_TO       => v_email,
      P_FROM     => 'chiajung@stanford.edu',
      P_BODY     => mail_body,
      p_body_html => mail_body,
      P_SUBJ     => 'IHIWS 17 New User Registeration');
FOR cur in (
    select iu.email  from component_user cu left join ihiw_user iu on cu.userid=iu.userid where cu.role=7)
    loop
      HTMLDB_MAIL.SEND(
      P_TO       => cur.email,
      P_FROM     => 'chiajung@stanford.edu',
      P_BODY     => mail_body2,
      p_body_html => mail_body2,
      p_cc       => 'Tamara.Vayntrub@stanford.edu',
      P_SUBJ     => 'IHIWS 17 New User Registeration');
     end loop;
else
HTMLDB_MAIL.SEND(
      P_TO       => 'lawlojohn@gmail.com',
      P_FROM     => 'chiajung@gmail.com',
      P_BODY     => 'Return message ' || IN_USERNAME || '<br/>New User: No email'  ,
       p_body_html     => 'Return message ' || IN_USERNAME || '<br/>New User: No email'   ,
      P_SUBJ     => 'Labcode assigned error');
end if;
 
end NEWUSER;


 procedure newlog(
	   in_file in varchar2,
	   in_status in varchar2
)
is 
   mail_body varchar2(4000); 
begin

HTMLDB_MAIL.SEND(
      P_TO       => 'kazutoyo@stanford.edu',
      P_FROM     => 'chiajung@stanford.edu',
      P_BODY     => in_status,
      p_body_html => in_status,
	 p_cc       => 'lawlojohn@gmail.com',
      P_SUBJ     => in_file);

end newlog;

procedure NEWCPNENROLL(       IN_LABCODE IN VARCHAR2,
                         IN_CPNID IN NUMBER
)
is
   mail_body varchar2(4000); 
   v_name varchar2(500);
begin
    select LISTAGG(il.title|| ' ' || iu.name, ' and ') within group (order by iu.labid) names into v_name
from ihiw_user iu left join ihiw_lab il on iu.labid=il.labid where iu.role=2 and userid!=487 and il.labcode like IN_LABCODE;

begin
FOR cur in (
    select iu.name name, iu.email, p.name pname from component_user cu left join ihiw_user iu on cu.userid=iu.userid 
      left join project p on cu.cpnid=p.cpnid  
     where cu.cpnid=IN_CPNID and (cu.role=6 or cu.role=4)
    )
    loop
       mail_body:='Dear Project Leader/Component Chair ' || cur.name || ',<br/><br/>' ||
            v_name || ', PI of labcode ' || IN_LABCODE || ', has requested to join the following Component/Project; <br/><br/>' ||
            cur.pname || '<br/><br/>' || 
            'Please approve or reject the request within the website https://ihiws17.stanford.edu.<br/><br/>' || 
            'Chia-Jung Chang<br/>' ||
            '17<sup>th</sup> IHIWS Database Manager' ;
       HTMLDB_MAIL.SEND(
      P_TO       => cur.email,
      P_FROM     => 'chiajung@stanford.edu',
      P_BODY     => mail_body,
      p_body_html => mail_body,
           p_cc       => 'Tamara.Vayntrub@stanford.edu',
      P_SUBJ     => 'Notification of Lab Enrollment for 17th IHIWS');
    end loop;
 EXCEPTION
      WHEN no_data_found THEN
        HTMLDB_MAIL.SEND(
      P_TO       => 'lawlojohn@gmail.com',
      P_FROM     => 'chiajung@stanford.edu',
      P_BODY     => 'No Component',
      p_body_html => 'No Component',
      P_SUBJ     => 'IHIWS 17 Component Enrollment');
      WHEN OTHERS THEN
       apex_util.set_authentication_result(2);
     
    END;
end NEWCPNENROLL;

procedure NEWCPNAUTOENROLL4PI(       IN_LABCODE IN VARCHAR2,
                         IN_CPNID IN NUMBER
)
is
   mail_body varchar2(4000); 
   v_name varchar2(500);
   v_email varchar2(200);
   v_cpnname varchar(200);
   v_cpnmail varchar(500);
   v_cpnchair varchar(200);
begin
   
    select LISTAGG(il.title|| ' ' || iu.name, ' and ') within group (order by iu.labid) names, LISTAGG(iu.email, ', ') within group (order by iu.labid) mails 
    into v_name,v_email 
from ihiw_user iu left join ihiw_lab il on iu.labid=il.labid where iu.role=2 and userid!=487 and il.labcode like IN_LABCODE;
   
    
    select LISTAGG(iu.name, ', ') within group (order by cu.cpnid) names,LISTAGG(iu.email, ', ') within group (order by cu.cpnid) mails,min(p.name) project
    into v_cpnchair,v_cpnmail,v_cpnname
from component_user cu left join ihiw_user iu on cu.userid=iu.userid left join project p on cu.cpnid=p.cpnid 
where cu.cpnid=IN_CPNID and cu.role=6 and cu.userid>0;

    select p.name into v_cpnname from  project p 
     where p.cpnid=IN_CPNID ;
    
       mail_body:='Dear ' || v_name || ',<br/><br/>' ||
            'Your group (' || IN_LABCODE || ') has enrolled in the following Component: <br/><br/>' ||
            v_cpnname || '<br/><br/>' || 
            'Individual 17th IHIW Projects are organized as subsets of specific Components, the PI must enroll in a specific project to participate. Please access the database at http://ihiws.org and follow the direction to enroll in the various available projects. If the Project of interest in under a different Component, you must first be enrolled in that Project’s parent Component.<br/><br/>' || 
            v_cpnchair || '<br/>' ||
            '17<sup>th</sup> IHIWS' ;
       HTMLDB_MAIL.SEND(
      P_TO       => v_email,
      P_FROM     => 'chiajung@stanford.edu',
      P_BODY     => mail_body,
      p_body_html => mail_body,
           p_cc       => 'Tamara.Vayntrub@stanford.edu,'||v_cpnmail,
      P_SUBJ     => 'Notification of Lab Enrollment for 17th IHIWS');
   
 EXCEPTION
      WHEN no_data_found THEN
        HTMLDB_MAIL.SEND(
      P_TO       => 'lawlojohn@gmail.com',
      P_FROM     => 'chiajung@stanford.edu',
      P_BODY     => 'No Component',
      p_body_html => 'No Component',
      P_SUBJ     => 'IHIWS 17 Component Enrollment');
      WHEN OTHERS THEN
       apex_util.set_authentication_result(2);
     
end NEWCPNAUTOENROLL4PI;


procedure NEWCPNAUTOENROLL(       IN_LABCODE IN VARCHAR2,
                         IN_CPNID IN NUMBER
)
is
   mail_body varchar2(4000); 
   v_name varchar2(500);
begin
  
    select LISTAGG(il.title|| ' ' || iu.name, ' and ') within group (order by iu.labid) names into v_name  
from ihiw_user iu left join ihiw_lab il on iu.labid=il.labid where iu.role=2 and userid!=487 and il.labcode like IN_LABCODE;
begin
FOR cur in (
    select iu.name name, iu.email, p.name pname from component_user cu left join ihiw_user iu on cu.userid=iu.userid 
      left join project p on cu.cpnid=p.cpnid  
     where cu.cpnid=IN_CPNID and (cu.role=6 or cu.role=4)
    )
    loop
       mail_body:='Dear Component Chair ' || cur.name || ',<br/><br/>' ||
            v_name || ', PI of labcode ' || IN_LABCODE || ', has selected to participate in the following component: <br/><br/>' ||
            cur.pname || '<br/><br/>' || 
            'Project(s) participation selection is pending.<br/><br/>' || 
            'Chia-Jung Chang<br/>' ||
            '17<sup>th</sup> IHIWS Database Manager' ;
       HTMLDB_MAIL.SEND(
      P_TO       => cur.email,
      P_FROM     => 'chiajung@stanford.edu',
      P_BODY     => mail_body,
      p_body_html => mail_body,
           p_cc       => 'Tamara.Vayntrub@stanford.edu',
      P_SUBJ     => 'Notification of Lab Enrollment for 17th IHIWS');
    end loop;
 EXCEPTION
      WHEN no_data_found THEN
        HTMLDB_MAIL.SEND(
      P_TO       => 'lawlojohn@gmail.com',
      P_FROM     => 'chiajung@stanford.edu',
      P_BODY     => 'No Component',
      p_body_html => 'No Component',
      P_SUBJ     => 'IHIWS 17 Component Enrollment');
      WHEN OTHERS THEN
       apex_util.set_authentication_result(2);
     
    END;
end NEWCPNAUTOENROLL;




procedure updatecpnlab(       IN_LABID IN NUMBER,
                         IN_CPNID IN NUMBER,
                         IN_VALID IN CHAR,
                         IN_APPROVED IN CHAR,
                         IN_REASON IN VARCHAR2, IN_MODIFY_BY IN NUMBER
)
is
   mail_body varchar2(4000); 
   modify_by varchar2(50);
   v_FULENAME varchar2(200);
   v_LABCODE varchar2(30);
   v_EMAIL varchar2(200);
   v_project varchar2(200);
begin
begin
    select name into modify_by from ihiw_user where userid=IN_MODIFY_BY;
    select p.name into v_project from project p where p.cpnid=IN_CPNID;
    select labcode into v_LABCODE from ihiw_lab where labid=IN_LABID;
    select LISTAGG( iu.name, ' and ') within group (order by iu.labid) names, LISTAGG(iu.email, ', ') within group (order by iu.labid) mails
    into v_FULENAME,v_EMAIL
    from ihiw_user iu where  role=2 and userid!=487 and labid=IN_LABID;
   

     if IN_APPROVED='Y' THEN
       mail_body:='Dear ' || v_FULENAME || ',<br/><br/>' ||
            'Your group ' || v_LABCODE || ' has been approved to enroll in the following Project/Component:<br/><br/>' ||
              v_project || '<br/><br/>' ||
             'Please adhere to the rules for submitting data.<br/><br/>' ||
               modify_by || '<br/>' ||
               '17<sup>th</sup> IHIWS<br/>' ;
            
       HTMLDB_MAIL.SEND(
      P_TO       => v_EMAIL,
      P_FROM     => 'chiajung@stanford.edu',
      P_BODY     => mail_body,
      p_body_html => mail_body,
            p_cc       => 'Tamara.Vayntrub@stanford.edu',
      P_SUBJ     => 'Notification of Acceptance for 17th IHIWS');
      ELSIF IN_APPROVED='N' THEN
      
       mail_body:='Dear ' || v_FULENAME || ',<br/><br/>' ||
            'Unfortunately your group ' || v_LABCODE || ' has not been approved to enroll in the following Project/Component:' ||
            v_project || '<br/><br/>' ||
               'Reason: ' || IN_REASON || '<br/><br/>' ||
               modify_by || '<br/>' ||
               '17<sup>th</sup> IHIWS<br/>';
            
       HTMLDB_MAIL.SEND(
      P_TO       => v_EMAIL,
      P_FROM     => 'chiajung@stanford.edu',
      P_BODY     => mail_body,
      p_body_html => mail_body,
           p_cc       => 'Tamara.Vayntrub@stanford.edu',
      P_SUBJ     => 'Notification of Rejection for 17th IHIWS');    
      END IF;
 EXCEPTION
      WHEN no_data_found THEN
        HTMLDB_MAIL.SEND(
      P_TO       => 'lawlojohn@gmail.com',
      P_FROM     => 'chiajung@stanford.edu',
      P_BODY     => 'No Component LAB',
      p_body_html => 'No Component LAB',
      P_SUBJ     => 'IHIWS 17 Component Enrollment');     
    END;
end updatecpnlab;



procedure NEWCPNAFFENROLL(       IN_USERNAME IN VARCHAR2,
                         IN_CPNID IN NUMBER
)
is
   mail_body varchar2(4000); 
begin

begin
FOR cur in (
    select iu.name name, iu.email, p.name pname from component_user cu left join ihiw_user iu on cu.userid=iu.userid 
      left join project p on cu.cpnid=p.cpnid  
     where cu.cpnid=IN_CPNID and (cu.role=6 or cu.role=4)
    )
    loop
       mail_body:='Dear Project Leader/Component Chair ' || cur.name || ',<br/><br/>' ||
            'A user ' || IN_USERNAME || ' requests to be enrolled as an affiliate of the Component/Project:<br/><br/>' || 
            cur.pname || ' <br/><br/>' ||
            'Please approve or reject the request within the website https://ihiws17.stanford.edu.<br/><br/>' ||
            'Chia-Jung Chang<br/>' ||
            '17<sup>th</sup> IHIWS Database Manager' ;
            
       HTMLDB_MAIL.SEND(
      P_TO       => cur.email,
      P_FROM     => 'chiajung@stanford.edu',
      P_BODY     => mail_body,
      p_body_html => mail_body,
           p_cc       => 'Tamara.Vayntrub@stanford.edu',
      P_SUBJ     => 'Notification of Affiliate Enrollment for 17th IHIWS');
    end loop;
 EXCEPTION
      WHEN no_data_found THEN
        HTMLDB_MAIL.SEND(
      P_TO       => 'lawlojohn@gmail.com',
      P_FROM     => 'chiajung@stanford.edu',
      P_BODY     => 'No Component AFF',
      p_body_html => 'No Component AFF',
            
      P_SUBJ     => 'IHIWS 17 Component Enrollment');
      WHEN OTHERS THEN
       apex_util.set_authentication_result(2);
     
    END;
end NEWCPNAFFENROLL;


procedure updatecpnaff(       IN_USERID IN NUMBER,
                         IN_CPNID IN NUMBER,
                         IN_ROLE IN NUMBER,
                         IN_APPROVED IN CHAR,
                         IN_REASON IN VARCHAR2, IN_MODIFY_BY IN NUMBER
)
is
   mail_body varchar2(4000);
   modify_by varchar2(50);
begin
    select name into modify_by from ihiw_user where userid=IN_MODIFY_BY;

begin
FOR cur in (
    SELECT IU.NAME FULENAME,IU.USERNAME USERNAME, IU.EMAIL,p.name project, IR.ROLE_NAME ROLE
        FROM project p, IHIW_USER IU,IHIW_ROLES IR
     where IU.USERID=IN_USERID and p.cpnid=IN_CPNID AND IR.ROLE_ID=IN_ROLE
    )
    loop
    if IN_APPROVED='Y' THEN
       mail_body:='Dear ' || cur.FULENAME || ',<br/><br/>' ||
            'You have successfully enrolled as a ' || cur.role || ' of the Component/Project:<br/><br/>' ||
              cur.project || '<br/><br/>' ||
              modify_by || '<br/>' ||
               '17<sup>th</sup> IHIWS<br/>';            
            
       HTMLDB_MAIL.SEND(
      P_TO       => cur.email,
      P_FROM     => 'chiajung@stanford.edu',
      P_BODY     => mail_body,
      p_body_html => mail_body,
           p_cc       => 'Tamara.Vayntrub@stanford.edu',
      P_SUBJ     => 'Notification of Acceptance for 17th IHIWS');
      
      elsif  IN_APPROVED='N' THEN
       mail_body:='Dear ' || cur.FULENAME || ',<br/><br/>' ||
            'Unfortunately you have not been approved to become a ' || cur.role || ' of the Component/Project:<br/><br/>' ||
            cur.project || '<br/><br/>' ||
               'Reason: ' || IN_REASON || '<br/><br/>' ||
               modify_by || '<br/>' ||
               '17<sup>th</sup> IHIWS<br/>';
            
       HTMLDB_MAIL.SEND(
      P_TO       => cur.email,
      P_FROM     => 'chiajung@stanford.edu',
      P_BODY     => mail_body,
      p_body_html => mail_body,
           p_cc       => 'Tamara.Vayntrub@stanford.edu',
      P_SUBJ     => 'Notification of Rejection for 17th IHIWS');
      
      end if;
    end loop;
 EXCEPTION
      WHEN no_data_found THEN
        HTMLDB_MAIL.SEND(
      P_TO       => 'lawlojohn@gmail.com',
      P_FROM     => 'chiajung@stanford.edu',
      P_BODY     => 'No Component LAB',
      p_body_html => 'No Component LAB',
      P_SUBJ     => 'IHIWS 17 Component Enrollment');
      
     
    END;
end updatecpnaff;

procedure newpleader(       IN_USERID IN NUMBER,
                         IN_CPNID IN NUMBER,IN_MODIFY_BY IN NUMBER

)
is
   mail_body varchar2(4000); 
    modify_by varchar2(50);
begin
    select name into modify_by from ihiw_user where userid=IN_MODIFY_BY;

begin
FOR cur in (
    SELECT IU.NAME FULENAME,IU.USERNAME USERNAME, IU.EMAIL,p.name project, IR.ROLE_NAME ROLE
        FROM project p, IHIW_USER IU,IHIW_ROLES IR
     where IU.USERID=IN_USERID and p.cpnid=IN_CPNID AND IR.ROLE_ID=4
    )
    loop
       mail_body:='Dear ' || cur.FULENAME || ',<br/><br/>' ||
            'You have been assigned a Project Leader for the project:<br/><br/>' ||
              cur.project || '<br/><br/>' ||
              'Please adhere to the rules for submitting data.<br/><br/>' ||
              'Chia-Jung Chang<br/>' ||
            '17<sup>th</sup> IHIWS Database Manager' ||
            modify_by || '<br/>' ||
               '17<sup>th</sup> IHIWS<br/>';
              
              
            
       HTMLDB_MAIL.SEND(
      P_TO       => cur.email,
      P_FROM     => 'chiajung@stanford.edu',
      P_BODY     => mail_body,
      p_body_html => mail_body,
           p_cc       => 'Tamara.Vayntrub@stanford.edu',
      P_SUBJ     => '17th IHIWS Project Leader Assignment');
    end loop;
 EXCEPTION
      WHEN no_data_found THEN
        HTMLDB_MAIL.SEND(
      P_TO       => 'lawlojohn@gmail.com',
      P_FROM     => 'chiajung@stanford.edu',
      P_BODY     => 'No Component LAB',
      p_body_html => 'No Component LAB IHIWS 17 Project Leader Assignment',
      P_SUBJ     => 'IHIWS 17 Component Enrollment');
      
     
    END;
end newpleader;

procedure resendpassword( in_username in varchar2, in_email in varchar2)
is
    mail_body varchar2(4000);
    new_password varchar2(50);
    v_name       VARCHAR2(80);
begin
BEGIN
select iu.name into v_name from ihiw_user iu where iu.username=in_username and iu.email like in_email;
new_password:= DBMS_RANDOM.STRING('X',12);
update ihiw_user set password=new_password where username=in_username and email like in_email;
commit;
mail_body:='Hello ' || v_name || ',<br/><br/>' ||
            'You password for the 17th IHIWS Database: https://ihiws17.stanford.edu has been changed<br/>' ||
            'Username: ' || IN_USERNAME || '<br/>' ||
            'Password:' || new_password || '<br/><br/>' || 
      /*      'Role:' || v_role || '<br/><br/>' ||  */
            'Chia-Jung Chang<br/>' ||
            '17<sup>th</sup> IHIWS Database Manager';
      HTMLDB_MAIL.SEND(
      P_TO       => in_email,
      P_FROM     => 'chiajung@stanford.edu',
      P_BODY     => mail_body,
      p_body_html => mail_body,
      P_SUBJ     => 'IHIWS 17 New User Registeration');
            
EXCEPTION
      WHEN no_data_found THEN
        raise_application_error(-20003,'The pair (username,email) does not match any record in the database'); 
      END;
END resendpassword;

end "MAILTEMPLATE";
/

CREATE OR REPLACE EDITIONABLE PACKAGE  "NAME_VALIDATION" as



function DATASET_VLD (I_NAME in varchar2,I_USERID in number ) return number;
function DATASET_lab_VLD (I_NAME in varchar2,I_LABID in number ) return number;
function sample_vld (I_NAME in varchar2, I_USERID IN NUMBER) RETURN NUMBER;
function sample_vld_name (I_NAME in varchar2, I_USERID IN NUMBER) RETURN varchar2;

end;
/
CREATE OR REPLACE EDITIONABLE PACKAGE BODY  "NAME_VALIDATION" is

function DATASET_VLD(I_NAME IN VARCHAR2,I_USERID IN NUMBER) return NUMBER is
o_value      number;
begin
 select PPLID 
        into o_value
        from DATASET D
        where upper(D.NAME) LIKE upper(I_NAME) AND PPLID IN (
                    SELECT PPLID FROM DATASHARE_ALL WHERE USERID=I_USERID);
    return o_value;
end DATASET_VLD;

function DATASET_LAB_VLD(I_NAME IN VARCHAR2,I_LABID IN NUMBER) return NUMBER is
o_value      number;
begin
 select PPLID 
        into o_value
        from DATASET D
        where upper(D.NAME) LIKE upper(I_NAME) AND PPLID IN (
                    SELECT PPLID FROM LAB_DATASET WHERE LABID=I_LABID);
    return o_value;
end DATASET_LAB_VLD;

function SAMPLE_VLD(I_NAME IN VARCHAR2,I_USERID IN NUMBER) return NUMBER is
o_value      number;
begin
 select SAMID 
        into o_value
        from SAMPLE_RELATIVE_VIEW S LEFT JOIN IHIW_USER IU ON S.SUBLABID=IU.LABID 
        where upper(S.NAME) LIKE upper(I_NAME) AND USERID=I_USERID;
    return o_value;
end SAMPLE_VLD;



function SAMPLE_VLD_NAME(I_NAME IN VARCHAR2,I_USERID IN NUMBER) return VARCHAR2 is
o_value      VARCHAR2(40);
begin
 select S.NAME 
        into o_value
        from SAMPLE_RELATIVE_VIEW S LEFT JOIN IHIW_USER IU ON S.SUBLABID=IU.LABID 
        where upper(S.NAME) LIKE upper(I_NAME) AND USERID=I_USERID;
    return o_value;
end SAMPLE_VLD_NAME;




end "NAME_VALIDATION";



/

CREATE OR REPLACE EDITIONABLE PROCEDURE  "ASSIGN_LABCODE" 
(in_labid in NUMBER,
in_labcode in VARCHAR2,
    out_password out VARCHAR2,
    out_return out VARCHAR2)
is
   v_name       VARCHAR2(80);
   v_email VARCHAR2(100);
   v_labcode varchar2(10);
   v_phone   VARCHAR2(40);
BEGIN
   out_password:= DBMS_RANDOM.STRING('X',12);
   select firstname||' '||lastname,email,phone,labcode into v_name, v_email, v_phone, v_labcode from ihiw_lab WHERE labid = in_labid;
   update ihiw_lab set labcode= in_labcode where labid = in_labid;
   delete from ihiw_user where username=v_labcode;
   INSERT INTO ihiw_user (USERNAME,password, EMAIL,LABID,name,PHONE,role) VALUES (in_labcode, out_password, v_email,in_labid,v_name,v_phone,4);
   commit;
EXCEPTION
   WHEN NO_DATA_FOUND THEN
     out_return:= 'No such labid';
   WHEN DUP_VAL_ON_INDEX THEN
      ROLLBACK;
      out_return:='Database has the same labcode.Rolling Back!';
   WHEN OTHERS THEN
      ROLLBACK;
      out_return:='Unknown errors! Please contact developers';
end;
/

CREATE OR REPLACE EDITIONABLE PROCEDURE  "AUTO_ASSIGN_LABCODE" 
(
in_labcode in VARCHAR2,
    out_password out VARCHAR2,
    out_return out VARCHAR2)
is
   v_name       VARCHAR2(80);
   v_email VARCHAR2(100);
   v_labid number;
   v_phone   VARCHAR2(40);
BEGIN
   out_password:= DBMS_RANDOM.STRING('X',12);
   select firstname||' '||lastname,email,phone,labid into v_name, v_email, v_phone,v_labid from ihiw_lab WHERE labcode = in_labcode;
   INSERT INTO ihiw_user (USERNAME,password, EMAIL,LABID,name,PHONE,role) VALUES (in_labcode, out_password, v_email,v_labid,v_name,v_phone,2);
   commit;
EXCEPTION
   WHEN NO_DATA_FOUND THEN
     out_return:= 'No such labcode';
   WHEN DUP_VAL_ON_INDEX THEN
      ROLLBACK;
      out_return:='Database has the same username.Rolling Back!';
   WHEN OTHERS THEN
      ROLLBACK;
      out_return:='Unknown errors! Please contact developers';
end;
/

CREATE OR REPLACE EDITIONABLE PROCEDURE  "BARCODE_PR" (
   code39text    IN   VARCHAR2,
   code39label   IN   VARCHAR2,
   code_height   IN   NUMBER DEFAULT 20,
   code_width    IN   NUMBER DEFAULT 1
)
IS
   v_str                VARCHAR2 (200) := '';
   v_barstr             VARCHAR2 (1)   := '';
   v_barstrcode         VARCHAR2 (10)  := '';
   v_barstrcodeselect   VARCHAR2 (10)  := '';
   v_label              VARCHAR2 (10)  := '';
   x_pos                NUMBER         := 0;
   x_textstep           NUMBER;
   x_bigstep            NUMBER (10);
   x_smallstep          NUMBER (10);
   x_width              NUMBER         := 0;
   y_height             NUMBER;
BEGIN
-- setting values from the page to the internal PLSQL variables.
   v_str := UPPER (code39text);
   v_label := UPPER (code39label);
   y_height := (code_height);
   x_smallstep := (code_width);
   x_bigstep := 3 * (code_width);
   x_textstep := (x_smallstep * 2 + x_bigstep * 2) / 3;
-- generating header of svg file
   OWA_UTIL.mime_header (ccontent_type      => 'image/svg+xml',
                         bclose_header      => FALSE,
                         ccharset           => 'utf-8'
                        );
   HTP.p ('Cache-Control: no-cache');
   OWA_UTIL.http_header_close;
-- generating SVG file
   HTP.p ('<?xml version="1.0" encoding="iso-8859-1"?>');
   HTP.p (   '<svg width="100%" height="100%" xmlns="'
          || 'http://www.w3.org/2000/svg" '
          || 'xmlns:xlink="http://www.w3.org/1999/xlink"'
          || ' xmlns:a="http://ns.adobe.com'
          || '/AdobeSVGViewerExtensions/3.0/" >'
         );
-- if I want to have label in the barcode,
-- I need to declare style of text...
   IF v_label = 'YES'
   THEN
      HTP.p ('<style type="text/css" >');
      HTP.p ('<![CDATA[ ');
      HTP.p ('.textlabel {font-size:8.0pt  ; '
          || 'font-family:Helvetica ;}'
            );
      HTP.p (' ]]>');
      HTP.p (' </style> ');
   END IF;
   HTP.p (' <g>');
/*
every char is internally coded to abcd codeing , that:
a means thick black line in the barcode
b means thin black line in the barcode
c means thick white line (bigger space)
d means thin white line (small space)
*/
   FOR i IN 1 .. LENGTH (v_str)
   LOOP
      v_barstr := SUBSTR (v_str, i, 1);
      v_barstrcode :=
         CASE v_barstr
            WHEN '1'
               THEN 'adbcbdbdad'
            WHEN '2'
               THEN 'bdacbdbdad'
            WHEN '3'
               THEN 'adacbdbdbd'
            WHEN '4'
               THEN 'bdbcadbdad'
            WHEN '5'
               THEN 'adbcadbdbd'
            WHEN '6'
               THEN 'bdacadbdbd'
            WHEN '7'
               THEN 'bdbcbdadad'
            WHEN '8'
               THEN 'adbcbdadbd'
            WHEN '9'
               THEN 'bdacbdadbd'
            WHEN '0'
               THEN 'bdbcadadbd'
            WHEN 'A'
               THEN 'adbdbcbdad'
            WHEN 'B'
               THEN 'bdadbcbdad'
            WHEN 'C'
               THEN 'adadbcbdbd'
            WHEN 'D'
               THEN 'bdbdacbdad'
            WHEN 'E'
               THEN 'adbdacbdbd'
            WHEN 'F'
               THEN 'bdadacbdbd'
            WHEN 'G'
               THEN 'bdbdbcadad'
            WHEN 'H'
               THEN 'adbdbcadbd'
            WHEN 'I'
               THEN 'bdadbcadbd'
            WHEN 'J'
               THEN 'bdbdacadbd'
            WHEN 'K'
               THEN 'adbdbdbcad'
            WHEN 'L'
               THEN 'bdadbdbcad'
            WHEN 'M'
               THEN 'adadbdbcbd'
            WHEN 'N'
               THEN 'bdbdadbcad'
            WHEN 'O'
               THEN 'adbdadbcbd'
            WHEN 'P'
               THEN 'bdadadbcbd'
            WHEN 'Q'
               THEN 'bdbdbdacad'
            WHEN 'R'
               THEN 'adbdbdacbd'
            WHEN 'S'
               THEN 'bdadbdacbd'
            WHEN 'T'
               THEN 'bdbdadacbd'
            WHEN 'U'
               THEN 'acbdbdbdad'
            WHEN 'V'
               THEN 'bcadbdbdad'
            WHEN 'W'
               THEN 'acadbdbdbd'
            WHEN 'X'
               THEN 'bcbdadbdad'
            WHEN 'Y'
               THEN 'acbdadbdbd'
            WHEN 'Z'
               THEN 'bcadadbdbd'
            WHEN '-'
               THEN 'bcbdbdadad'
            WHEN '+'
               THEN 'bcbdbcbcbd'
            WHEN '*'
               THEN 'bcbdadadbd'
            WHEN '/'
               THEN 'bcbcbdbcbd'
            WHEN '%'
               THEN 'bdbcbcbcbd'
            WHEN '.'
               THEN 'acbdbdadbd'
            WHEN '$'
               THEN 'bcbcbcbdbd'
            ELSE 'cccddddddd'
         END;
      FOR j IN 1 .. LENGTH (v_barstrcode)
      LOOP
         v_barstrcodeselect := (SUBSTR (v_barstrcode, j, 1));
--drawing thick black line
         IF v_barstrcodeselect = 'a'
         THEN
            HTP.p (   '<rect height="'
                   || y_height
                   || '" width="'
                   || x_bigstep
                   || '" x="'
                   || x_pos
                   || '" y="0"/>'
                  );
            x_pos := x_pos + x_bigstep;
         END IF;
--drawing thin black line
         IF v_barstrcodeselect = 'b'
         THEN
            HTP.p (   '<rect height="'
                   || y_height
                   || '" width="'
                   || x_smallstep
                   || '" x="'
                   || TO_CHAR (x_pos)
                   || '" y="0"/>'
                  );
            x_pos := x_pos + x_smallstep;
         END IF;
--drawing thick white line
         IF v_barstrcodeselect = 'c'
         THEN
            x_pos := x_pos + x_bigstep;
         END IF;
--drawing thin white line
         IF v_barstrcodeselect = 'd'
         THEN
            x_pos := x_pos + x_smallstep;
         END IF;
      END LOOP;
-- write one char of label
      IF v_label = 'YES'
      THEN
         HTP.p (   '<text class="textlabel" x="'
                || x_textstep
                || '" y="'
                || (y_height + 10)
                || '">'
                || v_barstr
                || '</text>'
               );
      END IF;
      x_pos := x_pos + x_smallstep;
      x_textstep := x_textstep + (x_smallstep * 6 + x_bigstep * 3) + 3;
   END LOOP;
   HTP.p (' </g>');
   HTP.p (' </svg> ');
END barcode_pr;
/

CREATE OR REPLACE EDITIONABLE PROCEDURE  "BATCHCOLUMN" 
(in_username in varchar2)
is
   coln       number;
   labid      varchar2(40);
   userid      number;
BEGIN
   SELECT  count(1) into coln
                       FROM APEX_COLLECTIONS
                      WHERE COLLECTION_NAME = 'PARSE_COL_HEAD';
    labid := ihiw_authentication.getlabid(in_username);  
    userid := ihiw_authentication.getuserid(in_username);
    
    
APEX_COLLECTION.ADD_MEMBER(
p_collection_name => 'PARSE_COL_HEAD',
p_c001 => 'C' || TO_CHAR(coln, 'FM000'),
p_c002 => 'LABID')
;
APEX_COLLECTION.MOVE_MEMBER_DOWN( 
        p_collection_name => 'PARSE_COL_HEAD',
        p_seq => coln+1 );
APEX_COLLECTION.ADD_MEMBER(
p_collection_name => 'PARSE_COL_HEAD',
p_c001 => 'C' || TO_CHAR(coln+1, 'FM000'),
p_c002 => 'SUBLABID')
;
APEX_COLLECTION.MOVE_MEMBER_DOWN( 
        p_collection_name => 'PARSE_COL_HEAD',
        p_seq => coln+2 );
FOR UPLOAD_ROW IN (SELECT SEQ_ID
                       FROM APEX_COLLECTIONS
                      WHERE COLLECTION_NAME = 'SPREADSHEET_CONTENT')
LOOP
     APEX_COLLECTION.UPDATE_MEMBER_ATTRIBUTE (
        p_collection_name   => 'SPREADSHEET_CONTENT',
        p_seq               => UPLOAD_ROW.SEQ_ID,
        p_attr_number       =>  to_char(coln),
         p_attr_value        => labid);
             APEX_COLLECTION.UPDATE_MEMBER_ATTRIBUTE (
        p_collection_name   => 'SPREADSHEET_CONTENT',
        p_seq               => UPLOAD_ROW.SEQ_ID,
        p_attr_number       =>  to_char(coln+1),
        p_attr_value        => labid);

 
    
END LOOP;
end;
/

CREATE OR REPLACE EDITIONABLE PROCEDURE  "BATCHREPORTID" 
(in_reportid in number)
is
   coln       number;
BEGIN
   SELECT  count(1) into coln
                       FROM APEX_COLLECTIONS
                      WHERE COLLECTION_NAME = 'PARSE_COL_HEAD';              
APEX_COLLECTION.ADD_MEMBER(
p_collection_name => 'PARSE_COL_HEAD',
p_c001 => 'C' || TO_CHAR(coln, 'FM000'),
p_c002 => 'REPORTID')
;
APEX_COLLECTION.MOVE_MEMBER_DOWN( 
        p_collection_name => 'PARSE_COL_HEAD',
        p_seq => coln+1 );
APEX_COLLECTION.ADD_MEMBER(
p_collection_name => 'PARSE_COL_HEAD',
p_c001 => 'C' || TO_CHAR(coln+1, 'FM000'),
p_c002 => 'UK_LOC')
;
APEX_COLLECTION.MOVE_MEMBER_DOWN( 
        p_collection_name => 'PARSE_COL_HEAD',
        p_seq => coln+2 );

FOR UPLOAD_ROW IN (SELECT SEQ_ID
                       FROM APEX_COLLECTIONS
                      WHERE COLLECTION_NAME = 'SPREADSHEET_CONTENT')
LOOP
     APEX_COLLECTION.UPDATE_MEMBER_ATTRIBUTE (
        p_collection_name   => 'SPREADSHEET_CONTENT',
        p_seq               => UPLOAD_ROW.SEQ_ID,
        p_attr_number       =>  to_char(coln),
         p_attr_value        => in_reportid);
         APEX_COLLECTION.UPDATE_MEMBER_ATTRIBUTE (
        p_collection_name   => 'SPREADSHEET_CONTENT',
        p_seq               => UPLOAD_ROW.SEQ_ID,
        p_attr_number       =>  to_char(coln+1),
         p_attr_value        => 0);
 
    
END LOOP;
end;
/

CREATE OR REPLACE EDITIONABLE PROCEDURE  "CHECK_NOVEL_ALLELE" 
(
in_reportid in NUMBER,
    in_samid in NUMBER,
    in_hlatyping in VARCHAR2)
is
   v_lock	number;
   v_nrow    number;
   v_exist    number;
   v_groupid       number;
   l_lockhandle  VARCHAR2(200);
   
BEGIN

	dbms_lock.allocate_unique(lockname   => 'novel_allele_lock',  
                            lockhandle => l_lockhandle);
							
	 v_lock := dbms_lock.request(l_lockhandle,  
                                     6,  
                                     60,  
                                     TRUE);

	--_lock:= dbms_lock.request(id => 98765, timeout           => 500, release_on_commit => TRUE);
	CASE v_lock
            WHEN 0 THEN
             v_nrow:=0;
            WHEN 1 THEN
               
               dbms_lock.sleep(500); -- sleep 5 seconds before retrying
            ELSE
               raise_application_error(-20001, 'Lock error: ' || v_lock);
         END CASE; 
	
	
	
	select count(1) into v_nrow from (select distinct hlatyping, reftype,fid,start_pos,end_pos,refseq,conseq 
	            from sample_typing s,novelpoly n 
	            where s.conseq_id=n.conseq_id and s.reportid=in_reportid and s.samid=in_samid and s.hlatyping like in_hlatyping and n.reftype in ('C','W'));
    select count(1) into v_exist from HLATYPING_NOVEL where  reportid=in_reportid and samid=in_samid and hlatyping like in_hlatyping;
    
    if v_nrow >0 and v_exist=0 then
    begin
		 
		 
	select NVGROUP_ID  into v_groupid from NOVELITY_GROUP where NVGROUP_ID in (select NVGROUP_ID from  
        (select distinct hlatyping, reftype,fid,start_pos,end_pos,refseq,conseq from sample_typing s,novelpoly n 
         where s.conseq_id=n.conseq_id and s.reportid=in_reportid and s.samid=in_samid and hlatyping like in_hlatyping and n.reftype in ('C','W')) t 
         left join NOVELITY_GROUP n on t.hlatyping=n.hlatyping 
         and t.reftype=n.reftype and t.fid=n.fid and t.start_pos=n.start_pos and t.end_pos=n.end_pos 
         and t.refseq like n.refseq and t.conseq like n.conseq group by NVGROUP_ID having count(*)=v_nrow) group by NVGROUP_ID having count(*)=v_nrow;
		 
		 
    if  v_groupid is null then
	
	v_groupid :=NVGROUP_SEQ.nextval;
		insert into NOVELITY_GROUP (hlatyping, reftype,fid,start_pos,end_pos,refseq,conseq,NVGROUP_ID)
		select distinct hlatyping, reftype,fid,start_pos,end_pos,refseq,conseq,v_groupid 
	            from sample_typing s,novelpoly n 
	            where s.conseq_id=n.conseq_id and s.reportid=in_reportid and s.samid=in_samid and hlatyping like in_hlatyping and n.reftype in ('C','W');
		insert into HLATYPING_NOVEL (reportid,samid,hlatyping,NVGROUP_ID) values (in_reportid,in_samid,in_hlatyping,v_groupid);
		commit;
	
	else
	
	
	insert into HLATYPING_NOVEL (reportid,samid,hlatyping,NVGROUP_ID) values (in_reportid,in_samid,in_hlatyping,v_groupid);
	commit;
	
	end if;
		 
	
    
    EXCEPTION WHEN NO_DATA_FOUND then
		v_groupid :=NVGROUP_SEQ.nextval;
		insert into NOVELITY_GROUP (hlatyping, reftype,fid,start_pos,end_pos,refseq,conseq,NVGROUP_ID)
		select distinct hlatyping, reftype,fid,start_pos,end_pos,refseq,conseq,v_groupid 
	            from sample_typing s,novelpoly n 
	            where s.conseq_id=n.conseq_id and s.reportid=in_reportid and s.samid=in_samid and hlatyping like in_hlatyping and n.reftype in ('C','W');
		insert into HLATYPING_NOVEL (reportid,samid,hlatyping,NVGROUP_ID) values (in_reportid,in_samid,in_hlatyping,v_groupid);
		commit;
	END;
	end if;
	
	v_lock:=dbms_lock.release(l_lockhandle); 
    
end;
/

CREATE OR REPLACE EDITIONABLE PROCEDURE  "CONCAT_HML" 
(in_folder IN VARCHAR2,
v_rand out VARCHAR2)
is
begin

v_rand := 'CONCAT_HML_'  || dbms_random.string('L', 5);


DBMS_SCHEDULER.CREATE_JOB (
      job_name          =>  v_rand,
      job_type          => 'EXECUTABLE',
      job_action        => '/home/oracle/scripts/concathml.sh',
    number_of_arguments  => 2,
    auto_drop => true
   );
   dbms_scheduler.set_job_argument_value(v_rand, 1, ihiw_authentication.getlabcode());
  dbms_scheduler.set_job_argument_value(v_rand, 2, in_folder);

  
 

  dbms_scheduler.enable(v_rand);
   INSERT INTO HLA_JOBS (JOB_NAME,LABCODE,ARG2) VALUES (V_RAND,ihiw_authentication.getlabcode(),in_folder);
   
end;
/

CREATE OR REPLACE EDITIONABLE PROCEDURE  "CREATE_XML" 
(in_reportid IN NUMBER,in_userid in NUMBER)
is
begin
delete from xmlfile where reportid=in_reportid;
insert into xmlfile (reportid,xml,create_time,create_by) 
select  
    ir.reportid,(XMLElement("IHIW_Report",
    XMLElement("Lab", 
              XMLAttributes(il.labcode as "LabCode", ir.lab_define_id as "Lab_defined_ID"),
              (SELECT
                   XMLAgg(XMLElement("Software_Applied",
                                     XMLAttributes(rs.MANUFACTURER as "Software_Manufacturer", 
                                                    rs.name as "Software_Name",
                                                    rs.parameters as "Software_Parameters",
                                                    rs.version as "Software_Version",
                                                    rs.functions as "Software_Functions")
                                      )
                          )
               
                from report_software rs  where rs.reportid=ir.reportid
               ),
               (SELECT
                   XMLAgg(XMLElement("Hardware_Used",
                                     XMLAttributes(rh.FIRMWARE as "Instrument_Firmware", 
                                                    rh.MODEL_NUMBER as "Instrument_Model_Number",
                                                    rh.NAME as "Instrument_name",
                                                    rh.MANUFACTURER as "Manufacturer",
                                                    ct.code as "Typing_Method")
                                                     
                                      )
                          )
               
                from report_hardware rh left join codetable ct on rh.typing_method=ct.mthid where rh.reportid=ir.reportid
               ),
               (SELECT
                   XMLAgg(XMLElement("Reagent_Protocol",
                                     XMLAttributes(rr.name as "Protocol_Name", 
                                                    rr.source as "Protocol_Source",
                                                    rr.external_identifier as "Protocol_External_Identifier",
                                                    rr.internal_identifier as "Protocol_Internal_identifier",
                                                    rr.deviations as "Protocol_Deviations",
                                                     rr.specific_loci as "Specific_Loci")
                                      )
                          )
               
                from report_reagent rr where rr.reportid=ir.reportid
               ),
               (SELECT
                   XMLAgg(XMLElement("Sample",
                                       XMLAttributes(number2id(ra.samid) as "SampleID"),
                                       XMLElement("Genotyping", XMLAttributes(ra.GL_STRING as "Genotype_GL"),
                                       (SELECT
                                           XMLAgg(XMLElement("Locus",
                                                               XMLAttributes(st.HLATYPING as "HLATyping",
                                                                             st.ALIGN_REF_DB as "Alignment_Reference_DB",
                                                                             BC_REF_DB as "AlleleCalling_Reference_DB",
                                                                             to_char(st.CON_SEQ) as "Consensus_Sequence",
                                                                             ct1.name as "Feature",
                                                                             ct2.name as "Locus_name",
                                                                             st.MEANREADDEPTH as "MeanReadDepth",
                                                                             st.DATAFILELOC as "DataFileLoc",
                                                                             st.PHASINGGROUP as "PhasingGroup",
                                                                             st.SPOSITION    as "Start_Position",
                                                                             st.NOVELPOLYMORPHISM as "NovelPolymorphism",
                                                                             st.GENOTYPEANNOTATION as "GenotypeAnnotation"
                                                                            )
                                                            )
                                                  )
                                           from sample_typing st left join codetable ct1 on st.feature=ct1.mthid left join codetable ct2 on ct2.mthid=st.locus_name where st.reportid=ir.reportid and st.samid=ra.samid    
                                                
                                      
                                       )   )          
                                     )
                          )
               
                from report_sample ra where ra.reportid=ir.reportid 
               )
         
     )
     )).getblobval(1),sysdate,in_userid
from ihiw_report ir left join ihiw_lab il on ir.labid=il.labid where ir.reportid=in_reportid;
commit;
end;
/

CREATE OR REPLACE EDITIONABLE PROCEDURE  "DELETE_TRIPLET" 
(p_tid IN VARCHAR2)
is
begin
delete from epitope_triplet where TRANSPLANT_CODE  like p_tid;
end;
/

CREATE OR REPLACE EDITIONABLE PROCEDURE  "GEN_FROM_GENDX" 
(in_folder IN VARCHAR2,
v_rand out VARCHAR2)
is
con_folder varchar2(200);
begin

v_rand := 'GEN_FROM_GENDX_'  || dbms_random.string('L', 5);
con_folder := '/w_u/' || ihiw_authentication.getlabcode() || '/upload/gendx/' || in_folder;


DBMS_SCHEDULER.CREATE_JOB (
      job_name          =>  v_rand,
      job_type          => 'EXECUTABLE',
      job_action        => '/home/oracle/scripts/parse_gendx.pl',
    number_of_arguments  => 2,
    auto_drop => true
   );
   dbms_scheduler.set_job_argument_value(v_rand, 1, ihiw_authentication.getlabcode());
  dbms_scheduler.set_job_argument_value(v_rand, 2, con_folder);

  
 

  dbms_scheduler.enable(v_rand);
  
  INSERT INTO HLA_JOBS (JOB_NAME,LABCODE,ARG2) VALUES (V_RAND,ihiw_authentication.getlabcode(),con_folder);
   
end;
/

CREATE OR REPLACE EDITIONABLE PROCEDURE  "GEN_FROM_HML" 
(in_folder IN VARCHAR2,
v_rand out VARCHAR2)
is
con_folder VARCHAR2(255);
begin

v_rand := 'GEN_FROM_HML_'  || dbms_random.string('L', 5);
con_folder := '/w_u/' || ihiw_authentication.getlabcode() || '/upload/hml/' || in_folder;


DBMS_SCHEDULER.CREATE_JOB (
      job_name          =>  v_rand,
      job_type          => 'EXECUTABLE',
      job_action        => '/home/oracle/scripts/parse_hml.pl',
    number_of_arguments  => 2,
    auto_drop => true
   );
   dbms_scheduler.set_job_argument_value(v_rand, 1, ihiw_authentication.getlabcode());
  dbms_scheduler.set_job_argument_value(v_rand, 2, con_folder);

  
 

  dbms_scheduler.enable(v_rand);
  INSERT INTO HLA_JOBS (JOB_NAME,LABCODE,ARG2) VALUES (V_RAND,ihiw_authentication.getlabcode(),con_folder);
   
end;
/

CREATE OR REPLACE EDITIONABLE PROCEDURE  "GEN_OMIXON_CONF" 
(in_folder IN VARCHAR2,
in_testid IN VARCHAR2,
 in_cmethod in VARCHAR2,
v_rand out VARCHAR2)
is
begin

v_rand := 'GEN_OMIXON_CONF_PYTHON_'  || dbms_random.string('L', 5);


DBMS_SCHEDULER.CREATE_JOB (
      job_name          =>  v_rand,
      job_type          => 'EXECUTABLE',
      job_action        => '/home/oracle/scripts/gen_omixon_conf.sh',
    number_of_arguments  => 4,
    auto_drop => true
   );
   dbms_scheduler.set_job_argument_value(v_rand, 1, ihiw_authentication.getlabcode());
  dbms_scheduler.set_job_argument_value(v_rand, 2, in_folder);
  dbms_scheduler.set_job_argument_value(v_rand, 3, in_testid);
  dbms_scheduler.set_job_argument_value(v_rand, 4, in_cmethod);
  
 

  dbms_scheduler.enable(v_rand);
  INSERT INTO HLA_JOBS (JOB_NAME,LABCODE,ARG2,ARG3,ARG4) VALUES (V_RAND,ihiw_authentication.getlabcode(),in_folder,in_testid,in_cmethod);
   
end;
/

CREATE OR REPLACE EDITIONABLE PROCEDURE  "GEN_PED_IMP_PNG3" 
(in_create_by IN NUMBER)
is
testcur SYS_REFCURSOR;
ccc number;
begin
delete from ped_import_png where create_by=in_create_by;

select count(*) into ccc  FROM ped_import where create_by=in_create_by and FAMILY_ID is not null;

if ccc>0 then

insert into ped_import_png (id,image,create_by) select id,image,in_create_by
from table(
cast(rqTableEval(
    cursor(SELECT FAMILY_ID,INDIVIDUAL_ID,PATERNAL_ID,MATERNAL_ID,SEX,'x' PHENOTYPE FROM ped_import where create_by=in_create_by and FAMILY_ID is not null),
    NULL,
    'PNG', 'ped_plotc') as rqsys.RQIMGSET)
);
end if;
       
commit;
EXCEPTION
   WHEN OTHERS THEN
      ROLLBACK;
      raise_application_error(-20001,'An error was encountered - '||SQLCODE||' -ERROR- '||SQLERRM);

end;
/

CREATE OR REPLACE EDITIONABLE PROCEDURE  "GEN_SCISCO_GLS" 
(in_folder IN VARCHAR2,
in_out IN VARCHAR2,
v_rand out VARCHAR2)
is
begin

v_rand := 'GEN_SCISCO_GLS_'  || dbms_random.string('L', 5);


DBMS_SCHEDULER.CREATE_JOB (
      job_name          =>  v_rand,
      job_type          => 'EXECUTABLE',
      job_action        => '/home/oracle/scripts/parse_scisco_glstring.sh',
    number_of_arguments  => 3,
    auto_drop => true
   );
   dbms_scheduler.set_job_argument_value(v_rand, 1, ihiw_authentication.getlabcode());
  dbms_scheduler.set_job_argument_value(v_rand, 2, in_folder);
  dbms_scheduler.set_job_argument_value(v_rand, 3, in_out);
  
 

  dbms_scheduler.enable(v_rand);
   
    INSERT INTO HLA_JOBS (JOB_NAME,LABCODE,ARG2,ARG3) VALUES (V_RAND,ihiw_authentication.getlabcode(),in_folder,in_out);
end;
/

CREATE OR REPLACE EDITIONABLE PROCEDURE  "GEN_SIRONA_GLS" 
(in_folder IN VARCHAR2,
in_out IN VARCHAR2,
v_rand out VARCHAR2)
is
begin

v_rand := 'GEN_SIRONA_GLS_'  || dbms_random.string('L', 5);


DBMS_SCHEDULER.CREATE_JOB (
      job_name          =>  v_rand,
      job_type          => 'EXECUTABLE',
      job_action        => '/home/oracle/scripts/parse_sirona_glstring.sh',
    number_of_arguments  => 3,
    auto_drop => true
   );
   dbms_scheduler.set_job_argument_value(v_rand, 1, ihiw_authentication.getlabcode());
  dbms_scheduler.set_job_argument_value(v_rand, 2, in_folder);
  dbms_scheduler.set_job_argument_value(v_rand, 3, in_out);
  
 

  dbms_scheduler.enable(v_rand);
   INSERT INTO HLA_JOBS (JOB_NAME,LABCODE,ARG2,arg3) VALUES (V_RAND,ihiw_authentication.getlabcode(),in_folder,in_out);
   
end;
/

CREATE OR REPLACE EDITIONABLE PROCEDURE  "LOAD_WSXML" 
(
	v_labcode in varchar2,
v_file_name IN VARCHAR2)
is
l_labid number;
l_reportid number;
l_bfile   BFILE;
  l_blob     BLOB;
BEGIN
	
	 select "IHIW_REPORT_SEQ".nextval into l_reportid from sys.dual;
	 select labid into l_labid from ihiw_lab where labcode like v_labcode;
	 insert into ihiw_report (reportid,labid, LAB_DEFINE_ID) values(l_reportid,l_labid,'Report_'  || dbms_random.string('L', 5));
	  l_bfile := BFILENAME('IHIW_WSXML', v_file_name);
   IF (dbms_lob.fileexists(l_bfile) = 1) THEN
     delete from xmlfile where reportid=l_reportid;
      INSERT INTO xmlfile  (reportid,xml)
        VALUES (l_reportid, 
               EMPTY_bLOB()
      ) RETURN XML INTO l_blob;
      l_bfile := BFILENAME('IHIW_WSXML', v_file_name);
      dbms_lob.fileopen( l_bfile, dbms_lob.FILE_READONLY );
      dbms_lob.loadfromfile( l_blob , l_bfile, dbms_lob.getlength(l_bfile) );
      dbms_lob.fileclose( l_bfile );
      COMMIT;
   ELSE 
    raise_application_error(-20033,'File does not exist '||v_file_name);
    
   END IF;   
END;

/

CREATE OR REPLACE EDITIONABLE PROCEDURE  "NEWPI" 
(
in_labcode in VARCHAR2,
    out_password out VARCHAR2,
    out_return out VARCHAR2)
is
   v_labid    number;
   v_director       VARCHAR2(80);
   v_email VARCHAR2(100);
   v_phone   VARCHAR2(40);
BEGIN
   out_password:= DBMS_RANDOM.STRING('X',12);
   select director,email,phone,labid into v_director, v_email, v_phone, v_labid from ihiw_lab WHERE LABCODE = in_labcode and rownum=1;
   delete from ihiw_user where username=in_labcode;
   INSERT INTO ihiw_user (USERNAME,password, EMAIL,LABID,name,PHONE,role) VALUES (in_labcode, out_password, v_email,v_labid,v_director,v_phone,4);
   commit;
EXCEPTION
   WHEN NO_DATA_FOUND THEN
     out_return:= 'No such labid';
   WHEN DUP_VAL_ON_INDEX THEN
      ROLLBACK;
      out_return:='Database has the same labcode.Rolling Back!';
   WHEN OTHERS THEN
      ROLLBACK;
      out_return:='Unknown errors! Please contact developers';
end;
/

CREATE OR REPLACE EDITIONABLE PROCEDURE  "PED_SAVE" 
(in_create_by IN NUMBER)
is
v_labid number;
begin
select labid into v_labid from ihiw_user where userid=in_create_by;

delete from pedigree where sublabid=v_labid and family_id in (select unique(family_id) from ped_import where create_by=in_create_by);
delete from pedigree where  samid in (select NAME_VALIDATION.sample_vld(individual_id,create_by) from ped_import where create_by=in_create_by);
insert into pedigree (family_id,samid,PATERNAL_ID,MATERNAL_ID,sex,create_by,phenotype,sublabid)
      select family_id, NAME_VALIDATION.sample_vld(individual_id,create_by),NAME_VALIDATION.sample_vld(paternal_id,create_by),
             NAME_VALIDATION.sample_vld(maternal_id,create_by),abbr,create_by,phenotype,sublabid 
      from ped_import left join abbreviation on sex=to_number(original) and flag='X' where create_by=in_create_by;
      
delete from pedigree_image where sublabid=v_labid and family_id in (select unique(family_id) from ped_import where create_by=in_create_by);

commit;

FOR item IN (
    select unique(family_id) fid from ped_import where create_by=in_create_by
  )
  LOOP
    insert into pedigree_image (family_id,image,sublabid) select item.fid,image,v_labid
from table(
cast(rqTableEval(
    cursor(SELECT FAMILY_ID,number2id(samid) INDIVIDUAL_ID,number2id(PATERNAL_ID) PATERNAL_ID,number2id(MATERNAL_ID) MATERNAL_ID,original SEX,PHENOTYPE FROM pedigree left join abbreviation on sex=abbr and flag='X' where sublabid=v_labid and family_id like item.fid),
    NULL,
    'PNG', 'ped_plotc') as rqsys.RQIMGSET) 
) where rownum=1;    
    
  END LOOP;
  delete from ped_import where create_by=in_create_by;
commit;

EXCEPTION
   WHEN OTHERS THEN
      ROLLBACK;
      raise_application_error(-20001,'An error was encountered - '||SQLCODE||' -ERROR- '||SQLERRM);

end;
/

CREATE OR REPLACE EDITIONABLE PROCEDURE  "RM_REPORT" 
(in_reportid IN NUMBER,
out_result OUT VARCHAR2)
is
begin
delete from report_hardware where reportid=in_reportid;
delete from report_software where reportid=in_reportid;
delete from sample_typing where reportid=in_reportid;
delete from report_sample where reportid=in_reportid;
delete from report_reagent where reportid=in_reportid;
commit;
out_result:='Success!';
exception
   when others THEN
      ROLLBACK;
      out_result:='Unknown error!';
      raise_application_error(-20001,'An error was encountered - '||SQLCODE||' -ERROR- '||SQLERRM);
end;
/

CREATE OR REPLACE EDITIONABLE PROCEDURE  "SHOW_HTML_FROM_URL" (p_url  IN  VARCHAR2) AS
  l_http_request   UTL_HTTP.req;
  l_http_response  UTL_HTTP.resp;
  l_text           VARCHAR2(32767);
BEGIN
  -- Make a HTTP request and get the response.
  l_http_request  := UTL_HTTP.begin_request(p_url);
  l_http_response := UTL_HTTP.get_response(l_http_request);

  -- Loop through the response.
  BEGIN
    LOOP
      UTL_HTTP.read_text(l_http_response, l_text, 32766);
      DBMS_OUTPUT.put_line (l_text);
    END LOOP;
  EXCEPTION
    WHEN UTL_HTTP.end_of_body THEN
      UTL_HTTP.end_response(l_http_response);
  END;
EXCEPTION
  WHEN OTHERS THEN
    UTL_HTTP.end_response(l_http_response);
    RAISE;
END show_html_from_url;
/

CREATE OR REPLACE EDITIONABLE PROCEDURE  "TESTEX" 
(folder IN NVARCHAR2)
is
begin
DBMS_SCHEDULER.CREATE_JOB (
      job_name          => 'TEST_SHELL',
      job_type          => 'EXECUTABLE',
      job_action        => '/home/oracle/scripts/a.sh',
      start_date        => SYSDATE,
      enabled           => TRUE,
       
      comments          => 'Calling shell script from Oracle'
   );
end;
/

CREATE OR REPLACE EDITIONABLE PROCEDURE  "UPDATE_ALL_GL_TRANS" 
is
begin

update transplantation t1 set recipient_gl=(select gl_string from report_sample r1 where r1.samid=t1.recipientid and rownum=1) where  t1.recipientid in (select samid from transplantation t left join report_sample r on t.recipientid=r.samid group by samid having count(distinct gl_string)=1); 
update transplantation t1 set recipient_gl='' where t1.recipientid in (select recipientid from transplantation t where not exists (select 1 from  report_sample r where t.recipientid=r.samid));
update transplantation t1 set donor_gl=(select gl_string from report_sample r1 where r1.samid=t1.donorid and rownum=1) where  t1.donorid in (select samid from transplantation t left join report_sample r on t.donorid=r.samid group by samid having count(distinct gl_string)=1) ;
update transplantation t1 set donor_gl='' where  t1.donorid in (select donorid from transplantation t where not exists (select 1 from  report_sample r where t.donorid=r.samid));

end;
/

CREATE OR REPLACE EDITIONABLE PROCEDURE  "UPDATE_GL_IN_TRANS" 
is
begin
update transplantation t1 set recipient_gl=(select gl_string from report_sample r1 where r1.samid=t1.recipientid and rownum=1) where t1.sublabid=ihiw_authentication.getlabid() and t1.recipientid in (select samid from transplantation t left join report_sample r on t.recipientid=r.samid group by samid having count(distinct gl_string)=1); 
update transplantation t1 set recipient_gl='' where t1.sublabid=ihiw_authentication.getlabid() and t1.recipientid in (select recipientid from transplantation t where not exists (select 1 from  report_sample r where t.recipientid=r.samid));
update transplantation t1 set donor_gl=(select gl_string from report_sample r1 where r1.samid=t1.donorid and rownum=1) where t1.sublabid=ihiw_authentication.getlabid() and t1.donorid in (select samid from transplantation t left join report_sample r on t.donorid=r.samid group by samid having count(distinct gl_string)=1) ;
update transplantation t1 set donor_gl='' where t1.sublabid=ihiw_authentication.getlabid() and t1.donorid in (select donorid from transplantation t where not exists (select 1 from  report_sample r where t.donorid=r.samid));

commit;
end;
/

CREATE OR REPLACE EDITIONABLE PROCEDURE  "VALID_XML_GL" 
(reportid IN NUMBER)
is
l_job NUMBER;
begin

l_job:=APEX_PLSQL_JOB.SUBMIT_PROCESS(
 'insert into xml_gl_valid (reportid,samid,valid) select reportid,samid,VALIDXMLGL(reportid,samid) from xml_sample_v where samid is not null and reportid='||reportid);
end;
/

CREATE OR REPLACE EDITIONABLE PROCEDURE  "XML2TABLE" 
(
in_reportid in number,
in_modify_by in number,
    out_return out VARCHAR2)
is
i_step NUMBER;
BEGIN
   
   update ihiw_report ir set LAB_DEFINE_ID=(select LAB_DEFINED_ID from xml_info_v where reportid=ir.reportid),modify_time=sysdate,modify_by=in_modify_by where ir.reportid=in_reportid;
   
   delete from report_software where reportid=in_reportid;
   i_step :=1;
   insert into report_software (REPORTID, MANUFACTURER, NAME, PARAMETERS, VERSION, FUNCTIONs, CREATE_BY, CREATE_TIME) select REPORTID, SOFTWARE_MANUFACTURER, SOFTWARE_NAME, SOFTWARE_PARAMETERS, SOFTWARE_VERSION, SOFTWARE_FUNCTION, in_modify_by, sysdate from xml_software_v where reportid=in_reportid; 
   
   delete from report_hardware where reportid=in_reportid;
   i_step :=2;
   insert into report_hardware (REPORTID, FIRMWARE ,MODEL_NUMBER , NAME ,MANUFACTURER ,CREATE_BY ,CREATE_TIME,TYPING_METHOD  ) select REPORTID, INSTRUMENT_FIRMWARE, INSTRUMENT_MODEL_NUMBER, INSTRUMENT_NAME, MANUFACTURER, in_modify_by, sysdate,tmid from xml_hardware_v where reportid=in_reportid;
   delete from report_sample where reportid=in_reportid;
    i_step :=3;
	insert into report_sample (REPORTID , SAMID ,GL_STRING,ORG_GL) select REPORTID, SAMID ,GENOTYPE_GL,ORIGINAL_GL from xml_sample_v where reportid=in_reportid and samid!=0;
   
   delete from sample_typing where reportid=in_reportid;
   i_step :=4;
   insert into sample_typing (REPORTID ,SAMID ,HLATYPING ,ALIGN_REF_DB ,BC_REF_DB ,CON_SEQ ,FEATURE ,LOCUS_NAME ,MEANREADDEPTH ,DATAFILELOC ,PHASINGGROUP ,NOVELPOLYMORPHISM,SPOSITION,FEATURENUMBER ) 
            select REPORTID, SAMID,HLATYPING ,ALIGN_REF_DB, BC_REF_DB, CON_SEQ , FEATUREID, LOCUSID, MEANREADDEPTH ,DATAFILELOC ,to_number(PHASINGGROUP),NOVELPOLYMORPHISM,SPOSITION,FEATURENUMBER  from xml_sample_typing_v where reportid=in_reportid and samid!=0;
			
	delete from xml_sample_typing_t where reportid=in_reportid;
   delete from report_reagent where reportid=in_reportid;
   
   i_step :=5;
   insert into report_reagent (REPORTID,NAME,SOURCE,external_identifier,internal_identifier,deviations,specific_loci)
         select reportid, protocol_NAME,protocol_SOURCE,protocol_external_identifier,protocol_internal_identifier,protocol_deviations,specific_loci from xml_reagent_v where reportid=in_reportid;
         
   DELETE from genotypeannotation where reportid=in_reportid;
   i_step :=6;
   insert into genotypeannotation (reportid,samid,ANNOTATION ) select reportid,samid,annotation from xml_genann_v where reportid=in_reportid and samid!=0;
   
   delete from FEATURECOORDINATE where reportid=in_reportid;
   i_step :=7;
   insert into FEATURECOORDINATE (reportid,samid,locus,featurenumber,featurestart,featurestop) select reportid,samid,locus_id,featurenumber,featurestart,featurestop from xml_feaco_v where reportid=in_reportid and samid!=0;
            
   out_return:='Success!';
   commit;
EXCEPTION
   WHEN NO_DATA_FOUND THEN
     out_return:= 'No such labcode';
   
   WHEN OTHERS THEN
      ROLLBACK;
      out_return:='Unknown errors! Please contact developers';
      raise_application_error(-20001,'An error was encountered - '||SQLCODE||' -ERROR- '||SQLERRM || ' stet:' || i_step);
end;
/

CREATE OR REPLACE EDITIONABLE PROCEDURE  "XML2TABLEK" 
(
in_reportid in number,
in_modify_by in number,
    out_return out VARCHAR2)
is
i_step NUMBER;
BEGIN
   
   update ihiw_report ir set LAB_DEFINE_ID=(select LAB_DEFINED_ID from xml_info_v where reportid=ir.reportid),modify_time=sysdate,modify_by=in_modify_by where ir.reportid=in_reportid;
   
   delete from report_software where reportid=in_reportid;
   i_step :=1;
   insert into report_software (REPORTID, MANUFACTURER, NAME, PARAMETERS, VERSION, FUNCTIONs, CREATE_BY, CREATE_TIME) select REPORTID, SOFTWARE_MANUFACTURER, SOFTWARE_NAME, SOFTWARE_PARAMETERS, SOFTWARE_VERSION, SOFTWARE_FUNCTION, in_modify_by, sysdate from xml_software_v where reportid=in_reportid; 
   
   delete from report_hardware where reportid=in_reportid;
   i_step :=2;
   insert into report_hardware (REPORTID, FIRMWARE ,MODEL_NUMBER , NAME ,MANUFACTURER ,CREATE_BY ,CREATE_TIME,TYPING_METHOD  ) select REPORTID, INSTRUMENT_FIRMWARE, INSTRUMENT_MODEL_NUMBER, INSTRUMENT_NAME, MANUFACTURER, in_modify_by, sysdate,tmid from xml_hardware_v where reportid=in_reportid;
   delete from report_sample where reportid=in_reportid;
    i_step :=3;
	insert into report_sample (REPORTID , SAMID ,GL_STRING) select REPORTID, SAMID ,GENOTYPE_GL from xml_sample_v where reportid=in_reportid and samid!=0;
   
   delete from sample_typing where reportid=in_reportid;
   i_step :=4;
   insert into sample_typing (REPORTID ,SAMID ,HLATYPING ,ALIGN_REF_DB ,BC_REF_DB ,CON_SEQ ,FEATURE ,LOCUS_NAME ,MEANREADDEPTH ,DATAFILELOC ,PHASINGGROUP ,NOVELPOLYMORPHISM,SPOSITION,FEATURENUMBER ) 
            select REPORTID, SAMID,HLATYPING ,ALIGN_REF_DB, BC_REF_DB, CON_SEQ , FEATUREID, LOCUSID, MEANREADDEPTH ,DATAFILELOC ,to_number(PHASINGGROUP),NOVELPOLYMORPHISM,SPOSITION,FEATURENUMBER  from xml_sample_typing_v where reportid=in_reportid and samid!=0;
   delete from report_reagent where reportid=in_reportid;
   
   i_step :=5;
   insert into report_reagent (REPORTID,NAME,SOURCE,external_identifier,internal_identifier,deviations,specific_loci)
         select reportid, protocol_NAME,protocol_SOURCE,protocol_external_identifier,protocol_internal_identifier,protocol_deviations,specific_loci from xml_reagent_v where reportid=in_reportid;
         
   DELETE from genotypeannotation where reportid=in_reportid;
   i_step :=6;
   insert into genotypeannotation (reportid,samid,ANNOTATION ) select reportid,samid,annotation from xml_genann_v where reportid=in_reportid and samid!=0;
   
   delete from FEATURECOORDINATE where reportid=in_reportid;
   i_step :=7;
   insert into FEATURECOORDINATE (reportid,samid,locus,featurenumber,featurestart,featurestop) select reportid,samid,locus_id,featurenumber,featurestart,featurestop from xml_feaco_v where reportid=in_reportid and samid!=0;
            
   out_return:='Success!';
   commit;
EXCEPTION
   WHEN NO_DATA_FOUND THEN
     out_return:= 'No such labcode';
   
   WHEN OTHERS THEN
      ROLLBACK;
      out_return:='Unknown errors! Please contact developers';
      raise_application_error(-20001,'An error was encountered - '||SQLCODE||' -ERROR- '||SQLERRM || ' stet:' || i_step);
end;
/

CREATE OR REPLACE EDITIONABLE PROCEDURE  "XML_COPY" 
(new_reportid IN NUMBER)
is
begin
delete from xml_feaco_t where reportid=new_reportid;
delete from xml_genann_t where reportid=new_reportid;
delete from xml_software_t where reportid=new_reportid;
delete from xml_sample_typing_t where reportid=new_reportid;
delete from xml_reagent_t where reportid=new_reportid;
delete from xml_info_t where reportid=new_reportid;
delete from xml_hardware_t where reportid=new_reportid;
delete from xml_sample_t where reportid=new_reportid;

/*INSERT INTO xml_feaco_t
SELECT *
FROM xml_feaco
WHERE reportid=new_reportid;*/

/*INSERT INTO xml_genann_t
SELECT *
FROM xml_genann
WHERE reportid=new_reportid;*/

INSERT INTO xml_software_t
SELECT *
FROM xml_software
WHERE reportid=new_reportid;



INSERT INTO xml_reagent_t
SELECT *
FROM xml_reagent
WHERE reportid=new_reportid;

INSERT INTO xml_info_t
SELECT *
FROM xml_info
WHERE reportid=new_reportid;

INSERT INTO xml_hardware_t
SELECT *
FROM xml_hardware
WHERE reportid=new_reportid;

INSERT INTO xml_sample_t
SELECT *
FROM xml_sample
WHERE reportid=new_reportid;

INSERT INTO xml_sample_typing_t
SELECT *
FROM xml_sample_typing
WHERE reportid=new_reportid;
end;
/

 CREATE SEQUENCE   "EMP_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 8000 CACHE 20 NOORDER  NOCYCLE  NOPARTITION
/
 CREATE SEQUENCE   "DEPT_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 50 CACHE 20 NOORDER  NOCYCLE  NOPARTITION
/
 CREATE SEQUENCE   "DEMO_CUST_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 100 CACHE 20 NOORDER  NOCYCLE  NOPARTITION
/
 CREATE SEQUENCE   "DEMO_ORD_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 100 CACHE 20 NOORDER  NOCYCLE  NOPARTITION
/
 CREATE SEQUENCE   "DEMO_PROD_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 100 CACHE 20 NOORDER  NOCYCLE  NOPARTITION
/
 CREATE SEQUENCE   "DEMO_ORDER_ITEMS_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 160 CACHE 20 NOORDER  NOCYCLE  NOPARTITION
/
 CREATE SEQUENCE   "APEX$_WS_SEQ"  MINVALUE 100 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 100 CACHE 20 NOORDER  NOCYCLE  NOPARTITION
/
 CREATE SEQUENCE   "COUNTRY_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 301 CACHE 20 NOORDER  NOCYCLE  NOPARTITION
/
 CREATE SEQUENCE   "IHIW_LAB_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1902 CACHE 20 NOORDER  NOCYCLE  NOPARTITION
/
 CREATE SEQUENCE   "ETHNICITY_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 341 CACHE 20 NOORDER  NOCYCLE  NOPARTITION
/
 CREATE SEQUENCE   "COMPONENT_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 41 CACHE 20 NOORDER  NOCYCLE  NOPARTITION
/
 CREATE SEQUENCE   "IHIW_REPORT_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 6079 CACHE 20 NOORDER  NOCYCLE  NOPARTITION
/
 CREATE SEQUENCE   "IHIW_ROLES_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 21 CACHE 20 NOORDER  NOCYCLE  NOPARTITION
/
 CREATE SEQUENCE   "IHIW_USER_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1429 CACHE 10 NOORDER  NOCYCLE  NOPARTITION
/
 CREATE SEQUENCE   "POPULATION_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 841 CACHE 20 NOORDER  NOCYCLE  NOPARTITION
/
 CREATE SEQUENCE   "TYPINGMETHOD_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 381 CACHE 20 NOORDER  NOCYCLE  NOPARTITION
/
 CREATE SEQUENCE   "PROJECT_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 401 CACHE 20 NOORDER  NOCYCLE  NOPARTITION
/
 CREATE SEQUENCE   "SAMPLE_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 2591679 CACHE 20 NOORDER  NOCYCLE  NOPARTITION
/
 CREATE SEQUENCE   "STATE_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 61 CACHE 20 NOORDER  NOCYCLE  NOPARTITION
/
 CREATE SEQUENCE   "CPN_LAB_HISTORY_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1461 CACHE 20 NOORDER  NOCYCLE  NOPARTITION
/
 CREATE SEQUENCE   "CPN_USR_HISTORY_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 561 CACHE 20 NOORDER  NOCYCLE  NOPARTITION
/
 CREATE SEQUENCE   "CPN_DAT_HISTORY_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 101 CACHE 20 NOORDER  NOCYCLE  NOPARTITION
/
 CREATE SEQUENCE   "DAT_USR_HISTORY_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 81 CACHE 20 NOORDER  NOCYCLE  NOPARTITION
/
 CREATE SEQUENCE   "LAB_HIS_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 941 CACHE 20 NOORDER  NOCYCLE  NOPARTITION
/
 CREATE SEQUENCE   "EPITOPE_REPORT_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 141 CACHE 20 NOORDER  NOCYCLE  NOPARTITION
/
 CREATE SEQUENCE   "EPITOPE_CALINFO_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 241 CACHE 20 NOORDER  NOCYCLE  NOPARTITION
/
 CREATE SEQUENCE   "EPITIOE_CONINFO_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 261 CACHE 20 NOORDER  NOCYCLE  NOPARTITION
/
 CREATE SEQUENCE   "EPITIOE_RAW_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 37401 CACHE 20 NOORDER  NOCYCLE  NOPARTITION
/
 CREATE SEQUENCE   "EPITOPE_FUSION_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 4146681 CACHE 20 NOORDER  NOCYCLE  NOPARTITION
/
 CREATE SEQUENCE   "REFERENCE_ALLELES_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 81 CACHE 20 NOORDER  NOCYCLE  NOPARTITION
/
 CREATE SEQUENCE   "REFERENCE_CATEGORIES_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 101 CACHE 20 NOORDER  NOCYCLE  NOPARTITION
/
 CREATE SEQUENCE   "EPITOPE_KEY_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 141 CACHE 20 NOORDER  NOCYCLE  NOPARTITION
/
 CREATE SEQUENCE   "FUSION_PROFILE_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 881 CACHE 20 NOORDER  NOCYCLE  NOPARTITION
/
 CREATE SEQUENCE   "FUSION_DATA_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 82041 CACHE 20 NOORDER  NOCYCLE  NOPARTITION
/
 CREATE SEQUENCE   "SFTP_DATALOG_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 9774 CACHE 20 NOORDER  NOCYCLE  NOPARTITION
/
 CREATE SEQUENCE   "NOVELPOLY_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 2981441 CACHE 20 NOORDER  NOCYCLE  NOPARTITION
/
 CREATE SEQUENCE   "PROCESS_CONSEQ_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1608368 CACHE 20 NOORDER  NOCYCLE  NOPARTITION
/
 CREATE SEQUENCE   "TRANSPLANTATION_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1401 CACHE 20 NOORDER  NOCYCLE  NOPARTITION
/
 CREATE SEQUENCE   "EPI_SAMPLE_INFO_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 21 CACHE 20 NOORDER  NOCYCLE  NOPARTITION
/
 CREATE SEQUENCE   "LARGESAMPLETMP_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 2246461 CACHE 20 NOORDER  NOCYCLE  NOPARTITION
/
 CREATE SEQUENCE   "LARGEDATA_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 2697261 CACHE 20 NOORDER  NOCYCLE  NOPARTITION
/
 CREATE SEQUENCE   "DUPLICATED_DEUWAG_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 4821 CACHE 20 NOORDER  NOCYCLE  NOPARTITION
/
 CREATE SEQUENCE   "ABCALLING_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOPARTITION
/
 CREATE SEQUENCE   "NVGROUP_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 61890 NOCACHE  NOORDER  NOCYCLE  NOPARTITION
/
 CREATE SEQUENCE   "EPITOPE_TRIPLET_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 110561 CACHE 20 NOORDER  NOCYCLE  NOPARTITION
/
 CREATE SEQUENCE   "TMP_NMDP_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 8001 CACHE 20 NOORDER  NOCYCLE  NOPARTITION
/
CREATE OR REPLACE EDITIONABLE TRIGGER  "APEX$TEAM_DEV_FILES_BIU" 
          before insert or update on apex$team_dev_files
          for each row
        declare
           l_filesize_quota number := 15728640;
           l_filesize_mb    number;
        begin
          for c1 in
          (
              select
                  team_dev_fs_limit
              from
                  apex_workspaces
              where
                  workspace_id = v( 'APP_SECURITY_GROUP_ID' )
          )
          loop
            l_filesize_quota := c1.team_dev_fs_limit;
            l_filesize_mb    := l_filesize_quota/1048576;
          end loop;
          if :new."ID" is null then
            select to_number(sys_guid(),'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX') into :new.id from sys.dual;
          end if;
          if inserting then
           :new.created := localtimestamp;
           :new.created_by := nvl(wwv_flow.g_user,user);
           :new.updated := localtimestamp;
           :new.updated_by := nvl(wwv_flow.g_user,user);
           :new.row_version_number := 1;
         elsif updating then
           :new.row_version_number := nvl(:old.row_version_number,1) + 1;
         end if;
         if (inserting or updating) and nvl(sys.dbms_lob.getlength(:new.file_blob),0) > l_filesize_quota then
           raise_application_error(-20000, wwv_flow_lang.system_message('FILE_TOO_LARGE', trunc(l_filesize_mb)));
         end if;
         if inserting or updating then
           :new.updated := localtimestamp;
           :new.updated_by := nvl(wwv_flow.g_user,user);
         end if;
        end;
        
/
ALTER TRIGGER  "APEX$TEAM_DEV_FILES_BIU" ENABLE
/
CREATE OR REPLACE EDITIONABLE TRIGGER  "APEX$_ACL_T1" 
before insert or update on "APEX$_ACL"
for each row
begin
    --
    -- maintain pk and timestamps
    --
    :new.username := upper(:new.username);
    if inserting and :new.id is null then
        select to_number(sys_guid(),'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX') into :new.id from sys.dual;
    end if;
    if inserting then
        :new.created_on := sysdate;
        :new.created_by := nvl(v('APP_USER'),user);
        :new.updated_on := sysdate;
        :new.updated_by := nvl(v('APP_USER'),user);
    elsif updating then
        :new.updated_on := sysdate;
        :new.updated_by := nvl(v('APP_USER'),user);
    end if;
end;

/
ALTER TRIGGER  "APEX$_ACL_T1" ENABLE
/
CREATE OR REPLACE EDITIONABLE TRIGGER  "APEX$_WS_FILES_T1" 
before insert or update on "APEX$_WS_FILES"
for each row
begin
    --
    -- maintain pk and timestamps
    --
    if inserting and :new.id is null then
        select to_number(sys_guid(),'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX') into :new.id from sys.dual;
    end if;
    if inserting and :new.image_alias is null then
        :new.image_alias := :new.name;
    end if;
    if inserting then
        :new.created_on := sysdate;
        :new.created_by := nvl(v('APP_USER'),user);
        :new.updated_on := sysdate;
        :new.updated_by := nvl(v('APP_USER'),user);
        :new.content_last_update := sysdate;
    elsif updating then
        :new.updated_on := sysdate;
        :new.updated_by := nvl(v('APP_USER'),user);
        if nvl(length(:new.content),0) <> nvl(length(:old.content),0) then
            :new.content_last_update := sysdate;
        end if;
    end if;
end;

/
ALTER TRIGGER  "APEX$_WS_FILES_T1" ENABLE
/
CREATE OR REPLACE EDITIONABLE TRIGGER  "APEX$_WS_LINKS_T1" 
before insert or update on "APEX$_WS_LINKS"
for each row
begin
    --
    -- maintain pk and timestamps
    --
    if inserting and :new.id is null then
        select to_number(sys_guid(),'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX') into :new.id from sys.dual;
    end if;
    if inserting then
        :new.created_on := sysdate;
        :new.created_by := nvl(v('APP_USER'),user);
        :new.updated_on := sysdate;
        :new.updated_by := nvl(v('APP_USER'),user);
    elsif updating then
        :new.updated_on := sysdate;
        :new.updated_by := nvl(v('APP_USER'),user);
    end if;
end;

/
ALTER TRIGGER  "APEX$_WS_LINKS_T1" ENABLE
/
CREATE OR REPLACE EDITIONABLE TRIGGER  "APEX$_WS_NOTES_T1" 
before insert or update on "APEX$_WS_NOTES"
for each row
begin
    --
    -- maintain pk and timestamps
    --
    if inserting and :new.id is null then
        select to_number(sys_guid(),'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX') into :new.id from sys.dual;
    end if;
    if inserting then
        :new.created_on := sysdate;
        :new.created_by := nvl(v('APP_USER'),user);
        :new.updated_on := sysdate;
        :new.updated_by := nvl(v('APP_USER'),user);
    elsif updating then
        :new.updated_on := sysdate;
        :new.updated_by := nvl(v('APP_USER'),user);
    end if;
end;

/
ALTER TRIGGER  "APEX$_WS_NOTES_T1" ENABLE
/
CREATE OR REPLACE EDITIONABLE TRIGGER  "APEX$_WS_ROWS_T1" 
before insert or update on "APEX$_WS_ROWS"
for each row
declare
    l_tag_list apex_application_global.vc_arr2;
    type col_arr is table of varchar2(32767) index by varchar2(255);
    la_col_label col_arr;
    procedure datagrid_logging( 
        p_row_id       in number,
        p_ws_app_id    in number,
        p_data_grid_id in number,
        p_col_name     in varchar2,
        p_type         in varchar2,
        p_old_c        in varchar2 default null,
        p_new_c        in varchar2 default null,
        p_old_d        in date default null,
        p_new_d        in date default null,
        p_old_n        in number default null,
        p_new_n        in number default null)
    is
    begin
        case p_type
        when 'C' then
          if (p_old_c is null and p_new_c is not null) or (p_old_c is not null and p_new_c is null) or (p_old_c != p_new_c) then
              insert into apex$_ws_history (row_id, ws_app_id, data_grid_id, column_name, old_value, new_value, change_date, application_user_id)
              values (p_row_id, p_ws_app_id, p_data_grid_id, p_col_name, p_old_c, p_new_c, sysdate, nvl(v('APP_USER'),user));
          end if;
        when 'D' then
          if (p_old_d is null and p_new_d is not null) or (p_old_d is not null and p_new_d is null) or (p_old_d != p_new_d) then
              insert into apex$_ws_history (row_id, ws_app_id, data_grid_id, column_name, old_value,  new_value, change_date, application_user_id)
              values (p_row_id, p_ws_app_id, p_data_grid_id, p_col_name, p_old_d, p_new_d, sysdate, nvl(v('APP_USER'),user));
        	  end if;
        when 'N' then
          if (p_old_n is null and p_new_n is not null) or (p_old_n is not null and p_new_n is null) or (p_old_n != p_new_n) then
              insert into apex$_ws_history (row_id, ws_app_id, data_grid_id, column_name, old_value,  new_value, change_date, application_user_id)
              values (p_row_id, p_ws_app_id, p_data_grid_id, p_col_name, p_old_n, p_new_n, sysdate, nvl(v('APP_USER'),user));
          end if;
        end case;
    end datagrid_logging;
    procedure wa( p_c in out nocopy clob, p_buf in varchar2 )
    is
    l_lf varchar2(2) := unistr('\000a');
    begin
    if p_buf is not null then sys.dbms_lob.writeappend( p_c, length(p_buf||l_lf), upper(p_buf)||l_lf); end if;
    end wa;
begin
    --
    -- maintain pk and timestamps
    --
    if inserting then
        if :new.id is null then
            select to_number(sys_guid(),'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX') into :new.id from sys.dual;
        end if;
        
        -- manintain readable row key
        if :new.unique_value is null then
            :new.unique_value := apex_util.compress_int(apex$_ws_seq.nextval);
        end if;
        
        :new.created_on := sysdate;
        :new.created_by := nvl(v('APP_USER'),user);
        :new.updated_on := sysdate;
        :new.updated_by := nvl(v('APP_USER'),user);
        select to_number(sys_guid(),'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX') into :new.load_order from sys.dual;
        :new.change_count := 0;
    elsif updating then
        :new.updated_on := sysdate;
        :new.updated_by := nvl(v('APP_USER'),user);
        :new.change_count := :old.change_count + 1;
    end if;
    --
    -- inserting remove chr 13
    --
    if instr(:new.c001,chr(13)) > 0 then :new.c001 := replace(:new.c001,chr(13),null); end if;
    if instr(:new.c002,chr(13)) > 0 then :new.c002 := replace(:new.c002,chr(13),null); end if;
    if instr(:new.c003,chr(13)) > 0 then :new.c003 := replace(:new.c003,chr(13),null); end if;
    if instr(:new.c004,chr(13)) > 0 then :new.c004 := replace(:new.c004,chr(13),null); end if;
    if instr(:new.c005,chr(13)) > 0 then :new.c005 := replace(:new.c005,chr(13),null); end if;
    if instr(:new.c006,chr(13)) > 0 then :new.c006 := replace(:new.c006,chr(13),null); end if;
    if instr(:new.c007,chr(13)) > 0 then :new.c007 := replace(:new.c007,chr(13),null); end if;
    if instr(:new.c008,chr(13)) > 0 then :new.c008 := replace(:new.c008,chr(13),null); end if;
    if instr(:new.c009,chr(13)) > 0 then :new.c009 := replace(:new.c009,chr(13),null); end if;
    if instr(:new.c010,chr(13)) > 0 then :new.c010 := replace(:new.c010,chr(13),null); end if;
    if instr(:new.c011,chr(13)) > 0 then :new.c011 := replace(:new.c011,chr(13),null); end if;
    if instr(:new.c012,chr(13)) > 0 then :new.c012 := replace(:new.c012,chr(13),null); end if;
    if instr(:new.c013,chr(13)) > 0 then :new.c013 := replace(:new.c013,chr(13),null); end if;
    if instr(:new.c014,chr(13)) > 0 then :new.c014 := replace(:new.c014,chr(13),null); end if;
    if instr(:new.c015,chr(13)) > 0 then :new.c015 := replace(:new.c015,chr(13),null); end if;
    if instr(:new.c016,chr(13)) > 0 then :new.c016 := replace(:new.c016,chr(13),null); end if;
    if instr(:new.c017,chr(13)) > 0 then :new.c017 := replace(:new.c017,chr(13),null); end if;
    if instr(:new.c018,chr(13)) > 0 then :new.c018 := replace(:new.c018,chr(13),null); end if;
    if instr(:new.c019,chr(13)) > 0 then :new.c019 := replace(:new.c019,chr(13),null); end if;
    if instr(:new.c020,chr(13)) > 0 then :new.c020 := replace(:new.c010,chr(23),null); end if;
    if instr(:new.c021,chr(13)) > 0 then :new.c021 := replace(:new.c001,chr(23),null); end if;
    if instr(:new.c022,chr(13)) > 0 then :new.c022 := replace(:new.c002,chr(23),null); end if;
    if instr(:new.c023,chr(13)) > 0 then :new.c023 := replace(:new.c003,chr(23),null); end if;
    if instr(:new.c024,chr(13)) > 0 then :new.c024 := replace(:new.c004,chr(23),null); end if;
    if instr(:new.c025,chr(13)) > 0 then :new.c025 := replace(:new.c005,chr(23),null); end if;
    if instr(:new.c026,chr(13)) > 0 then :new.c026 := replace(:new.c006,chr(23),null); end if;
    if instr(:new.c027,chr(13)) > 0 then :new.c027 := replace(:new.c007,chr(23),null); end if;
    if instr(:new.c028,chr(13)) > 0 then :new.c028 := replace(:new.c008,chr(23),null); end if;
    if instr(:new.c029,chr(13)) > 0 then :new.c029 := replace(:new.c009,chr(23),null); end if;
    if instr(:new.c030,chr(13)) > 0 then :new.c030 := replace(:new.c030,chr(13),null); end if;
    if instr(:new.c031,chr(13)) > 0 then :new.c031 := replace(:new.c031,chr(13),null); end if;
    if instr(:new.c032,chr(13)) > 0 then :new.c032 := replace(:new.c032,chr(13),null); end if;
    if instr(:new.c033,chr(13)) > 0 then :new.c033 := replace(:new.c033,chr(13),null); end if;
    if instr(:new.c034,chr(13)) > 0 then :new.c034 := replace(:new.c034,chr(13),null); end if;
    if instr(:new.c035,chr(13)) > 0 then :new.c035 := replace(:new.c035,chr(13),null); end if;
    if instr(:new.c036,chr(13)) > 0 then :new.c036 := replace(:new.c036,chr(13),null); end if;
    if instr(:new.c037,chr(13)) > 0 then :new.c037 := replace(:new.c037,chr(13),null); end if;
    if instr(:new.c038,chr(13)) > 0 then :new.c038 := replace(:new.c038,chr(13),null); end if;
    if instr(:new.c039,chr(13)) > 0 then :new.c039 := replace(:new.c039,chr(13),null); end if;
    if instr(:new.c040,chr(13)) > 0 then :new.c040 := replace(:new.c040,chr(13),null); end if;
    if instr(:new.c041,chr(13)) > 0 then :new.c041 := replace(:new.c041,chr(13),null); end if;
    if instr(:new.c042,chr(13)) > 0 then :new.c042 := replace(:new.c042,chr(13),null); end if;
    if instr(:new.c043,chr(13)) > 0 then :new.c043 := replace(:new.c043,chr(13),null); end if;
    if instr(:new.c044,chr(13)) > 0 then :new.c044 := replace(:new.c044,chr(13),null); end if;
    if instr(:new.c045,chr(13)) > 0 then :new.c045 := replace(:new.c045,chr(13),null); end if;
    if instr(:new.c046,chr(13)) > 0 then :new.c046 := replace(:new.c046,chr(13),null); end if;
    if instr(:new.c047,chr(13)) > 0 then :new.c047 := replace(:new.c047,chr(13),null); end if;
    if instr(:new.c048,chr(13)) > 0 then :new.c048 := replace(:new.c048,chr(13),null); end if;
    if instr(:new.c049,chr(13)) > 0 then :new.c049 := replace(:new.c049,chr(13),null); end if;
    if instr(:new.c050,chr(13)) > 0 then :new.c050 := replace(:new.c050,chr(13),null); end if;
    if :new.search_clob is null then
        sys.dbms_lob.createtemporary( :new.search_clob, false, sys.dbms_lob.session );
    else
        sys.dbms_lob.trim( :new.search_clob, 0 );
    end if;
    wa(:new.search_clob,:new.c001);wa(:new.search_clob,:new.c002);wa(:new.search_clob,:new.c003);
    wa(:new.search_clob,:new.c004);wa(:new.search_clob,:new.c005);wa(:new.search_clob,:new.c006);
    wa(:new.search_clob,:new.c007);wa(:new.search_clob,:new.c008);wa(:new.search_clob,:new.c009);
    wa(:new.search_clob,:new.c010);wa(:new.search_clob,:new.c011);wa(:new.search_clob,:new.c012);
    wa(:new.search_clob,:new.c013);wa(:new.search_clob,:new.c014);wa(:new.search_clob,:new.c015);
    wa(:new.search_clob,:new.c016);wa(:new.search_clob,:new.c017);wa(:new.search_clob,:new.c018);
    wa(:new.search_clob,:new.c019);wa(:new.search_clob,:new.c020);wa(:new.search_clob,:new.c021);
    wa(:new.search_clob,:new.c022);wa(:new.search_clob,:new.c023);wa(:new.search_clob,:new.c024);
    wa(:new.search_clob,:new.c025);wa(:new.search_clob,:new.c026);wa(:new.search_clob,:new.c027);
    wa(:new.search_clob,:new.c028);wa(:new.search_clob,:new.c029);wa(:new.search_clob,:new.c030);
    wa(:new.search_clob,:new.c031);wa(:new.search_clob,:new.c032);wa(:new.search_clob,:new.c033);
    wa(:new.search_clob,:new.c034);wa(:new.search_clob,:new.c035);wa(:new.search_clob,:new.c036);
    wa(:new.search_clob,:new.c037);wa(:new.search_clob,:new.c038);wa(:new.search_clob,:new.c039);
    wa(:new.search_clob,:new.c040);wa(:new.search_clob,:new.c041);wa(:new.search_clob,:new.c042);
    wa(:new.search_clob,:new.c043);wa(:new.search_clob,:new.c044);wa(:new.search_clob,:new.c045);
    wa(:new.search_clob,:new.c046);wa(:new.search_clob,:new.c047);wa(:new.search_clob,:new.c048);
    wa(:new.search_clob,:new.c049);wa(:new.search_clob,:new.c050);
    --
    -- history
    --
    if updating then
       -- initialize column label array
       for i in 1..50
       loop
           la_col_label('C'||to_char(i,'FM009')) := null;
           la_col_label('N'||to_char(i,'FM009')) := null;
           la_col_label('D'||to_char(i,'FM009')) := null;
       end loop;
       -- get column label array
       for c1 in (select column_alias, report_label 
                  from apex_ws_data_grid_col
                  where data_grid_id = :new.data_grid_id)
       loop
           la_col_label(c1.column_alias) := c1.report_label;
       end loop;
       -- strings
       datagrid_logging(:new.id,:new.ws_app_id,:new.data_grid_id,la_col_label('C001'),'C',:old.c001,:new.c001);
       datagrid_logging(:new.id,:new.ws_app_id,:new.data_grid_id,la_col_label('C002'),'C',:old.c002,:new.c002);
       datagrid_logging(:new.id,:new.ws_app_id,:new.data_grid_id,la_col_label('C003'),'C',:old.c003,:new.c003);
       datagrid_logging(:new.id,:new.ws_app_id,:new.data_grid_id,la_col_label('C004'),'C',:old.c004,:new.c004);
       datagrid_logging(:new.id,:new.ws_app_id,:new.data_grid_id,la_col_label('C005'),'C',:old.c005,:new.c005);
       datagrid_logging(:new.id,:new.ws_app_id,:new.data_grid_id,la_col_label('C006'),'C',:old.c006,:new.c006);
       datagrid_logging(:new.id,:new.ws_app_id,:new.data_grid_id,la_col_label('C007'),'C',:old.c007,:new.c007);
       datagrid_logging(:new.id,:new.ws_app_id,:new.data_grid_id,la_col_label('C008'),'C',:old.c008,:new.c008);
       datagrid_logging(:new.id,:new.ws_app_id,:new.data_grid_id,la_col_label('C009'),'C',:old.c009,:new.c009);
       datagrid_logging(:new.id,:new.ws_app_id,:new.data_grid_id,la_col_label('C010'),'C',:old.c010,:new.c010);
       datagrid_logging(:new.id,:new.ws_app_id,:new.data_grid_id,la_col_label('C011'),'C',:old.c011,:new.c011);
       datagrid_logging(:new.id,:new.ws_app_id,:new.data_grid_id,la_col_label('C012'),'C',:old.c012,:new.c012);
       datagrid_logging(:new.id,:new.ws_app_id,:new.data_grid_id,la_col_label('C013'),'C',:old.c013,:new.c013);
       datagrid_logging(:new.id,:new.ws_app_id,:new.data_grid_id,la_col_label('C014'),'C',:old.c014,:new.c014);
       datagrid_logging(:new.id,:new.ws_app_id,:new.data_grid_id,la_col_label('C015'),'C',:old.c015,:new.c015);
       datagrid_logging(:new.id,:new.ws_app_id,:new.data_grid_id,la_col_label('C016'),'C',:old.c016,:new.c016);
       datagrid_logging(:new.id,:new.ws_app_id,:new.data_grid_id,la_col_label('C017'),'C',:old.c017,:new.c017);
       datagrid_logging(:new.id,:new.ws_app_id,:new.data_grid_id,la_col_label('C018'),'C',:old.c018,:new.c018);
       datagrid_logging(:new.id,:new.ws_app_id,:new.data_grid_id,la_col_label('C019'),'C',:old.c019,:new.c019);
       datagrid_logging(:new.id,:new.ws_app_id,:new.data_grid_id,la_col_label('C020'),'C',:old.c020,:new.c020);
       datagrid_logging(:new.id,:new.ws_app_id,:new.data_grid_id,la_col_label('C021'),'C',:old.c021,:new.c021);
       datagrid_logging(:new.id,:new.ws_app_id,:new.data_grid_id,la_col_label('C022'),'C',:old.c022,:new.c022);
       datagrid_logging(:new.id,:new.ws_app_id,:new.data_grid_id,la_col_label('C023'),'C',:old.c023,:new.c023);
       datagrid_logging(:new.id,:new.ws_app_id,:new.data_grid_id,la_col_label('C024'),'C',:old.c024,:new.c024);
       datagrid_logging(:new.id,:new.ws_app_id,:new.data_grid_id,la_col_label('C025'),'C',:old.c025,:new.c025);
       datagrid_logging(:new.id,:new.ws_app_id,:new.data_grid_id,la_col_label('C026'),'C',:old.c026,:new.c026);
       datagrid_logging(:new.id,:new.ws_app_id,:new.data_grid_id,la_col_label('C027'),'C',:old.c027,:new.c027);
       datagrid_logging(:new.id,:new.ws_app_id,:new.data_grid_id,la_col_label('C028'),'C',:old.c028,:new.c028);
       datagrid_logging(:new.id,:new.ws_app_id,:new.data_grid_id,la_col_label('C029'),'C',:old.c029,:new.c029);
       datagrid_logging(:new.id,:new.ws_app_id,:new.data_grid_id,la_col_label('C030'),'C',:old.c030,:new.c030);
       datagrid_logging(:new.id,:new.ws_app_id,:new.data_grid_id,la_col_label('C031'),'C',:old.c031,:new.c031);
       datagrid_logging(:new.id,:new.ws_app_id,:new.data_grid_id,la_col_label('C032'),'C',:old.c032,:new.c032);
       datagrid_logging(:new.id,:new.ws_app_id,:new.data_grid_id,la_col_label('C033'),'C',:old.c033,:new.c033);
       datagrid_logging(:new.id,:new.ws_app_id,:new.data_grid_id,la_col_label('C034'),'C',:old.c034,:new.c034);
       datagrid_logging(:new.id,:new.ws_app_id,:new.data_grid_id,la_col_label('C035'),'C',:old.c035,:new.c035);
       datagrid_logging(:new.id,:new.ws_app_id,:new.data_grid_id,la_col_label('C036'),'C',:old.c036,:new.c036);
       datagrid_logging(:new.id,:new.ws_app_id,:new.data_grid_id,la_col_label('C037'),'C',:old.c037,:new.c037);
       datagrid_logging(:new.id,:new.ws_app_id,:new.data_grid_id,la_col_label('C038'),'C',:old.c038,:new.c038);
       datagrid_logging(:new.id,:new.ws_app_id,:new.data_grid_id,la_col_label('C039'),'C',:old.c039,:new.c039);
       datagrid_logging(:new.id,:new.ws_app_id,:new.data_grid_id,la_col_label('C040'),'C',:old.c040,:new.c040);
       datagrid_logging(:new.id,:new.ws_app_id,:new.data_grid_id,la_col_label('C041'),'C',:old.c041,:new.c041);
       datagrid_logging(:new.id,:new.ws_app_id,:new.data_grid_id,la_col_label('C042'),'C',:old.c042,:new.c042);
       datagrid_logging(:new.id,:new.ws_app_id,:new.data_grid_id,la_col_label('C043'),'C',:old.c043,:new.c043);
       datagrid_logging(:new.id,:new.ws_app_id,:new.data_grid_id,la_col_label('C044'),'C',:old.c044,:new.c044);
       datagrid_logging(:new.id,:new.ws_app_id,:new.data_grid_id,la_col_label('C045'),'C',:old.c045,:new.c045);
       datagrid_logging(:new.id,:new.ws_app_id,:new.data_grid_id,la_col_label('C046'),'C',:old.c046,:new.c046);
       datagrid_logging(:new.id,:new.ws_app_id,:new.data_grid_id,la_col_label('C047'),'C',:old.c047,:new.c047);
       datagrid_logging(:new.id,:new.ws_app_id,:new.data_grid_id,la_col_label('C048'),'C',:old.c048,:new.c048);
       datagrid_logging(:new.id,:new.ws_app_id,:new.data_grid_id,la_col_label('C049'),'C',:old.c049,:new.c049);
       datagrid_logging(:new.id,:new.ws_app_id,:new.data_grid_id,la_col_label('C050'),'C',:old.c050,:new.c050);
       -- numbers
       datagrid_logging(:new.id,:new.ws_app_id,:new.data_grid_id,la_col_label('N001'),'N',null,null,null,null,:old.n001,:new.n001);
       datagrid_logging(:new.id,:new.ws_app_id,:new.data_grid_id,la_col_label('N002'),'N',null,null,null,null,:old.n002,:new.n002);
       datagrid_logging(:new.id,:new.ws_app_id,:new.data_grid_id,la_col_label('N003'),'N',null,null,null,null,:old.n003,:new.n003);
       datagrid_logging(:new.id,:new.ws_app_id,:new.data_grid_id,la_col_label('N004'),'N',null,null,null,null,:old.n004,:new.n004);
       datagrid_logging(:new.id,:new.ws_app_id,:new.data_grid_id,la_col_label('N005'),'N',null,null,null,null,:old.n005,:new.n005);
       datagrid_logging(:new.id,:new.ws_app_id,:new.data_grid_id,la_col_label('N006'),'N',null,null,null,null,:old.n006,:new.n006);
       datagrid_logging(:new.id,:new.ws_app_id,:new.data_grid_id,la_col_label('N007'),'N',null,null,null,null,:old.n007,:new.n007);
       datagrid_logging(:new.id,:new.ws_app_id,:new.data_grid_id,la_col_label('N008'),'N',null,null,null,null,:old.n008,:new.n008);
       datagrid_logging(:new.id,:new.ws_app_id,:new.data_grid_id,la_col_label('N009'),'N',null,null,null,null,:old.n009,:new.n009);
       datagrid_logging(:new.id,:new.ws_app_id,:new.data_grid_id,la_col_label('N010'),'N',null,null,null,null,:old.n010,:new.n010);
       datagrid_logging(:new.id,:new.ws_app_id,:new.data_grid_id,la_col_label('N011'),'N',null,null,null,null,:old.n011,:new.n011);
       datagrid_logging(:new.id,:new.ws_app_id,:new.data_grid_id,la_col_label('N012'),'N',null,null,null,null,:old.n012,:new.n012);
       datagrid_logging(:new.id,:new.ws_app_id,:new.data_grid_id,la_col_label('N013'),'N',null,null,null,null,:old.n013,:new.n013);
       datagrid_logging(:new.id,:new.ws_app_id,:new.data_grid_id,la_col_label('N014'),'N',null,null,null,null,:old.n014,:new.n014);
       datagrid_logging(:new.id,:new.ws_app_id,:new.data_grid_id,la_col_label('N015'),'N',null,null,null,null,:old.n015,:new.n015);
       datagrid_logging(:new.id,:new.ws_app_id,:new.data_grid_id,la_col_label('N016'),'N',null,null,null,null,:old.n016,:new.n016);
       datagrid_logging(:new.id,:new.ws_app_id,:new.data_grid_id,la_col_label('N017'),'N',null,null,null,null,:old.n017,:new.n017);
       datagrid_logging(:new.id,:new.ws_app_id,:new.data_grid_id,la_col_label('N018'),'N',null,null,null,null,:old.n018,:new.n018);
       datagrid_logging(:new.id,:new.ws_app_id,:new.data_grid_id,la_col_label('N019'),'N',null,null,null,null,:old.n019,:new.n019);
       datagrid_logging(:new.id,:new.ws_app_id,:new.data_grid_id,la_col_label('N020'),'N',null,null,null,null,:old.n020,:new.n020);
       datagrid_logging(:new.id,:new.ws_app_id,:new.data_grid_id,la_col_label('N021'),'N',null,null,null,null,:old.n021,:new.n021);
       datagrid_logging(:new.id,:new.ws_app_id,:new.data_grid_id,la_col_label('N022'),'N',null,null,null,null,:old.n022,:new.n022);
       datagrid_logging(:new.id,:new.ws_app_id,:new.data_grid_id,la_col_label('N023'),'N',null,null,null,null,:old.n023,:new.n023);
       datagrid_logging(:new.id,:new.ws_app_id,:new.data_grid_id,la_col_label('N024'),'N',null,null,null,null,:old.n024,:new.n024);
       datagrid_logging(:new.id,:new.ws_app_id,:new.data_grid_id,la_col_label('N025'),'N',null,null,null,null,:old.n025,:new.n025);
       datagrid_logging(:new.id,:new.ws_app_id,:new.data_grid_id,la_col_label('N026'),'N',null,null,null,null,:old.n026,:new.n026);
       datagrid_logging(:new.id,:new.ws_app_id,:new.data_grid_id,la_col_label('N027'),'N',null,null,null,null,:old.n027,:new.n027);
       datagrid_logging(:new.id,:new.ws_app_id,:new.data_grid_id,la_col_label('N028'),'N',null,null,null,null,:old.n028,:new.n028);
       datagrid_logging(:new.id,:new.ws_app_id,:new.data_grid_id,la_col_label('N029'),'N',null,null,null,null,:old.n029,:new.n029);
       datagrid_logging(:new.id,:new.ws_app_id,:new.data_grid_id,la_col_label('N030'),'N',null,null,null,null,:old.n030,:new.n030);
       datagrid_logging(:new.id,:new.ws_app_id,:new.data_grid_id,la_col_label('N031'),'N',null,null,null,null,:old.n031,:new.n031);
       datagrid_logging(:new.id,:new.ws_app_id,:new.data_grid_id,la_col_label('N032'),'N',null,null,null,null,:old.n032,:new.n032);
       datagrid_logging(:new.id,:new.ws_app_id,:new.data_grid_id,la_col_label('N033'),'N',null,null,null,null,:old.n033,:new.n033);
       datagrid_logging(:new.id,:new.ws_app_id,:new.data_grid_id,la_col_label('N034'),'N',null,null,null,null,:old.n034,:new.n034);
       datagrid_logging(:new.id,:new.ws_app_id,:new.data_grid_id,la_col_label('N035'),'N',null,null,null,null,:old.n035,:new.n035);
       datagrid_logging(:new.id,:new.ws_app_id,:new.data_grid_id,la_col_label('N036'),'N',null,null,null,null,:old.n036,:new.n036);
       datagrid_logging(:new.id,:new.ws_app_id,:new.data_grid_id,la_col_label('N037'),'N',null,null,null,null,:old.n037,:new.n037);
       datagrid_logging(:new.id,:new.ws_app_id,:new.data_grid_id,la_col_label('N038'),'N',null,null,null,null,:old.n038,:new.n038);
       datagrid_logging(:new.id,:new.ws_app_id,:new.data_grid_id,la_col_label('N039'),'N',null,null,null,null,:old.n039,:new.n039);
       datagrid_logging(:new.id,:new.ws_app_id,:new.data_grid_id,la_col_label('N040'),'N',null,null,null,null,:old.n040,:new.n040);
       datagrid_logging(:new.id,:new.ws_app_id,:new.data_grid_id,la_col_label('N041'),'N',null,null,null,null,:old.n041,:new.n041);
       datagrid_logging(:new.id,:new.ws_app_id,:new.data_grid_id,la_col_label('N042'),'N',null,null,null,null,:old.n042,:new.n042);
       datagrid_logging(:new.id,:new.ws_app_id,:new.data_grid_id,la_col_label('N043'),'N',null,null,null,null,:old.n043,:new.n043);
       datagrid_logging(:new.id,:new.ws_app_id,:new.data_grid_id,la_col_label('N044'),'N',null,null,null,null,:old.n044,:new.n044);
       datagrid_logging(:new.id,:new.ws_app_id,:new.data_grid_id,la_col_label('N045'),'N',null,null,null,null,:old.n045,:new.n045);
       datagrid_logging(:new.id,:new.ws_app_id,:new.data_grid_id,la_col_label('N046'),'N',null,null,null,null,:old.n046,:new.n046);
       datagrid_logging(:new.id,:new.ws_app_id,:new.data_grid_id,la_col_label('N047'),'N',null,null,null,null,:old.n047,:new.n047);
       datagrid_logging(:new.id,:new.ws_app_id,:new.data_grid_id,la_col_label('N048'),'N',null,null,null,null,:old.n048,:new.n048);
       datagrid_logging(:new.id,:new.ws_app_id,:new.data_grid_id,la_col_label('N049'),'N',null,null,null,null,:old.n049,:new.n049);
       datagrid_logging(:new.id,:new.ws_app_id,:new.data_grid_id,la_col_label('N050'),'N',null,null,null,null,:old.n050,:new.n050);
       -- dates
       datagrid_logging(:new.id,:new.ws_app_id,:new.data_grid_id,la_col_label('D001'),'D',null,null,:old.d001,:new.d001);
       datagrid_logging(:new.id,:new.ws_app_id,:new.data_grid_id,la_col_label('D002'),'D',null,null,:old.d002,:new.d002);
       datagrid_logging(:new.id,:new.ws_app_id,:new.data_grid_id,la_col_label('D003'),'D',null,null,:old.d003,:new.d003);
       datagrid_logging(:new.id,:new.ws_app_id,:new.data_grid_id,la_col_label('D004'),'D',null,null,:old.d004,:new.d004);
       datagrid_logging(:new.id,:new.ws_app_id,:new.data_grid_id,la_col_label('D005'),'D',null,null,:old.d005,:new.d005);
       datagrid_logging(:new.id,:new.ws_app_id,:new.data_grid_id,la_col_label('D006'),'D',null,null,:old.d006,:new.d006);
       datagrid_logging(:new.id,:new.ws_app_id,:new.data_grid_id,la_col_label('D007'),'D',null,null,:old.d007,:new.d007);
       datagrid_logging(:new.id,:new.ws_app_id,:new.data_grid_id,la_col_label('D008'),'D',null,null,:old.d008,:new.d008);
       datagrid_logging(:new.id,:new.ws_app_id,:new.data_grid_id,la_col_label('D009'),'D',null,null,:old.d009,:new.d009);
       datagrid_logging(:new.id,:new.ws_app_id,:new.data_grid_id,la_col_label('D010'),'D',null,null,:old.d010,:new.d010);
       datagrid_logging(:new.id,:new.ws_app_id,:new.data_grid_id,la_col_label('D011'),'D',null,null,:old.d011,:new.d011);
       datagrid_logging(:new.id,:new.ws_app_id,:new.data_grid_id,la_col_label('D012'),'D',null,null,:old.d012,:new.d012);
       datagrid_logging(:new.id,:new.ws_app_id,:new.data_grid_id,la_col_label('D013'),'D',null,null,:old.d013,:new.d013);
       datagrid_logging(:new.id,:new.ws_app_id,:new.data_grid_id,la_col_label('D014'),'D',null,null,:old.d014,:new.d014);
       datagrid_logging(:new.id,:new.ws_app_id,:new.data_grid_id,la_col_label('D015'),'D',null,null,:old.d015,:new.d015);
       datagrid_logging(:new.id,:new.ws_app_id,:new.data_grid_id,la_col_label('D016'),'D',null,null,:old.d016,:new.d016);
       datagrid_logging(:new.id,:new.ws_app_id,:new.data_grid_id,la_col_label('D017'),'D',null,null,:old.d017,:new.d017);
       datagrid_logging(:new.id,:new.ws_app_id,:new.data_grid_id,la_col_label('D018'),'D',null,null,:old.d018,:new.d018);
       datagrid_logging(:new.id,:new.ws_app_id,:new.data_grid_id,la_col_label('D019'),'D',null,null,:old.d019,:new.d019);
       datagrid_logging(:new.id,:new.ws_app_id,:new.data_grid_id,la_col_label('D020'),'D',null,null,:old.d020,:new.d020);
       datagrid_logging(:new.id,:new.ws_app_id,:new.data_grid_id,la_col_label('D021'),'D',null,null,:old.d021,:new.d021);
       datagrid_logging(:new.id,:new.ws_app_id,:new.data_grid_id,la_col_label('D022'),'D',null,null,:old.d022,:new.d022);
       datagrid_logging(:new.id,:new.ws_app_id,:new.data_grid_id,la_col_label('D023'),'D',null,null,:old.d023,:new.d023);
       datagrid_logging(:new.id,:new.ws_app_id,:new.data_grid_id,la_col_label('D024'),'D',null,null,:old.d024,:new.d024);
       datagrid_logging(:new.id,:new.ws_app_id,:new.data_grid_id,la_col_label('D025'),'D',null,null,:old.d025,:new.d025);
       datagrid_logging(:new.id,:new.ws_app_id,:new.data_grid_id,la_col_label('D026'),'D',null,null,:old.d026,:new.d026);
       datagrid_logging(:new.id,:new.ws_app_id,:new.data_grid_id,la_col_label('D027'),'D',null,null,:old.d027,:new.d027);
       datagrid_logging(:new.id,:new.ws_app_id,:new.data_grid_id,la_col_label('D028'),'D',null,null,:old.d028,:new.d028);
       datagrid_logging(:new.id,:new.ws_app_id,:new.data_grid_id,la_col_label('D029'),'D',null,null,:old.d029,:new.d029);
       datagrid_logging(:new.id,:new.ws_app_id,:new.data_grid_id,la_col_label('D030'),'D',null,null,:old.d030,:new.d030);
       datagrid_logging(:new.id,:new.ws_app_id,:new.data_grid_id,la_col_label('D031'),'D',null,null,:old.d031,:new.d031);
       datagrid_logging(:new.id,:new.ws_app_id,:new.data_grid_id,la_col_label('D032'),'D',null,null,:old.d032,:new.d032);
       datagrid_logging(:new.id,:new.ws_app_id,:new.data_grid_id,la_col_label('D033'),'D',null,null,:old.d033,:new.d033);
       datagrid_logging(:new.id,:new.ws_app_id,:new.data_grid_id,la_col_label('D034'),'D',null,null,:old.d034,:new.d034);
       datagrid_logging(:new.id,:new.ws_app_id,:new.data_grid_id,la_col_label('D035'),'D',null,null,:old.d035,:new.d035);
       datagrid_logging(:new.id,:new.ws_app_id,:new.data_grid_id,la_col_label('D036'),'D',null,null,:old.d036,:new.d036);
       datagrid_logging(:new.id,:new.ws_app_id,:new.data_grid_id,la_col_label('D037'),'D',null,null,:old.d037,:new.d037);
       datagrid_logging(:new.id,:new.ws_app_id,:new.data_grid_id,la_col_label('D038'),'D',null,null,:old.d038,:new.d038);
       datagrid_logging(:new.id,:new.ws_app_id,:new.data_grid_id,la_col_label('D039'),'D',null,null,:old.d039,:new.d039);
       datagrid_logging(:new.id,:new.ws_app_id,:new.data_grid_id,la_col_label('D040'),'D',null,null,:old.d040,:new.d040);
       datagrid_logging(:new.id,:new.ws_app_id,:new.data_grid_id,la_col_label('D041'),'D',null,null,:old.d041,:new.d041);
       datagrid_logging(:new.id,:new.ws_app_id,:new.data_grid_id,la_col_label('D042'),'D',null,null,:old.d042,:new.d042);
       datagrid_logging(:new.id,:new.ws_app_id,:new.data_grid_id,la_col_label('D043'),'D',null,null,:old.d043,:new.d043);
       datagrid_logging(:new.id,:new.ws_app_id,:new.data_grid_id,la_col_label('D044'),'D',null,null,:old.d044,:new.d044);
       datagrid_logging(:new.id,:new.ws_app_id,:new.data_grid_id,la_col_label('D045'),'D',null,null,:old.d045,:new.d045);
       datagrid_logging(:new.id,:new.ws_app_id,:new.data_grid_id,la_col_label('D046'),'D',null,null,:old.d046,:new.d046);
       datagrid_logging(:new.id,:new.ws_app_id,:new.data_grid_id,la_col_label('D047'),'D',null,null,:old.d047,:new.d047);
       datagrid_logging(:new.id,:new.ws_app_id,:new.data_grid_id,la_col_label('D048'),'D',null,null,:old.d048,:new.d048);
       datagrid_logging(:new.id,:new.ws_app_id,:new.data_grid_id,la_col_label('D049'),'D',null,null,:old.d049,:new.d049);
       datagrid_logging(:new.id,:new.ws_app_id,:new.data_grid_id,la_col_label('D050'),'D',null,null,:old.d050,:new.d050);
    end if;
    --
    -- set owner
    --
    if :new.owner is null then
        :new.owner := :new.created_by;
    end if;
end;

/
ALTER TRIGGER  "APEX$_WS_ROWS_T1" ENABLE
/
CREATE OR REPLACE EDITIONABLE TRIGGER  "APEX$_WS_TAGS_T1" 
before insert or update on "APEX$_WS_TAGS"
for each row
begin
    --
    -- maintain pk and timestamps
    --
    if inserting and :new.id is null then
        select to_number(sys_guid(),'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX') into :new.id from sys.dual;
    end if;
    if inserting then
        :new.created_on := sysdate;
        :new.created_by := nvl(v('APP_USER'),user);
        :new.updated_on := sysdate;
        :new.updated_by := nvl(v('APP_USER'),user);
    elsif updating then
        :new.updated_on := sysdate;
        :new.updated_by := nvl(v('APP_USER'),user);
    end if;
end;

/
ALTER TRIGGER  "APEX$_WS_TAGS_T1" ENABLE
/
CREATE OR REPLACE EDITIONABLE TRIGGER  "APEX$_WS_WEBPG_SECTIONS_T1" 
before insert or update on "APEX$_WS_WEBPG_SECTIONS"
for each row
declare
    l_sequence_changed varchar2(1) := 'N';
    l_title_changed varchar2(1) := 'N';
    l_content_changed varchar2(1) := 'N';
    procedure clob_upper( p_content in clob, p_content_upper in out nocopy clob)
    is
    l_buf varchar2(32767);
    l_off number;
    l_amt number;
    begin
    if p_content is not null then
        l_amt := 8000;
        l_off := 1;
         sys.dbms_lob.trim( p_content_upper, 0);
         begin
             loop
                 sys.dbms_lob.read( p_content, l_amt, l_off, l_buf );
                 l_buf := upper( l_buf );
                 sys.dbms_lob.writeappend( p_content_upper, length(l_buf), l_buf);
                 l_off := l_off + l_amt;
                 l_amt := 8000;
             end loop;
         exception
             when no_data_found then null;
         end;
     end if;
end clob_upper;
begin
    --
    -- maintain pk and timestamps
    --
    if inserting and :new.id is null then
        select to_number(sys_guid(),'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX') into :new.id from sys.dual;
    end if;
    if :new.section_type = 'NAV_PAGE' then
        if :new.nav_include_link is null then
            :new.nav_include_link := 'Y';
        end if;
    end if;
    if inserting and :new.content is not null then
        sys.dbms_lob.createtemporary( :new.content_upper, false, sys.dbms_lob.call );
        clob_upper( :new.content, :new.content_upper );
    elsif updating then
        if :new.content_upper is null then
            sys.dbms_lob.createtemporary( :new.content_upper, false, sys.dbms_lob.call );
        end if;
        clob_upper( :new.content, :new.content_upper );
    end if;
    if inserting then
        :new.created_on := sysdate;
        :new.created_by := nvl(v('APP_USER'),user);
        :new.updated_on := sysdate;
        :new.updated_by := nvl(v('APP_USER'),user);
        :new.change_count := 0;
    elsif updating then
        :new.updated_on := sysdate;
        :new.updated_by := nvl(v('APP_USER'),user);
        :new.change_count := nvl(:old.change_count,0) + 1;
        if nvl(:old.display_sequence,-999) != nvl(:new.display_sequence,-999) then
            l_sequence_changed := 'Y';
        end if;
        if nvl(:old.title,'jKKwZk') != nvl(:new.title,'jKKwZk') then
            l_title_changed := 'Y';
        end if;
        if sys.dbms_lob.compare(:new.content,:old.content) != 0 or nvl(length(:new.content),0) != nvl(length(:old.content),0) then
            l_content_changed := 'Y';
        end if;
        if l_sequence_changed = 'Y' or l_title_changed = 'Y' or l_content_changed = 'Y' then
            insert into apex$_ws_webpg_section_history (section_id, ws_app_id, webpage_id, old_display_sequence, new_display_sequence,
            old_title, new_title, old_content, new_content, change_date, application_user_id)
            values (:new.id, :new.ws_app_id, :new.webpage_id,
                    decode(l_sequence_changed,'Y',:old.display_sequence,null), decode(l_sequence_changed,'Y',:new.display_sequence,null),
                    decode(l_title_changed,'Y',:old.title,null), decode(l_title_changed,'Y',:new.title,null),
                    decode(l_content_changed,'Y',:old.content,null), decode(l_content_changed,'Y',:new.content,null), sysdate, nvl(v('APP_USER'),user));
        end if;
    end if;
end;

/
ALTER TRIGGER  "APEX$_WS_WEBPG_SECTIONS_T1" ENABLE
/
CREATE OR REPLACE EDITIONABLE TRIGGER  "BI_ABCALLING" 
  before insert on "ABCALLING"               
  for each row  
begin   
  if :NEW."ID" is null then 
    select "ABCALLING_SEQ".nextval into :NEW."ID" from sys.dual; 
  end if; 
end; 

/
ALTER TRIGGER  "BI_ABCALLING" ENABLE
/
CREATE OR REPLACE EDITIONABLE TRIGGER  "BI_COUNTRY" 
  before insert on "COUNTRY"               
  for each row  
begin   
  if :NEW."COUNTRYID" is null then 
    select "COUNTRY_SEQ".nextval into :NEW."COUNTRYID" from sys.dual; 
  end if; 
end; 

/
ALTER TRIGGER  "BI_COUNTRY" ENABLE
/
CREATE OR REPLACE EDITIONABLE TRIGGER  "BI_CPN_DAT_HISTORY" 
  before insert on "CPN_DAT_HISTORY"               
  for each row  
begin   
  if :NEW."HISID" is null then 
    select "CPN_DAT_HISTORY_SEQ".nextval into :NEW."HISID" from sys.dual; 
  end if; 
end; 

/
ALTER TRIGGER  "BI_CPN_DAT_HISTORY" ENABLE
/
CREATE OR REPLACE EDITIONABLE TRIGGER  "BI_CPN_LAB_HISTORY" 
  before insert on "CPN_LAB_HISTORY"               
  for each row  
begin   
  if :NEW."HISID" is null then 
    select "CPN_LAB_HISTORY_SEQ".nextval into :NEW."HISID" from sys.dual; 
  end if; 
  
end; 

/
ALTER TRIGGER  "BI_CPN_LAB_HISTORY" ENABLE
/
CREATE OR REPLACE EDITIONABLE TRIGGER  "BI_CPN_USR_HISTORY" 
  before insert on "CPN_USR_HISTORY"               
  for each row  
begin   
  if :NEW."HISID" is null then 
    select "CPN_USR_HISTORY_SEQ".nextval into :NEW."HISID" from sys.dual; 
  end if; 
end; 

/
ALTER TRIGGER  "BI_CPN_USR_HISTORY" ENABLE
/
CREATE OR REPLACE EDITIONABLE TRIGGER  "BI_DAT_USR_HISTORY" 
  before insert on "DAT_USR_HISTORY"               
  for each row  
begin   
  if :NEW."HISID" is null then 
    select "DAT_USR_HISTORY_SEQ".nextval into :NEW."HISID" from sys.dual; 
  end if; 
end; 

/
ALTER TRIGGER  "BI_DAT_USR_HISTORY" ENABLE
/
CREATE OR REPLACE EDITIONABLE TRIGGER  "BI_EPITOPE_KEY" 
  before insert on "EPITOPE_KEY"               
  for each row  
begin   
  if :NEW."ID" is null then 
    select "EPITOPE_KEY_SEQ".nextval into :NEW."ID" from sys.dual; 
  end if; 
  if :new."EREPORTID" is null then
    select "EPITOPE_REPORT_SEQ".nextval into :new."EREPORTID" from sys.dual;
  end if;
  if :new."CALINFO1" is null then
    select "EPITOPE_CALINFO_SEQ".nextval into :new."CALINFO1" from sys.dual;
  end if;
  if :new."CALINFO2" is null then
    select "EPITOPE_CALINFO_SEQ".nextval into :new."CALINFO2" from sys.dual;
  end if;
  if :new."CONINFO1" is null then
    select "EPITIOE_CONINFO_SEQ".nextval into :new."CONINFO1" from sys.dual;
  end if;
  if :new."CONINFO2" is null then
    select "EPITIOE_CONINFO_SEQ".nextval into :new."CONINFO2" from sys.dual;
  end if;
  
  
end; 


/
ALTER TRIGGER  "BI_EPITOPE_KEY" ENABLE
/
CREATE OR REPLACE EDITIONABLE TRIGGER  "BI_ETHNICITY" 
  before insert on "ETHNICITY"               
  for each row  
begin   
  if :NEW."ETHID" is null then 
    select "ETHNICITY_SEQ".nextval into :NEW."ETHID" from sys.dual; 
  end if; 
end; 

/
ALTER TRIGGER  "BI_ETHNICITY" ENABLE
/
CREATE OR REPLACE EDITIONABLE TRIGGER  "BI_IHIW_LAB" 
  before insert on "IHIW_LAB"               
  for each row  
begin   
  if :NEW."LABID" is null then 
    select "IHIW_LAB_SEQ".nextval into :NEW."LABID" from sys.dual; 
  end if; 
   if :NEW."FTPPWD" is null then 
    select dbms_random.string('L', 9) into :NEW."FTPPWD" from sys.dual; 
  end if; 
end; 

/
ALTER TRIGGER  "BI_IHIW_LAB" ENABLE
/
CREATE OR REPLACE EDITIONABLE TRIGGER  "BI_IHIW_REPORT" 
  before insert on "IHIW_REPORT"               
  for each row  
begin   
  if :NEW."REPORTID" is null then 
    select "IHIW_REPORT_SEQ".nextval into :NEW."REPORTID" from sys.dual; 
  end if; 
  :new.create_by:=ihiw_authentication.getuserid(NVL(v('APP_USER'),USER));
  
end; 

/
ALTER TRIGGER  "BI_IHIW_REPORT" ENABLE
/
CREATE OR REPLACE EDITIONABLE TRIGGER  "BI_IHIW_ROLES" 
  before insert on "IHIW_ROLES"               
  for each row  
begin   
  if :NEW."ROLE_ID" is null then 
    select "IHIW_ROLES_SEQ".nextval into :NEW."ROLE_ID" from sys.dual; 
  end if; 
end; 

/
ALTER TRIGGER  "BI_IHIW_ROLES" ENABLE
/
CREATE OR REPLACE EDITIONABLE TRIGGER  "BI_LAB_HIS" 
BEFORE
insert on "LAB_HIS"
for each row
begin
 if :NEW."HISID" is null then 
    select "LAB_HIS_SEQ".nextval into :NEW."HISID" from sys.dual; 
  end if; 
end;

/
ALTER TRIGGER  "BI_LAB_HIS" ENABLE
/
CREATE OR REPLACE EDITIONABLE TRIGGER  "BI_NOVELPOLY" 
  before insert on "NOVELPOLY"               
  for each row  
begin   
  if :NEW."NOVID" is null then 
    select "NOVELPOLY_SEQ".nextval into :NEW."NOVID" from sys.dual; 
  end if; 
end; 

/
ALTER TRIGGER  "BI_NOVELPOLY" ENABLE
/
CREATE OR REPLACE EDITIONABLE TRIGGER  "BI_POPULATION" 
  before insert on "DATASET"               
  for each row  
begin   
  if :NEW."PPLID" is null then 
    select "POPULATION_SEQ".nextval into :NEW."PPLID" from sys.dual; 
  end if;
  :new.create_by:=ihiw_authentication.getuserid(NVL(v('APP_USER'),USER));
end; 

/
ALTER TRIGGER  "BI_POPULATION" ENABLE
/
CREATE OR REPLACE EDITIONABLE TRIGGER  "BI_PROCESS_CONSEQ" 
  before insert on "PROCESS_CONSEQ"               
  for each row  
begin   
  if :NEW."CONSEQ_ID" is null then 
    select "PROCESS_CONSEQ_SEQ".nextval into :NEW."CONSEQ_ID" from sys.dual; 
  end if; 
end; 

/
ALTER TRIGGER  "BI_PROCESS_CONSEQ" ENABLE
/
CREATE OR REPLACE EDITIONABLE TRIGGER  "BI_PROJECT" 
  before insert on "PROJECT"               
  for each row  
begin   
  if :NEW."CPNID" is null then 
    select "PROJECT_SEQ".nextval into :NEW."CPNID" from sys.dual; 
  end if; 
  :new.create_by:=ihiw_authentication.getuserid(NVL(v('APP_USER'),USER));
end; 

/
ALTER TRIGGER  "BI_PROJECT" ENABLE
/
CREATE OR REPLACE EDITIONABLE TRIGGER  "BI_RELATIVE" 
  before insert on "RELATIVE"               
  for each row  
begin   
  if :NEW."SAMID" is null then 
    select "SAMPLE_SEQ".nextval into :NEW."SAMID" from sys.dual; 
  end if; 
  :new.create_by:=ihiw_authentication.getuserid(NVL(v('APP_USER'),USER));
   :new.sublabid:=ihiw_authentication.getlabid(NVL(v('APP_USER'),USER));
end; 

/
ALTER TRIGGER  "BI_RELATIVE" ENABLE
/
CREATE OR REPLACE EDITIONABLE TRIGGER  "BI_SAMPLE" 
  before insert on "SAMPLE"               
  for each row  
begin   
  if :NEW."SAMID" is null then 
    select "SAMPLE_SEQ".nextval into :NEW."SAMID" from sys.dual; 
  end if; 
  :new.create_by:=ihiw_authentication.getuserid(NVL(v('APP_USER'),USER));
  if :NEW."SUBLABID" is null then
  	:new.sublabid:=ihiw_authentication.getlabid(NVL(v('APP_USER'),USER));
  end if;
end; 

/
ALTER TRIGGER  "BI_SAMPLE" ENABLE
/
CREATE OR REPLACE EDITIONABLE TRIGGER  "BI_SFTP_DATALOG" 
  before insert on "SFTP_DATALOG"               
  for each row  
begin   
  if :NEW."SDATAID" is null then 
    select "SFTP_DATALOG_SEQ".nextval into :NEW."SDATAID" from sys.dual; 
  end if; 
end; 

/
ALTER TRIGGER  "BI_SFTP_DATALOG" ENABLE
/
CREATE OR REPLACE EDITIONABLE TRIGGER  "BI_STATE" 
  before insert on "STATE"               
  for each row  
begin   
  if :NEW."STATE_ID" is null then 
    select "STATE_SEQ".nextval into :NEW."STATE_ID" from sys.dual; 
  end if; 
end; 

/
ALTER TRIGGER  "BI_STATE" ENABLE
/
CREATE OR REPLACE EDITIONABLE TRIGGER  "BI_TRANSPLANTATION" 
  before insert on "TRANSPLANTATION"               
  for each row  
begin   
  if :NEW."TRPID" is null then 
    select "TRANSPLANTATION_SEQ".nextval into :NEW."TRPID" from sys.dual; 
  end if; 
  :new.create_by:=ihiw_authentication.getuserid(NVL(v('APP_USER'),USER));
  :new.sublabid:=ihiw_authentication.getlabid(NVL(v('APP_USER'),USER));
  
end; 

/
ALTER TRIGGER  "BI_TRANSPLANTATION" ENABLE
/
CREATE OR REPLACE EDITIONABLE TRIGGER  "BI_TYPINGMETHOD" 
  before insert on "CODETABLE"               
  for each row  
begin   
  if :NEW."MTHID" is null then 
    select "TYPINGMETHOD_SEQ".nextval into :NEW."MTHID" from sys.dual; 
  end if; 
end; 

/
ALTER TRIGGER  "BI_TYPINGMETHOD" ENABLE
/
CREATE OR REPLACE EDITIONABLE TRIGGER  "COMPONENT_DATASET_T1" 
BEFORE
delete on "COMPONENT_DATASET"
for each row
begin
insert into cpn_dat_history(pplid,cpnid,create_by,modify_by,override,approved,delete_by) values
(:old.pplid,:old.cpnid,:old.create_by,:old.modify_by,:old.override,:old.approved,ihiw_authentication.getuserid(NVL(v('APP_USER'),USER)));  
end;

/
ALTER TRIGGER  "COMPONENT_DATASET_T1" ENABLE
/
CREATE OR REPLACE EDITIONABLE TRIGGER  "COMPONENT_DATASET_T2" 
BEFORE
update on "COMPONENT_DATASET"
for each row
begin
:new.modify_by := ihiw_authentication.getuserid(NVL(v('APP_USER'),USER));
:new.override:=ihiw_authentication.getrole(NVL(v('APP_USER'),USER));
:new.modify_time := sysdate;
insert into cpn_dat_history(pplid,cpnid,create_by,modify_by,override,approved) values
(:old.pplid,:old.cpnid,:old.create_by,:old.modify_by,:old.override,:old.approved);  
end;

/
ALTER TRIGGER  "COMPONENT_DATASET_T2" ENABLE
/
CREATE OR REPLACE EDITIONABLE TRIGGER  "COMPONENT_DATASET_T3" 
BEFORE
insert on "COMPONENT_DATASET"
for each row
begin
:new.create_by:=ihiw_authentication.getuserid(NVL(v('APP_USER'),USER));
:new.override:=ihiw_authentication.getrole(NVL(v('APP_USER'),USER));
end;

/
ALTER TRIGGER  "COMPONENT_DATASET_T3" ENABLE
/
CREATE OR REPLACE EDITIONABLE TRIGGER  "COMPONENT_LAB_MAIL" 
AFTER
update on "COMPONENT_LAB"
for each row
begin
mailtemplate.updatecpnlab(:new.labid,:new.cpnid,:new.valid,:new.approved,:new.reason,:new.modify_by);
end;

/
ALTER TRIGGER  "COMPONENT_LAB_MAIL" ENABLE
/
CREATE OR REPLACE EDITIONABLE TRIGGER  "COMPONENT_LAB_T1" 
BEFORE
insert on "COMPONENT_LAB"
for each row
begin
if :new.create_by is null then
:new.create_by:=ihiw_authentication.getuserid(NVL(v('APP_USER'),USER));
end if;
if :new.override is null then
/*:new.override:=ihiw_authentication.getrole(NVL(v('APP_USER'),USER));*/
:new.override:=2;
end if;
end;

/
ALTER TRIGGER  "COMPONENT_LAB_T1" ENABLE
/
CREATE OR REPLACE EDITIONABLE TRIGGER  "COMPONENT_LAB_T2" 
BEFORE
update on "COMPONENT_LAB"
for each row
begin
:new.modify_by := ihiw_authentication.getuserid(NVL(v('APP_USER'),USER));
:new.modify_time := sysdate;
:new.override:=ihiw_authentication.getrole(NVL(v('APP_USER'),USER));

insert into CPN_LAB_HISTORY (LABID,CPNID ,APPROVED ,REASON, OVERRIDE,CREATE_BY ,MODIFY_BY  ) 
                       values (:old.labid,:old.cpnid,:old.approved,:old.reason,:old.override,:old.create_by,:old.modify_by);
end;

/
ALTER TRIGGER  "COMPONENT_LAB_T2" ENABLE
/
CREATE OR REPLACE EDITIONABLE TRIGGER  "COMPONENT_LAB_T3" 
BEFORE
delete on "COMPONENT_LAB"
for each row
begin
insert into CPN_LAB_HISTORY (LABID,CPNID ,APPROVED ,REASON, OVERRIDE,CREATE_BY ,MODIFY_BY,delete_by  ) 
                       values (:old.labid,:old.cpnid,:old.approved,:old.reason,:old.override,:old.create_by,:old.modify_by, ihiw_authentication.getuserid(NVL(v('APP_USER'),USER)));
end;

/
ALTER TRIGGER  "COMPONENT_LAB_T3" ENABLE
/
CREATE OR REPLACE EDITIONABLE TRIGGER  "COMPONENT_USER_MAILPL" 
AFTER
insert or update on "COMPONENT_USER"
for each row
DECLARE
   v_count number;
   
begin
if :new.role=4 then

  select count(1) into v_count from component_lab  where labid=(select labid from ihiw_user where userid=:new.userid) and cpnid=:new.cpnid;
  IF v_count=0 THEN
      insert into component_lab (labid,cpnid,valid,approved,override) values ((select labid from ihiw_user where userid=:new.userid),:new.cpnid,'Y','Y',6);
  
  END IF;
  
    mailtemplate.newpleader(:new.userid,:new.cpnid,:new.create_by);
elsif (:new.role=5 or :new.role=3) and :new.approved is not null  then
  mailtemplate.updatecpnaff(:new.userid,:new.cpnid,:new.role,:new.approved,:new.reason,:new.modify_by);
end if;
end;

/
ALTER TRIGGER  "COMPONENT_USER_MAILPL" ENABLE
/
CREATE OR REPLACE EDITIONABLE TRIGGER  "COMPONENT_USER_T1" 
BEFORE
insert on "COMPONENT_USER"
for each row
begin
if :NEW.create_by is null then 
    :new.create_by:=ihiw_authentication.getuserid(NVL(v('APP_USER'),USER));
    :new.override:=ihiw_authentication.getrole(NVL(v('APP_USER'),USER));
end if;
end;

/
ALTER TRIGGER  "COMPONENT_USER_T1" ENABLE
/
CREATE OR REPLACE EDITIONABLE TRIGGER  "COMPONENT_USER_T2" 
BEFORE
update on "COMPONENT_USER"
for each row
begin
:new.modify_by := ihiw_authentication.getuserid(NVL(v('APP_USER'),USER));
:new.modify_time := sysdate;
:new.override:=NVL(v('USERROLE'),0);
insert into cpn_usr_history(userid,cpnid,create_by,modify_by,override,role,approved,reason) values
(:old.userid,:old.cpnid,:old.create_by,:old.modify_by,:old.override,:old.role,:old.approved,:old.reason);  
end;

/
ALTER TRIGGER  "COMPONENT_USER_T2" ENABLE
/
CREATE OR REPLACE EDITIONABLE TRIGGER  "COMPONENT_USER_T3" 
BEFORE
delete on "COMPONENT_USER"
for each row
begin
insert into cpn_usr_history(userid,cpnid,create_by,modify_by,override,role,approved,reason,delete_by) values
(:old.userid,:old.cpnid,:old.create_by,:old.modify_by,:old.override,:old.role,:old.approved,:old.reason,ihiw_authentication.getuserid(NVL(v('APP_USER'),USER)));  
end;

/
ALTER TRIGGER  "COMPONENT_USER_T3" ENABLE
/
CREATE OR REPLACE EDITIONABLE TRIGGER  "DATASET_T2" 
BEFORE
update on "DATASET"
for each row
begin
:new.modify_by := ihiw_authentication.getuserid(NVL(v('APP_USER'),USER));
:new.modify_time := sysdate;
end;

/
ALTER TRIGGER  "DATASET_T2" ENABLE
/
CREATE OR REPLACE EDITIONABLE TRIGGER  "DATASET_USER_T1" 
BEFORE
insert on "DATASET_USER"
for each row
begin
:new.create_by:=ihiw_authentication.getuserid(NVL(v('APP_USER'),USER));
:new.override:=NVL(v('USERROLE'),0);
end;

/
ALTER TRIGGER  "DATASET_USER_T1" ENABLE
/
CREATE OR REPLACE EDITIONABLE TRIGGER  "DATASET_USER_T2" 
BEFORE
update on "DATASET_USER"
for each row
begin
:new.modify_by := ihiw_authentication.getuserid(NVL(v('APP_USER'),USER));
:new.modify_time := sysdate;
:new.override:=NVL(v('USERROLE'),0);
insert into dat_usr_history(pplid,userid,create_by,modify_by,override) values
(:old.pplid,:old.userid,:old.create_by,:old.modify_by,:old.override);  
end;

/
ALTER TRIGGER  "DATASET_USER_T2" ENABLE
/
CREATE OR REPLACE EDITIONABLE TRIGGER  "DATASET_USER_T3" 
BEFORE
delete on "DATASET_USER"
for each row
begin
insert into dat_usr_history(pplid,userid,create_by,modify_by,override,delete_by) values
(:old.pplid,:old.userid,:old.create_by,:old.modify_by,:old.override,ihiw_authentication.getuserid(NVL(v('APP_USER'),USER))); 
end;

/
ALTER TRIGGER  "DATASET_USER_T3" ENABLE
/
CREATE OR REPLACE EDITIONABLE TRIGGER  "EPI_SAMPLE_INFO_T1" 
BEFORE
update on "EPI_SAMPLE_INFO"
for each row
begin
:new.modify_by := ihiw_authentication.getuserid(NVL(v('APP_USER'),USER));
:new.modify_time := sysdate;
end;

/
ALTER TRIGGER  "EPI_SAMPLE_INFO_T1" ENABLE
/
CREATE OR REPLACE EDITIONABLE TRIGGER  "FEATURECOORDINATE_T1" 
BEFORE
insert on "FEATURECOORDINATE"
for each row
begin
:new.create_by:=ihiw_authentication.getuserid(NVL(v('APP_USER'),USER));
if :new.feature_uk is null then
   
        :new.feature_uk:=:new.locus || '_' || :new.featurenumber; 

end if;
end;

/
ALTER TRIGGER  "FEATURECOORDINATE_T1" ENABLE
/
CREATE OR REPLACE EDITIONABLE TRIGGER  "FEATURECOORDINATE_T2" 
BEFORE
update on "FEATURECOORDINATE"
for each row
begin
:new.modify_by:=ihiw_authentication.getuserid(NVL(v('APP_USER'),USER));
:new.modify_time:=sysdate;
if :new.feature_uk is null then
   
        :new.feature_uk:=:new.locus || '_' || :new.featurenumber; 

end if;
end;

/
ALTER TRIGGER  "FEATURECOORDINATE_T2" ENABLE
/
CREATE OR REPLACE EDITIONABLE TRIGGER  "FUSION_DATA2_T1" 
BEFORE
insert on "FUSION_DATA2"
for each row
begin
:new.samid:=id2number(regexp_substr(:new.sampleid,'^[^_]+'));
:new.testdate:=to_number(regexp_substr(:new.sampleid,'[^_]+$')); 
if :NEW.labid is null then 
:new.labid:=ihiw_authentication.getlabid();
end if;
end;

/
ALTER TRIGGER  "FUSION_DATA2_T1" ENABLE
/
CREATE OR REPLACE EDITIONABLE TRIGGER  "FUSION_PROFILE2_T1" 
BEFORE
insert on "FUSION_PROFILE2"
for each row
begin
:new.samid:=id2number(regexp_substr(:new.sampleid,'^[^_]+'));
:new.testdate:=to_number(regexp_substr(:new.sampleid,'[^_]+$')); 
if :NEW.labid is null then 
:new.labid:=ihiw_authentication.getlabid();
end if;
end;

/
ALTER TRIGGER  "FUSION_PROFILE2_T1" ENABLE
/
CREATE OR REPLACE EDITIONABLE TRIGGER  "GENOTYPEANNOTATION_T1" 
BEFORE
insert on "GENOTYPEANNOTATION"
for each row
begin
:new.create_by:=ihiw_authentication.getuserid(NVL(v('APP_USER'),USER));
end;

/
ALTER TRIGGER  "GENOTYPEANNOTATION_T1" ENABLE
/
CREATE OR REPLACE EDITIONABLE TRIGGER  "GENOTYPEANNOTATION_T2" 
BEFORE
update on "GENOTYPEANNOTATION"
for each row
begin
:new.modify_by:=ihiw_authentication.getuserid(NVL(v('APP_USER'),USER));
:new.modify_time:=sysdate;
end;

/
ALTER TRIGGER  "GENOTYPEANNOTATION_T2" ENABLE
/
CREATE OR REPLACE EDITIONABLE TRIGGER  "IHIW_LAB_T1" 
AFTER
update or delete on "IHIW_LAB"
for each row
begin
insert into lab_his(LABID,LABCODE,TITLE,FIRSTNAME,LASTNAME,DIRECTOR,DEPARTMENT,INSTITUTION,ADDRESS1,ADDRESS2,SADDRESS1,SADDRESS2,CITY,STATE,ZIP,COUNTRY,PHONE,FAX,EMAIL,URL,OLD_LABCODE) values
(:old.LABID,:old.LABCODE,:old.TITLE,:old.FIRSTNAME,:old.LASTNAME,:old.DIRECTOR,:old.DEPARTMENT,:old.INSTITUTION,:old.ADDRESS1,:old.ADDRESS2,:old.SADDRESS1,:old.SADDRESS2,:old.CITY,:old.STATE,:old.ZIP,:old.COUNTRY,:old.PHONE,:old.FAX,:old.EMAIL,:old.URL,:old.OLD_LABCODE); 
end;

/
ALTER TRIGGER  "IHIW_LAB_T1" ENABLE
/
CREATE OR REPLACE EDITIONABLE TRIGGER  "IHIW_REPORT_T1" 
AFTER
insert on "IHIW_REPORT"
for each row
begin
insert into xmlfile (reportid,create_by) values (:NEW.REPORTID,:NEW.CREATE_BY);
end;

/
ALTER TRIGGER  "IHIW_REPORT_T1" ENABLE
/
CREATE OR REPLACE EDITIONABLE TRIGGER  "IHIW_REPORT_T2" 
BEFORE
update on "IHIW_REPORT"
for each row
begin
:new.modify_by := ihiw_authentication.getuserid(NVL(v('APP_USER'),USER));
:new.modify_time := sysdate;
end;

/
ALTER TRIGGER  "IHIW_REPORT_T2" ENABLE
/
CREATE OR REPLACE EDITIONABLE TRIGGER  "IHIW_USER_PW_T1" 
BEFORE
insert or update on "IHIW_USER"
for each row
begin
if :old.password != :new.password then
    :new.password := IHIW_AUTHENTICATION.obfuscate(:new.password);
end if;
if :NEW.userid is null then 
    select IHIW_USER_SEQ.nextval into :NEW.userid from sys.dual; 
    :new.password := IHIW_AUTHENTICATION.obfuscate(:new.password);   
  end if; 
end;

/
ALTER TRIGGER  "IHIW_USER_PW_T1" ENABLE
/
CREATE OR REPLACE EDITIONABLE TRIGGER  "PEDIGREE_T1" 
BEFORE
update on "PEDIGREE"
for each row
begin
:new.modify_by := ihiw_authentication.getuserid(NVL(v('APP_USER'),USER));
:new.modify_time := sysdate;
end;

/
ALTER TRIGGER  "PEDIGREE_T1" ENABLE
/
CREATE OR REPLACE EDITIONABLE TRIGGER  "PED_IMPORT_T1" 
BEFORE
insert on "PED_IMPORT"
for each row
begin
:new.create_by := ihiw_authentication.getuserid(NVL(v('APP_USER'),USER));
end;

/
ALTER TRIGGER  "PED_IMPORT_T1" ENABLE
/
CREATE OR REPLACE EDITIONABLE TRIGGER  "PROJECT_MODIFY_BY" 
BEFORE
update on "PROJECT"
for each row
begin
:new.modify_by := ihiw_authentication.getuserid(NVL(v('APP_USER'),USER));
:new.modify_time := sysdate;
end;

/
ALTER TRIGGER  "PROJECT_MODIFY_BY" ENABLE
/
CREATE OR REPLACE EDITIONABLE TRIGGER  "RELATIVE_T2" 
BEFORE
update on "RELATIVE"
for each row
begin
:new.modify_by := ihiw_authentication.getuserid(NVL(v('APP_USER'),USER));
:new.modify_time := sysdate;
end;

/
ALTER TRIGGER  "RELATIVE_T2" ENABLE
/
CREATE OR REPLACE EDITIONABLE TRIGGER  "REPORT_HARDWARE_MD" 
AFTER
insert or update  on "REPORT_HARDWARE"
for each row
begin
UPDATE ihiw_report set modify_by=ihiw_authentication.getuserid(NVL(v('APP_USER'),USER)),modify_time=sysdate where reportid=:new.reportid;
end;

/
ALTER TRIGGER  "REPORT_HARDWARE_MD" ENABLE
/
CREATE OR REPLACE EDITIONABLE TRIGGER  "REPORT_HARDWARE_T1" 
BEFORE
insert on "REPORT_HARDWARE"
for each row
begin
:new.create_by:=ihiw_authentication.getuserid(NVL(v('APP_USER'),USER));
end;

/
ALTER TRIGGER  "REPORT_HARDWARE_T1" ENABLE
/
CREATE OR REPLACE EDITIONABLE TRIGGER  "REPORT_HARDWARE_T2" 
BEFORE
update on "REPORT_HARDWARE"
for each row
begin
:new.modify_by := ihiw_authentication.getuserid(NVL(v('APP_USER'),USER));
:new.modify_time := sysdate;

end;

/
ALTER TRIGGER  "REPORT_HARDWARE_T2" ENABLE
/
CREATE OR REPLACE EDITIONABLE TRIGGER  "REPORT_REAGENT_T1" 
BEFORE
update on "REPORT_REAGENT"
for each row
begin
:new.modify_by := ihiw_authentication.getuserid(NVL(v('APP_USER'),USER));
:new.modify_time := sysdate;
end;

/
ALTER TRIGGER  "REPORT_REAGENT_T1" ENABLE
/
CREATE OR REPLACE EDITIONABLE TRIGGER  "REPORT_REAGENT_T2" 
BEFORE
insert on "REPORT_REAGENT"
for each row
begin
:new.create_by:=ihiw_authentication.getuserid(NVL(v('APP_USER'),USER));
end;

/
ALTER TRIGGER  "REPORT_REAGENT_T2" ENABLE
/
CREATE OR REPLACE EDITIONABLE TRIGGER  "REPORT_REAGENT_T3" 
AFTER
insert or update  on "REPORT_REAGENT"
for each row
begin
UPDATE ihiw_report set modify_by=ihiw_authentication.getuserid(NVL(v('APP_USER'),USER)),modify_time=sysdate where reportid=:new.reportid;
end;

/
ALTER TRIGGER  "REPORT_REAGENT_T3" ENABLE
/
CREATE OR REPLACE EDITIONABLE TRIGGER  "REPORT_SAMPLE_MD" 
AFTER
insert or update  on "REPORT_SAMPLE"
for each row
begin
UPDATE ihiw_report set modify_by=ihiw_authentication.getuserid(NVL(v('APP_USER'),USER)),modify_time=sysdate where reportid=:new.reportid;
end;

/
ALTER TRIGGER  "REPORT_SAMPLE_MD" ENABLE
/
CREATE OR REPLACE EDITIONABLE TRIGGER  "REPORT_SAMPLE_T1" 
BEFORE
insert  on "REPORT_SAMPLE"
for each row
begin
:new.create_by:=ihiw_authentication.getuserid(NVL(v('APP_USER'),USER));
end;

/
ALTER TRIGGER  "REPORT_SAMPLE_T1" ENABLE
/
CREATE OR REPLACE EDITIONABLE TRIGGER  "REPORT_SAMPLE_T2" 
BEFORE
update on "REPORT_SAMPLE"
for each row
begin
:new.modify_by := ihiw_authentication.getuserid(NVL(v('APP_USER'),USER));
:new.modify_time := sysdate;
end;

/
ALTER TRIGGER  "REPORT_SAMPLE_T2" ENABLE
/
CREATE OR REPLACE EDITIONABLE TRIGGER  "REPORT_SOFTWARE_MD" 
AFTER
insert or update  on "REPORT_SOFTWARE"
for each row
begin
UPDATE ihiw_report set modify_by=ihiw_authentication.getuserid(NVL(v('APP_USER'),USER)),modify_time=sysdate where reportid=:new.reportid;
end;

/
ALTER TRIGGER  "REPORT_SOFTWARE_MD" ENABLE
/
CREATE OR REPLACE EDITIONABLE TRIGGER  "REPORT_SOFTWARE_T1" 
BEFORE
insert on "REPORT_SOFTWARE"
for each row
begin
:new.create_by:=ihiw_authentication.getuserid(NVL(v('APP_USER'),USER));
end;

/
ALTER TRIGGER  "REPORT_SOFTWARE_T1" ENABLE
/
CREATE OR REPLACE EDITIONABLE TRIGGER  "REPORT_SOFTWARE_T2" 
BEFORE
update on "REPORT_SOFTWARE"
for each row
begin
:new.modify_by := ihiw_authentication.getuserid(NVL(v('APP_USER'),USER));
:new.modify_time := sysdate;
end;

/
ALTER TRIGGER  "REPORT_SOFTWARE_T2" ENABLE
/
CREATE OR REPLACE EDITIONABLE TRIGGER  "SAMPLE_T1" 
AFTER
delete on "SAMPLE"
for each row
begin
insert into delete_sample (LABID,NAME,SAMID,DELETE_TIME,DELETE_BY) values (:OLD.SUBLABID,:OLD.NAME,:OLD.SAMID,SYSDATE,ihiw_authentication.getuserid());
end;

/
ALTER TRIGGER  "SAMPLE_T1" ENABLE
/
CREATE OR REPLACE EDITIONABLE TRIGGER  "SAMPLE_T2" 
BEFORE
update on "SAMPLE"
for each row
begin
:new.modify_by := ihiw_authentication.getuserid(NVL(v('APP_USER'),USER));
:new.modify_time := sysdate;
end;

/
ALTER TRIGGER  "SAMPLE_T2" ENABLE
/
CREATE OR REPLACE EDITIONABLE TRIGGER  "SAMPLE_TYPING_MD" 
AFTER
insert or update on "SAMPLE_TYPING"
for each row
begin
UPDATE ihiw_report set modify_by=ihiw_authentication.getuserid(NVL(v('APP_USER'),USER)),modify_time=sysdate where reportid=:new.reportid;
delete from novelpoly where CONSEQ_ID=:new.CONSEQ_ID;
end;

/
ALTER TRIGGER  "SAMPLE_TYPING_MD" ENABLE
/
CREATE OR REPLACE EDITIONABLE TRIGGER  "SAMPLE_TYPING_T1" 
BEFORE
insert on "SAMPLE_TYPING"
for each row
begin
:new.create_by:=ihiw_authentication.getuserid(NVL(v('APP_USER'),USER));
if :NEW."CONSEQ_ID" is null then 
    select "PROCESS_CONSEQ_SEQ".nextval into :NEW."CONSEQ_ID" from sys.dual; 
  end if; 
if :new.uk_loc is null then
    if :new.SPOSITION is null then
        :new.uk_loc:=:new.hlatyping || '_' || :new.featurenumber || '_' || :new.PHASINGGROUP;
    else
        :new.uk_loc:=:new.hlatyping || '_' || :new.SPOSITION || '_' || :new.PHASINGGROUP;
    end if;
end if;
end;

/
ALTER TRIGGER  "SAMPLE_TYPING_T1" ENABLE
/
CREATE OR REPLACE EDITIONABLE TRIGGER  "SAMPLE_TYPING_T2" 
BEFORE
update on "SAMPLE_TYPING"
for each row
begin
:new.modify_by := ihiw_authentication.getuserid(NVL(v('APP_USER'),USER));
:new.modify_time := sysdate;
if :old.processed=:new.processed  then
	:new.processed := 'N';
	delete from novelpoly where CONSEQ_ID=:new.CONSEQ_ID;
end if;
if :new.uk_loc is null then
    if :new.SPOSITION is null then
        :new.uk_loc:=:new.hlatyping || '_' || :new.featurenumber || '_' || :new.PHASINGGROUP;
    else
        :new.uk_loc:=:new.hlatyping || '_' || :new.SPOSITION || '_' || :new.PHASINGGROUP;
    end if;
end if;
end;

/
ALTER TRIGGER  "SAMPLE_TYPING_T2" ENABLE
/
CREATE OR REPLACE EDITIONABLE TRIGGER  "SFTP_DATALOG_T1" 
AFTER
insert or update or delete on "SFTP_DATALOG"
for each row
begin
apex_util.set_security_group_id (p_security_group_id => 1712374711753854);

mailtemplate.newlog(:new.folder,:new.result);
end;

/
ALTER TRIGGER  "SFTP_DATALOG_T1" ENABLE
/
CREATE OR REPLACE EDITIONABLE TRIGGER  "TMP_XML_INFO_T1" 
BEFORE
insert on "TMP_XML_INFO"
for each row
begin
 if :NEW."REPORTID" is null then 
    select "IHIW_REPORT_SEQ".nextval into :NEW."REPORTID" from sys.dual; 
  end if;
end;

/
ALTER TRIGGER  "TMP_XML_INFO_T1" ENABLE
/
CREATE OR REPLACE EDITIONABLE TRIGGER  "TRANSPLANTATION_T1" 
BEFORE
update on "TRANSPLANTATION"
for each row
begin


:new.modify_by := ihiw_authentication.getuserid(NVL(v('APP_USER'),USER));
:new.modify_time := sysdate;

if :new.donor_gl not like :old.donor_gl or :new.recipient_gl not like :old.recipient_gl then

delete_triplet(:new.TRP_CODE);

end if;

end;

/
ALTER TRIGGER  "TRANSPLANTATION_T1" ENABLE
/
CREATE OR REPLACE EDITIONABLE TRIGGER  "bi_DUPLICATED_DEUWAG" 
  before insert on "DUPLICATED_DEUWAG"              
  for each row 
begin  
  if :new."ID" is null then
    select "DUPLICATED_DEUWAG_SEQ".nextval into :new."ID" from sys.dual;
  end if;
end;

/
ALTER TRIGGER  "bi_DUPLICATED_DEUWAG" ENABLE
/
CREATE OR REPLACE EDITIONABLE TRIGGER  "bi_EPITIOE_CONINFO" 
  before insert on "EPITOPE_CONINFO"              
  for each row 
begin  
  if :new."EPITOPE_CONID" is null then
    select "EPITIOE_CONINFO_SEQ".nextval into :new."EPITOPE_CONID" from sys.dual;
  end if;
end;

/
ALTER TRIGGER  "bi_EPITIOE_CONINFO" ENABLE
/
CREATE OR REPLACE EDITIONABLE TRIGGER  "bi_EPITIOE_RAW" 
  before insert on "EPITOPE_RAW"              
  for each row 
begin  
  if :new."ID" is null then
    select "EPITIOE_RAW_SEQ".nextval into :new."ID" from sys.dual;
  end if;
end;

/
ALTER TRIGGER  "bi_EPITIOE_RAW" ENABLE
/
CREATE OR REPLACE EDITIONABLE TRIGGER  "bi_EPITOPE_CALINFO" 
  before insert on "EPITOPE_CALINFO"              
  for each row 
begin  
  if :new."EPITOPE_CALID" is null then
    select "EPITOPE_CALINFO_SEQ".nextval into :new."EPITOPE_CALID" from sys.dual;
  end if;
end;

/
ALTER TRIGGER  "bi_EPITOPE_CALINFO" ENABLE
/
CREATE OR REPLACE EDITIONABLE TRIGGER  "bi_EPITOPE_REPORT" 
  before insert on "EPITOPE_REPORT"              
  for each row 
begin  
  if :new."EREPORTID" is null then
    select "EPITOPE_REPORT_SEQ".nextval into :new."EREPORTID" from sys.dual;
  end if;
  
  if :new."CREATE_TIME" is null then
    select sysdate into :new."CREATE_TIME" from sys.dual;
  end if;
end;

/
ALTER TRIGGER  "bi_EPITOPE_REPORT" ENABLE
/
CREATE OR REPLACE EDITIONABLE TRIGGER  "bi_EPITOPE_TRIPLET" 
  before insert on "EPITOPE_TRIPLET"              
  for each row 
begin  
  if :new."ID" is null then
    select "EPITOPE_TRIPLET_SEQ".nextval into :new."ID" from sys.dual;
  end if;
end;

/
ALTER TRIGGER  "bi_EPITOPE_TRIPLET" ENABLE
/
CREATE OR REPLACE EDITIONABLE TRIGGER  "bi_EPI_SAMPLE_INFO" 
  before insert on "EPI_SAMPLE_INFO"              
  for each row 
begin  
   :new.create_by:=ihiw_authentication.getuserid(NVL(v('APP_USER'),USER));
   :new.labid:=ihiw_authentication.getlabid();
end;

/
ALTER TRIGGER  "bi_EPI_SAMPLE_INFO" ENABLE
/
CREATE OR REPLACE EDITIONABLE TRIGGER  "bi_FUSION_DATA" 
  before insert on "FUSION_DATA"              
  for each row 
begin  
  if :new."ID" is null then
    select "FUSION_DATA_SEQ".nextval into :new."ID" from sys.dual;
  end if;
end;

/
ALTER TRIGGER  "bi_FUSION_DATA" ENABLE
/
CREATE OR REPLACE EDITIONABLE TRIGGER  "bi_FUSION_PROFILE" 
  before insert on "FUSION_PROFILE"              
  for each row 
begin  
  if :new."ID" is null then
    select "FUSION_PROFILE_SEQ".nextval into :new."ID" from sys.dual;
  end if;
end;

/
ALTER TRIGGER  "bi_FUSION_PROFILE" ENABLE
/
CREATE OR REPLACE EDITIONABLE TRIGGER  "bi_LARGEDATA" 
  before insert on "LARGEDATA"              
  for each row 
begin  
  if :new."ID" is null then
    select "LARGEDATA_SEQ".nextval into :new."ID" from sys.dual;
  end if;
end;

/
ALTER TRIGGER  "bi_LARGEDATA" ENABLE
/
CREATE OR REPLACE EDITIONABLE TRIGGER  "bi_LARGESAMPLETMP" 
  before insert on "LARGESAMPLETMP"              
  for each row 
begin  
  if :new."ID" is null then
    select "LARGESAMPLETMP_SEQ".nextval into :new."ID" from sys.dual;
  end if;
end;

/
ALTER TRIGGER  "bi_LARGESAMPLETMP" ENABLE
/
CREATE OR REPLACE EDITIONABLE TRIGGER  "bi_REFERENCE_ALLELES" 
  before insert on "REFERENCE_ALLELES"              
  for each row 
begin  
  if :new."ID" is null then
    select "REFERENCE_ALLELES_SEQ".nextval into :new."ID" from sys.dual;
  end if;
end;

/
ALTER TRIGGER  "bi_REFERENCE_ALLELES" ENABLE
/
CREATE OR REPLACE EDITIONABLE TRIGGER  "bi_REFERENCE_CATEGORIES" 
  before insert on "REFERENCE_CATEGORIES"              
  for each row 
begin  
  if :new."ID" is null then
    select "REFERENCE_CATEGORIES_SEQ".nextval into :new."ID" from sys.dual;
  end if;
end;

/
ALTER TRIGGER  "bi_REFERENCE_CATEGORIES" ENABLE
/
CREATE OR REPLACE EDITIONABLE TRIGGER  "bi_TMP_NMDP" 
  before insert on "TMP_NMDP"              
  for each row 
begin  
  if :new."ID" is null then
    select "TMP_NMDP_SEQ".nextval into :new."ID" from sys.dual;
  end if;
end;

/
ALTER TRIGGER  "bi_TMP_NMDP" ENABLE
/
CREATE OR REPLACE FORCE EDITIONABLE VIEW  "XML_HARDWARE" ("REPORTID", "LABCODE", "LAB_DEFINED_ID", "INSTRUMENT_FIRMWARE", "INSTRUMENT_MODEL_NUMBER", "INSTRUMENT_NAME", "MANUFACTURER", "TYPING_METHOD") AS 
  select x.reportid, lab.labcode,lab.Lab_defined_ID, labha.Instrument_Firmware, labha.Instrument_Model_Number, labha.Instrument_name, labha.Manufacturer,labha.Typing_Method from xmlfile x ,
XMLTable('/IHIW_Report/Lab' PASSING XMLType(x.xml,1)
                  COLUMNS
                    labcode    VARCHAR2(30) PATH '@LabCode',
                    Lab_defined_ID    VARCHAR2(30) PATH '@Lab_defined_ID',
                    HA  XMLType      PATH 'Hardware_Used') lab,
XMLTable('/Hardware_Used' PASSING lab.HA
                  COLUMNS
                    Instrument_Firmware    VARCHAR2(60) PATH '@Instrument_Firmware',
                    Instrument_Model_Number    VARCHAR2(60) PATH '@Instrument_Model_Number',
                    Instrument_name    VARCHAR2(40) PATH '@Instrument_name',
                    Manufacturer    VARCHAR2(60) PATH '@Manufacturer',
                     Typing_Method    VARCHAR2(80) PATH '@Typing_Method'
) labha  where nvl(x.ishml,'N')='N' AND X.XML IS NOT NULL
/
CREATE OR REPLACE FORCE EDITIONABLE VIEW  "XML_INFO" ("REPORTID", "LABCODE", "LAB_DEFINED_ID") AS 
  select x.reportid, lab.labcode,lab.Lab_defined_ID
from xmlfile x ,
XMLTable('/IHIW_Report/Lab' PASSING XMLType(x.xml,1)
                  COLUMNS
                    labcode    VARCHAR2(50) PATH '@LabCode',
                    Lab_defined_ID    VARCHAR2(50) PATH '@Lab_defined_ID') lab where nvl(x.ishml,'N')='N' AND X.XML IS NOT NULL
/
CREATE OR REPLACE FORCE EDITIONABLE VIEW  "XML_INFO_V" ("REPORTID", "LABCODE", "LAB_DEFINED_ID", "CODE_VALID", "ID_VALID") AS 
  select xi."REPORTID",xi."LABCODE",xi."LAB_DEFINED_ID",(CASE xi.labcode WHEN il.labcode
            THEN 'Y'
            ELSE 'N' END) code_valid, (CASE when ir2.reportid is NULL then 'Y' else 'N' END) id_valid
from xml_info_t xi left join ihiw_report ir on xi.reportid=ir.reportid left join ihiw_lab il on ir.labid=il.labid 
left join ihiw_report ir2 on ir2.labid=ir.labid and xi.lab_defined_id=ir2.lab_define_id and ir.reportid!=ir2.reportid
/
CREATE OR REPLACE FORCE EDITIONABLE VIEW  "XML_SAMPLE" ("REPORTID", "LABCODE", "LAB_DEFINED_ID", "SAMPLEID", "GENOTYPE_GL", "ORIGINAL_GL") AS 
  select x.reportid, lab.labcode,lab.Lab_defined_ID, labsample.SampleID,labsample.Genotype_GL,labsample.Original_GL from xmlfile x,
XMLTable('/IHIW_Report/Lab' PASSING XMLType(x.xml,1)
                  COLUMNS
                    labcode    VARCHAR2(50) PATH '@LabCode',
                    Lab_defined_ID    VARCHAR2(50) PATH '@Lab_defined_ID',
                    sample  XMLType      PATH 'Sample') lab,
XMLTable('/Sample' PASSING lab.sample
                  COLUMNS
                    SampleID    VARCHAR2(60) PATH '@SampleID',
		            Original_GL     VARCHAR2(32767) PATH 'Genotyping/@Original_GL',
                    Genotype_GL     VARCHAR2(32767) PATH 'Genotyping/@Genotype_GL') labsample                   
                    
                    
                    where nvl(x.ishml,'N')='N' and x.xml is not null
/
CREATE OR REPLACE FORCE EDITIONABLE VIEW  "XML_SAMPLE_TYPING" ("REPORTID", "LABCODE", "LAB_DEFINED_ID", "SAMPLEID", "HLATYPING", "ALIGN_REF_DB", "BC_REF_DB", "CON_SEQ", "FEATURE", "LOCUS_NAME", "MEANREADDEPTH", "DATAFILELOC", "PHASINGGROUP", "SPOSITION", "NOVELPOLYMORPHISM", "GENOTYPEANNOTATION", "FEATURENUMBER") AS 
  select x.reportid, lab.labcode,lab.Lab_defined_ID, labsample.SampleID, salocus.HLATyping, salocus.ALIGN_REF_DB, salocus.BC_REF_DB,salocus.CON_SEQ, salocus.Feature ,salocus.Locus_name, 
  salocus.MeanReadDepth, salocus.DataFileLoc ,salocus.PhasingGroup,salocus.Sposition, salocus.NovelPolymorphism ,
  salocus.GenotypeAnnotation, salocus.FeatureNumber
from xmlfile x,
XMLTable('/IHIW_Report/Lab' PASSING XMLType(x.xml,1)
                  COLUMNS
                    labcode    VARCHAR2(50) PATH '@LabCode',
                    Lab_defined_ID    VARCHAR2(50) PATH '@Lab_defined_ID',
                    sample  XMLType      PATH 'Sample') lab,
XMLTable('/Sample' PASSING lab.sample
                  COLUMNS
                    SampleID    VARCHAR2(60) PATH '@SampleID',
                    Locus     xmltype PATH 'Genotyping/Locus') labsample,
XMLTable('/Locus' PASSING labsample.Locus
                  COLUMNS
                    HLATyping    VARCHAR2(80) PATH '@HLATyping',
                    ALIGN_REF_DB    VARCHAR2(100) PATH '@Alignment_Reference_DB',
                    BC_REF_DB    VARCHAR2(100) PATH '@AlleleCalling_Reference_DB',
                    CON_SEQ    clob PATH '@Consensus_Sequence',
                    Feature    VARCHAR2(80) PATH '@Feature',
                    Locus_name    VARCHAR2(30) PATH '@Locus_name',
                    MeanReadDepth    VARCHAR2(10) PATH '@MeanReadDepth',
                    DataFileLoc    VARCHAR2(300) PATH '@DataFileLoc',
                    Sposition    number PATH '@Start_Position',
                    PhasingGroup    number PATH '@PhasingGroup',
                    NovelPolymorphism    clob PATH '@NovelPolymorphism',
                    GenotypeAnnotation  VARCHAR2(300) PATH '@GenotypeAnnotation',
                     FeatureNumber  VARCHAR2(300) PATH '@FeatureNumber'
                   ) salocus  where nvl(x.ishml,'N')='N' AND X.XML IS NOT NULL
/
CREATE OR REPLACE FORCE EDITIONABLE VIEW  "XML_SAMPLE_TYPING_V" ("REPORTID", "LABCODE", "LAB_DEFINED_ID", "SAMPLEID", "HLATYPING", "ALIGN_REF_DB", "BC_REF_DB", "CON_SEQ", "FEATURE", "LOCUS_NAME", "MEANREADDEPTH", "DATAFILELOC", "PHASINGGROUP", "SPOSITION", "NOVELPOLYMORPHISM", "FEATURENUMBER", "FEATUREID", "LOCUSID", "SAMID", "FEATURE_VALID", "LOCUS_VALID", "SAMPLE_VALID", "DEPTH_VALID", "PHASE_VALID", "HLA_VALID") AS 
  select xst."REPORTID",xst."LABCODE",xst."LAB_DEFINED_ID",xst."SAMPLEID",xst."HLATYPING",xst."ALIGN_REF_DB",xst."BC_REF_DB",xst."CON_SEQ",xst."FEATURE",xst."LOCUS_NAME",xst."MEANREADDEPTH",xst."DATAFILELOC",xst."PHASINGGROUP",xst."SPOSITION", xst."NOVELPOLYMORPHISM",xst."FEATURENUMBER", ct.mthid featureid,ct2.mthid locusid,s.samid,
      (case when ct.mthid is null then 'N' else 'Y' end) feature_valid,
      (case when ct2.mthid is null then 'N' else 'Y' end) locus_valid,
      (case when s.samid is null then 'N' else 'Y' end) sample_valid,
      to_char(is_number(xst.MEANREADDEPTH)) depth_valid,
      to_char(is_number(xst.PHASINGGROUP)) phase_valid,
      'Y' hla_valid
    /*  (case when s.GENOTYPE_GL like '%'||xst.hlatyping||'%' then 'Y' else 'N' end) hla_valid*/
from xml_sample_typing_t  xst 
left join codetable ct on xst.feature like ct.name and ct.typeid=4 
left join codetable ct2 on xst.locus_name like ct2.name and ct2.typeid=5
left join ihiw_lab il on xst.labcode like il.labcode
left join xml_sample_v s on s.sampleid like xst.sampleid and s.reportid=xst.reportid
/
CREATE OR REPLACE FORCE EDITIONABLE VIEW  "XML_SAMPLE_V" ("REPORTID", "LABCODE", "LAB_DEFINED_ID", "SAMPLEID", "GENOTYPE_GL", "ORIGINAL_GL", "SAMPLE_VALID", "SAMID") AS 
  select xs."REPORTID",xs."LABCODE",xs."LAB_DEFINED_ID",xs."SAMPLEID",xs."GENOTYPE_GL",xs."ORIGINAL_GL", (case when s.name is null then 'N' else 'Y' end) sample_valid,
  s.samid
  from xml_sample_T xs 
left join ihiw_lab il on xs.labcode like il.labcode 
left join sample s on s.samid=id2number(xs.sampleid)
/
CREATE OR REPLACE FORCE EDITIONABLE VIEW  "DATASHARE1" ("PPLID", "USERID") AS 
  select d.pplid,c.userid from dataset d, component_user c where d.cpnid=c.cpnid and role=6
/
CREATE OR REPLACE FORCE EDITIONABLE VIEW  "DATASHARE5" ("PPLID", "USERID") AS 
  select d.pplid,c.userid from dataset d, component_user c where d.cpnid=c.cpnid and role=4
/
CREATE OR REPLACE FORCE EDITIONABLE VIEW  "DATASHARE2" ("PPLID", "USERID") AS 
  select d.pplid, c.userid from dataset d,project p, component_user c where d.cpnid=p.cpnid and p.belong_to=c.cpnid and c.role=6
/
CREATE OR REPLACE FORCE EDITIONABLE VIEW  "DATASHARE3" ("PPLID", "USERID") AS 
  select cd.pplid, c.userid from component_dataset cd, component_user c where cd.cpnid=c.cpnid and c.role=6 AND CD.APPROVED='Y'
/
CREATE OR REPLACE FORCE EDITIONABLE VIEW  "DATASHARE4" ("PPLID", "USERID") AS 
  select d.pplid, c.userid from component_dataset d,project p, component_user c where d.cpnid=p.cpnid and p.belong_to=c.cpnid and c.role=6 AND D.APPROVED='Y'
/
CREATE OR REPLACE FORCE EDITIONABLE VIEW  "DATASHARE6" ("PPLID", "USERID") AS 
  select pplid,userid from component_dataset cd,component_user cu where cd.cpnid=cu.cpnid and cu.role=4 AND CD.APPROVED='Y'
/
CREATE OR REPLACE FORCE EDITIONABLE VIEW  "DATASHARE7" ("PPLID", "USERID") AS 
  select du.pplid, du.userid from dataset_user du  where du.override=6
/
CREATE OR REPLACE FORCE EDITIONABLE VIEW  "DATASHARE8" ("PPLID", "USERID") AS 
  select du.pplid, du.userid from dataset_user du where du.override=4
/
CREATE OR REPLACE FORCE EDITIONABLE VIEW  "DATASHARE0" ("PPLID", "USERID") AS 
  select pplid,userid from dataset, component_user where role=7
/
CREATE OR REPLACE FORCE EDITIONABLE VIEW  "DATASHARE_ALL" ("SHARETYPE", "ROLE", "EDITABLE", "SHAREABLE", "PPLID", "USERID") AS 
  select 0 sharetype,7 role,0 editable, 1 shareable, pplid,userid from datashare0
union all
select 1 sharetype,6 role,1 editable, 1 shareable, pplid,userid from datashare1
union all
select 2 sharetype,6 role,0 editable, 1 shareable, pplid,userid from datashare2
union all
select 3 sharetype,6 role,0 editable, 0 shareable, pplid,userid from datashare3
union all
select 4 sharetype,6 role,0 editable, 0 shareable, pplid,userid from datashare4
union all
select 5 sharetype,4 role,1 editable, 1 shareable, pplid,userid from datashare5
union all
select 6 sharetype,4 role,0 editable, 0 shareable, pplid,userid from datashare6
union all
select 7 sharetype,5 role,0 editable, 0 shareable, pplid,userid from datashare7
union all
select 8 sharetype,3 role,0 editable, 0 shareable, pplid,userid from datashare8
/
CREATE OR REPLACE FORCE EDITIONABLE VIEW  "DATASHARE_OWN" ("SHARETYPE", "ROLE", "EDITABLE", "SHAREABLE", "PPLID", "USERID") AS 
  select 0 sharetype,7 role,0 editable, 1 shareable, pplid,userid from datashare0
union all
select 1 sharetype,6 role,1 editable, 1 shareable, pplid,userid from datashare1
union all
select 2 sharetype,6 role,0 editable, 1 shareable, pplid,userid from datashare2
union all
select 5 sharetype,4 role,1 editable, 1 shareable, pplid,userid from datashare5
/
CREATE OR REPLACE FORCE EDITIONABLE VIEW  "XML_HARDWARE_V" ("REPORTID", "LABCODE", "LAB_DEFINED_ID", "INSTRUMENT_FIRMWARE", "INSTRUMENT_MODEL_NUMBER", "INSTRUMENT_NAME", "MANUFACTURER", "TYPING_METHOD", "TM_VALID", "TMID") AS 
  select xh."REPORTID",xh."LABCODE",xh."LAB_DEFINED_ID",xh."INSTRUMENT_FIRMWARE",xh."INSTRUMENT_MODEL_NUMBER",xh."INSTRUMENT_NAME",xh."MANUFACTURER",xh."TYPING_METHOD",(case when ct.typeid is null and xh."TYPING_METHOD" is not null
             then 'N' else 'Y' end ) tm_valid, ct.mthid tmid from xml_hardware_t xh left join codetable ct on xh.typing_method=ct.code and (ct.typeid=8 or ct.typeid=7)
/
CREATE OR REPLACE FORCE EDITIONABLE VIEW  "IHIW_REPORT_VIEW" ("LABID", "REPORTID", "LAB_DEFINE_ID", "LABCODE", "CREATE_BY", "MODIFY_BY", "CREATE_TIME", "MODIFY_TIME", "SAMPLES") AS 
  select ir.labid,ir.reportid,ir.lab_define_id, il.labcode,iu.name create_by,iu2.name modify_by, ir.create_time,ir.modify_time,(SELECT COUNT(1) FROM REPORT_SAMPLE RS WHERE RS.REPORTID=IR.REPORTID) SAMPLES from ihiw_report ir left join ihiw_lab il on il.labid=ir.labid left join ihiw_user iu on ir.create_by=iu.userid left join ihiw_user iu2 on ir.modify_by=iu2.userid
where ir.genetype is null
/
CREATE OR REPLACE FORCE EDITIONABLE VIEW  "REPORT_HARDWARE_VIEW" ("REPORTID", "FIRMWARE", "MODEL_NUMBER", "NAME", "MANUFACTURER", "CREATE_BY", "CREATE_TIME", "MODIFY_BY", "MODIFY_TIME", "TYPING_METHOD") AS 
  select rh.reportid,rh.firmware,rh.model_number,rh.name,rh.manufacturer,iu.name create_by, rh.create_time,iu2.name modify_by,rh.modify_time,ct.code typing_method from report_hardware rh left join codetable  ct on rh.typing_method=ct.mthid left join ihiw_user iu on rh.create_by=iu.userid left join ihiw_user iu2 on rh.modify_by=iu2.userid
/
CREATE OR REPLACE FORCE EDITIONABLE VIEW  "REPORT_SOFTWARE_VIEW" ("REPORTID", "MANUFACTURER", "NAME", "PARAMETERS", "VERSION", "FUNCTION", "CREATE_BY", "MODIFY_BY", "CREATE_TIME", "MODIFY_TIME") AS 
  select rs.reportid,rs.manufacturer,rs.name,rs.parameters,rs.version,rs.functions function,iu.name create_by, iu2.name modify_by,rs.create_time,rs.modify_time from report_software rs  left join ihiw_user iu on rs.create_by=iu.userid left join ihiw_user iu2 on rs.modify_by=iu2.userid
/
CREATE OR REPLACE FORCE EDITIONABLE VIEW  "REPORT_SAMPLE_VIEW" ("REPORTID", "SAMID", "SAMPLEID", "DATASET", "PPLID", "GL_STRING", "ORG_GL", "CREATE_TIME", "MODIFY_TIME", "CREATE_BY", "MODIFY_BY", "LAB_DEFINE_ID", "LABCODE", "FAMILY_ID", "PATERNAL_ID", "MATERNAL_ID", "GENDER") AS 
  select rs.reportid,rs.samid, number2id(rs.samid) sampleid, d.name,d.pplid, rs.gl_string,rs.org_gl, rs.create_time,rs.modify_time,iu.name create_by, iu2.name modify_by,ir.LAB_DEFINE_ID,il.labcode,sv.familyid,sv.paternal_id,sv.maternal_id,sv.GENDER 
  from report_sample rs left join ihiw_report ir on rs.reportid=ir.reportid left join ihiw_lab il on ir.labid=il.labid left join sample s on rs.samid=s.samid  left join dataset d on s.pplid=d.pplid left join ihiw_user iu on rs.create_by=iu.userid left join ihiw_user iu2 on rs.modify_by=iu2.userid
  left join ihiw_report ir on rs.reportid=ir.reportid
  left join sample_view sv on rs.samid=sv.samid
/
CREATE OR REPLACE FORCE EDITIONABLE VIEW  "SAMPLE_TYPING_VIEW" ("REPORTID", "SAMID", "SAMPLEID", "HLATYPING", "ALIGN_REF_DB", "BC_REF_DB", "FEATURE", "LOCUS_NAME2", "MEANREADDEPTH", "DATAFILELOC", "PHASINGGROUP", "NOVELPOLYMORPHISM", "CREATE_BY", "CREATE_TIME", "MODIFY_BY", "MODIFY_TIME", "CON_SEQ", "LAB_DEFINE_ID", "PPLID", "UK_LOC", "FEATURENUMBER", "SPOSITION") AS 
  SELECT ST.REPORTID,ST.SAMID,NUMBER2ID(ST.SAMID) SAMPLEID, ST.HLATYPING,ST.ALIGN_REF_DB,ST.BC_REF_DB,CT.NAME FEATURE,CT2.NAME LOCUS_NAME2,ST.MEANREADDEPTH,ST.DATAFILELOC,ST.PHASINGGROUP,ST.NOVELPOLYMORPHISM,IU.NAME CREATE_BY,ST.CREATE_TIME,IU2.NAME MODIFY_BY, ST.MODIFY_TIME,ST.CON_SEQ,IR.LAB_DEFINE_ID,s.pplid, st.uk_loc,st.FEATURENUMBER,ST.SPOSITION 
FROM SAMPLE_TYPING ST LEFT JOIN CODETABLE CT ON ST.FEATURE=CT.MTHID LEFT JOIN CODETABLE CT2 ON CT2.MTHID=ST.LOCUS_NAME LEFT JOIN IHIW_USER IU ON ST.CREATE_BY=IU.USERID LEFT JOIN IHIW_USER IU2 ON ST.MODIFY_BY=IU2.USERID
left join ihiw_report ir on ST.reportid=ir.reportid left join sample s on st.samid=s.samid
/
CREATE OR REPLACE FORCE EDITIONABLE VIEW  "REPORTSHARE_ALL" ("REPORTID", "SAMID", "USERID", "ROLE") AS 
  select r.reportid,r.samid,d.userid,d.role from report_sample_view r, datashare_all d where r.pplid=d.pplid
/
CREATE OR REPLACE FORCE EDITIONABLE VIEW  "LAB_DATASET" ("LABID", "PPLID") AS 
  select cl.labid,d.pplid from component_lab cl, dataset d where cl.cpnid=d.cpnid
/
CREATE OR REPLACE FORCE EDITIONABLE VIEW  "XML_REAGENT" ("REPORTID", "PROTOCOL_NAME", "PROTOCOL_SOURCE", "PROTOCOL_EXTERNAL_IDENTIFIER", "PROTOCOL_INTERNAL_IDENTIFIER", "PROTOCOL_DEVIATIONS", "SPECIFIC_LOCI") AS 
  select x.reportid, labrp."PROTOCOL_NAME",labrp."PROTOCOL_SOURCE",labrp."PROTOCOL_EXTERNAL_IDENTIFIER",labrp."PROTOCOL_INTERNAL_IDENTIFIER",labrp."PROTOCOL_DEVIATIONS",labrp."SPECIFIC_LOCI" from xmlfile x,
XMLTable('/IHIW_Report/Lab' PASSING XMLType(x.xml,1)
                  COLUMNS
                    labcode    VARCHAR2(30) PATH '@LabCode',
                    Lab_defined_ID    VARCHAR2(30) PATH '@Lab_defined_ID',
                    RP  XMLType      PATH 'Reagent_Protocol') lab,
XMLTable('/Reagent_Protocol' PASSING lab.RP
                  COLUMNS
                    protocol_name    VARCHAR2(100) PATH '@Protocol_Name',
                    protocol_source    VARCHAR2(100) PATH '@Protocol_Source',
                    protocol_external_identifier    VARCHAR2(100) PATH '@Protocol_External_Identifier',
                    protocol_internal_identifier    VARCHAR2(100) PATH '@Protocol_Internal_identifier',
                    protocol_deviations    VARCHAR2(100) PATH '@Protocol_Deviations',
                    specific_loci    VARCHAR2(100) PATH '@Specific_Loci'      
) labrp  where nvl(x.ishml,'N')='N' AND X.XML IS NOT NULL
/
CREATE OR REPLACE FORCE EDITIONABLE VIEW  "XML_REAGENT_V" ("REPORTID", "PROTOCOL_NAME", "PROTOCOL_SOURCE", "PROTOCOL_EXTERNAL_IDENTIFIER", "PROTOCOL_INTERNAL_IDENTIFIER", "PROTOCOL_DEVIATIONS", "SPECIFIC_LOCI", "LOCI_VLD") AS 
  select x."REPORTID",x."PROTOCOL_NAME",x."PROTOCOL_SOURCE",x."PROTOCOL_EXTERNAL_IDENTIFIER",x."PROTOCOL_INTERNAL_IDENTIFIER",x."PROTOCOL_DEVIATIONS",x."SPECIFIC_LOCI",VALID_LOCI(specific_loci) loci_vld from xml_reagent_t x
/
CREATE OR REPLACE FORCE EDITIONABLE VIEW  "REPORT_REAGENT_VIEW" ("REPORTID", "NAME", "SOURCE", "EXTERNAL_IDENTIFIER", "INTERNAL_IDENTIFIER", "DEVIATIONS", "SPECIFIC_LOCI", "CREATE_BY", "CREATE_TIME", "MODIFY_BY", "MODIFY_TIME") AS 
  select rs.REPORTID,rs.NAME,rs.SOURCE,rs.EXTERNAL_IDENTIFIER, rs.INTERNAL_IDENTIFIER,rs.DEVIATIONS,rs.SPECIFIC_LOCI, iu.name CREATE_BY, rs.CREATE_TIME,iu.name MODIFY_BY,rs.MODIFY_TIME from report_reagent rs left join ihiw_user iu on rs.create_by=iu.userid left join ihiw_user iu2 on rs.modify_by=iu2.userid
/
CREATE OR REPLACE FORCE EDITIONABLE VIEW  "XMLFILEVIEW" ("REPORTID", "XML", "CREATE_TIME", "CREATE_BY", "FILENAME") AS 
  select x.reportid,x.xml,x.create_time,x.create_by,ir.lab_define_id || '.xml' filename from xmlfile x left join ihiw_report ir on x.reportid=ir.reportid
/
CREATE OR REPLACE FORCE EDITIONABLE VIEW  "HML_INFO" ("REPORTID", "LABCODE", "LAB_DEFINED_ID") AS 
  select x.reportid, ihiw_authentication.getlabcode(), hmlid.Lab_defined_ID
from xmlfile x,
XMLTable(xmlnamespaces('http://schemas.nmdp.org/spec/hml/1.0.1' as "t"),'/t:hml/t:hmlid' PASSING XMLType(x.xml,1)
                  COLUMNS
                    Lab_defined_ID    VARCHAR2(50) PATH '@root' ) hmlid,
XMLTable(xmlnamespaces('http://schemas.nmdp.org/spec/hml/1.0.1' as "t"),'/t:hml/t:reporting-center' PASSING XMLType(x.xml,1)
             COLUMNS
                   labcode    VARCHAR2(50) PATH '@reporting-center-context') lab

 where nvl(x.ishml,'N')='Y'
/
CREATE OR REPLACE FORCE EDITIONABLE VIEW  "HML_SAMPLE" ("REPORTID", "LABCODE", "LAB_DEFINED_ID", "SAMPLEID", "GENOTYPE_GL") AS 
  select t.reportid,h.labcode,h.lab_defined_id,t.sampleid, regexp_replace(t.tgenotype_gl,'[[:space:]]+','') genotype_gl from (select x.reportid,SAMPLEID,LISTAGG(GT.GLSTRING, '^') WITHIN GROUP (order by reportid) tGENOTYPE_GL
from xmlfile x,

XMLTable(xmlnamespaces('http://schemas.nmdp.org/spec/hml/1.0.1' as "t"),'/t:hml/t:sample' PASSING XMLType(x.xml,1)
                COLUMNS
                    SAMPLEID VARCHAR2(60) PATH '@id',
                    GT  XMLType      PATH 't:typing/t:allele-assignment/t:glstring') ST,
XMLTable(xmlnamespaces('http://schemas.nmdp.org/spec/hml/1.0.1' as "t"),'/t:glstring' PASSING ST.GT
             COLUMNS
                   GLSTRING VARCHAR2(2000) PATH '/' 
                ) GT
 where nvl(x.ishml,'N')='Y'  and x.xml is not null group by reportid,SAMPLEID) t left join HML_INFO h on t.reportid=h.reportid
/
CREATE OR REPLACE FORCE EDITIONABLE VIEW  "CATEGORY_VIEW" ("ID", "NAME", "CODE", "TYPE") AS 
  select c.mthid,c.name,c.code,c2.name as type from codetable c  left join codetable c2 on c.typeid=TO_NUMBER(c2.code) where c.typeid<>0 and c2.typeid=0
union all
select COUNTRYID, name,countrycode as code, 'Nation' as type from country
union all
select ethid, name, codenumber as code, 'Ethnicity' as type from ETHNICITY
/
CREATE OR REPLACE FORCE EDITIONABLE VIEW  "PEDIGREE_VIEW" ("SAMID", "SUBLABID", "SUBLABCODE", "FAMILY_ID", "INDIVIDUAL_ID", "PATERNAL_ID", "MATERNAL_ID", "SEX", "PHENOTYPE") AS 
  select p.samid as samid,p.sublabid, l.labcode, p.family_id as family_id,s.name as individual_id,s2.name as paternal_id,s3.name as maternal_id,p.sex,p.phenotype from pedigree p 
left join sample_relative_view s on p.samid=s.samid
left join sample_relative_view s2 on p.paternal_id=s2.samid
left join sample_relative_view s3 on p.maternal_id=s3.samid
left join ihiw_lab l on p.sublabid=l.labid
/
CREATE OR REPLACE FORCE EDITIONABLE VIEW  "POPULATION_VIEW" ("CPNID", "CPNNAME", "PPLID", "SAMNUM", "NAME", "REFERENCE", "CLINICAL", "ETHNICALLY", "GEOGRAPHICALLY", "LINGUISTICALLY", "REGISTRY", "PEDIGREE", "OTHER", "RANDOMLY", "ADMIXED", "SOURCE", "ADMIXINFO", "CREATE_TIME", "CASE", "CREATE_BY") AS 
  select 
 cpnid,
(select name from project where project.cpnid=POPULATION.cpnid) 
     as CPNname,
    POPULATION.pplid as PPLID,
(select count(1) from sample s where s.pplid=population.pplid) as samnum,
    POPULATION.NAME as NAME,
    POPULATION.REFERENCE as REFERENCE,
    POPULATION.CLINICAL as CLINICAL,
    POPULATION.ETHNICALLY as ETHNICALLY,
    POPULATION.GEOGRAPHICALLY as GEOGRAPHICALLY,
    POPULATION.LINGUISTICALLY as LINGUISTICALLY,
    POPULATION.REGISTRY as REGISTRY,
    POPULATION.PEDIGREE as PEDIGREE,
    POPULATION.OTHER as OTHER,
    POPULATION.RANDOMLY as RANDOMLY,
    POPULATION.ADMIXED as ADMIXED,
    POPULATION.SOURCE as SOURCE,
    POPULATION.ADMIXINFO as ADMIXINFO,
    POPULATION.CREATE_TIME as CREATE_TIME,
    POPULATION.CASE as P_CASE,
    (select name from ihiw_user where ihiw_user.userid=POPULATION.CREATE_BY) as CREATE_BY 
 from dataset POPULATION
/
CREATE OR REPLACE FORCE EDITIONABLE VIEW  "RELATIVE_VIEW" ("LABCODE", "ETHNICITY", "DATASET", "BIRTH_NATION", "NATIONALITY", "CREATE_USER", "BIRTH_CONTINENT", "SAMID", "NAME", "SUBLABID", "LANGUAGE", "SECLANGUAGE", "RELIGION", "SUBRELIGION", "ETHID", "PPLID", "REGION", "BNATION", "BOTHERNATION", "BIRTHPLACE", "NATION", "OTHERNATION", "CREATE_BY", "CREATE_TIME", "MODIFY_TIME") AS 
  select
l.labcode, e.name as ethnicity,p.name as dataset, c.name as birth_nation, c2.name as nationality, u.name as create_user, ct.name as birth_continent, r."SAMID",r."NAME",r."SUBLABID",r."LANGUAGE",r."SECLANGUAGE",r."RELIGION",r."SUBRELIGION",r."ETHID",r."PPLID",r."REGION",r."BNATION",r."BOTHERNATION",r."BIRTHPLACE",r."NATION",r."OTHERNATION",r."CREATE_BY",r."CREATE_TIME",r."MODIFY_TIME" from relative r 
left join ihiw_lab l on r.sublabid=l.labid
left join ethnicity e on r.ethid=e.ethid
left join DATASET p on r.pplid=p.pplid
left join country c on r.bnation=c.countryid
left join country c2 on r.nation=c2.countryid
left join ihiw_user u on r.create_by=u.userid
left join codetable ct on ct.mthid=r.region
/
CREATE OR REPLACE FORCE EDITIONABLE VIEW  "SAMPLE_RELATIVE_VIEW" ("SUBLABID", "PPLID", "SAMID", "NAME", "FLAG") AS 
  select sublabid,pplid,samid,name,1 as flag from sample
/
CREATE OR REPLACE FORCE EDITIONABLE VIEW  "SAMPLE_VIEW" ("SAMID", "DATASET", "PPLID", "SUBLABID", "SUBLABCODE", "SAMPLEID", "FAMILYID", "GENDER", "PATERNAL_ID", "MATERNAL_ID", "PHENOTYPE", "COLLECT_DATE", "BIRTHDAY", "REGION", "NATION", "OTHERNATION", "CITY", "LATITUDE", "LONGITUDE", "REFERENCE", "MATERIAL", "MATERIALAVA", "CELLLINE", "TYPINGMETHOD", "SUBMITTED", "BREGION", "BNATION", "BOTHERNATION", "BCITY", "NATIONALITY", "OTHERNATIONALITY", "BLATITUDE", "BLONGITUDE", "LANGUAGE", "HOMELANGUAGE", "RELIGION", "SUBRELIGION", "ETHNICITY", "NEWETHNICITY", "RREGION", "RNATION", "ROTHERNATION", "RCITY", "CREATE_BY", "CREATE_TIME", "CASE", "TRANSPLANT", "INC_CRITERIA", "RANDOM", "DISEASE", "TRANSPLANT_ID") AS 
  select SAMPLE.SAMID as SAMID,
    p.name as dataset,
    p.pplid as pplid,
    SAMPLE.SUBLABID,
    l.labcode as sublabcode,
    SAMPLE.NAME as sampleID,
    pe.FAMILY_ID as FAMILYID, 
    pe.sex as GENDER,
    number2id(pe.PATERNAL_ID) as PATERNAL_ID,
    number2id(pe.maternal_id) as maternal_id,  
	pe.PHENOTYPE, 
    SAMPLE.COLLECT_DATE as COLLECT_DATE,
       SAMPLE.BIRTHDAY as BIRTHDAY,
    ct1.name as REGION,
    c1.name as NATION,
    SAMPLE.OTHERNATION as OTHERNATION,
    SAMPLE.CITY as CITY,
    SAMPLE.LATITUDE as LATITUDE,
    SAMPLE.LONGITUDE as LONGITUDE,
    SAMPLE.REFERENCE as REFERENCE,
    SAMPLE.MATERIAL as MATERIAL,
    SAMPLE.MATERIALAVA as MATERIALAVA,
    SAMPLE.CELLLINE as CELLLINE,
    ct2.name as TYPINGMETHOD,
    SAMPLE.SUBMITTED as SUBMITTED,
    ct3.name as BREGION,
    c2.name as BNATION,
    SAMPLE.BOTHERNATION as BOTHERNATION,
    SAMPLE.BCITY as BCITY,
    c3.name as NATIONALITY,
    SAMPLE.OTHERNATIONALITY as OTHERNATIONALITY,
    SAMPLE.BLATITUDE as BLATITUDE,
    SAMPLE.BLONGITUDE as BLONGITUDE,   
    SAMPLE.LANGUAGE as LANGUAGE,
    SAMPLE.HOMELANGUAGE as HOMELANGUAGE,
    SAMPLE.RELIGION as RELIGION,
    SAMPLE.SUBRELIGION as SUBRELIGION,
    e.name as  ethnicity,
    SAMPLE.NEWETHNICITY as NEWETHNICITY,
    
   ct4.name as RREGION,
    c4.name as RNATION,
    SAMPLE.ROTHERNATION as ROTHERNATION,
    SAMPLE.RCITY as RCITY,
     iu.username as CREATE_BY,
    SAMPLE.CREATE_TIME as CREATE_TIME,
    case SAMPLE.case when 'C' then 'Control' when 'P' then 'Patient' ELSE '' END as case,
    case SAMPLE.TRANSPLANT when 'R' then 'Recipient' when 'D' then 'Donor' ELSE '' END as TRANSPLANT,
    SAMPLE.INC_CRITERIA AS INC_CRITERIA,
    SAMPLE.RANDOM  AS RANDOM,
    SAMPLE.DISEASE  AS DISEASE,
    SAMPLE.TRANSPLANT_ID AS TRANSPLANT_ID
 from SAMPLE SAMPLE 
left join dataset p on SAMPLE.pplid=p.pplid
left join ihiw_lab l on sample.sublabid=l.labid
left join pedigree_all pe on sample.samid=pe.samid
left join codetable ct1 on sample.region=ct1.mthid
left join country c1 on sample.nation=c1.countryid
left join codetable ct2 on sample.typingmethod=ct2.mthid
left join country c2 on sample.bnation=c2.countryid
left join codetable ct3 on sample.bregion=ct3.mthid
left join country c3 on sample.nationality=c3.countryid
left join country c4 on sample.rnation=c4.countryid
left join codetable ct4 on sample.rregion=ct4.mthid
left join ethnicity e on sample.ethid=e.ethid
left join ihiw_user iu on sample.create_by=iu.userid
/
CREATE OR REPLACE FORCE EDITIONABLE VIEW  "XML_SOFTWARE" ("REPORTID", "LABCODE", "LAB_DEFINED_ID", "SOFTWARE_MANUFACTURER", "SOFTWARE_NAME", "SOFTWARE_PARAMETERS", "SOFTWARE_VERSION", "SOFTWARE_FUNCTION") AS 
  select x.reportid, lab.labcode,lab.Lab_defined_ID, labsa.Software_Manufacturer, labsa.Software_Name, labsa.Software_Parameters,labsa.Software_Version,labsa.Software_Function from xmlfile x,
XMLTable('/IHIW_Report/Lab' PASSING XMLType(x.xml,1)
                  COLUMNS
                    labcode    VARCHAR2(30) PATH '@LabCode',
                    Lab_defined_ID    VARCHAR2(30) PATH '@Lab_defined_ID',
                    SA  XMLType      PATH 'Software_Applied') lab,
XMLTable('/Software_Applied' PASSING lab.SA
                  COLUMNS
                    Software_Manufacturer    VARCHAR2(80) PATH '@Software_Manufacturer',
                    Software_Name    VARCHAR2(40) PATH '@Software_Name',
                    Software_Parameters    VARCHAR2(200) PATH '@Software_Parameters',
                    Software_Version    VARCHAR2(40) PATH '@Software_Version',
                    Software_Function    VARCHAR2(100) PATH '@Software_Functions'
) labsa  where nvl(x.ishml,'N')='N' AND X.XML IS NOT NULL
/
CREATE OR REPLACE FORCE EDITIONABLE VIEW  "XML_SOFTWARE_V" ("REPORTID", "LABCODE", "LAB_DEFINED_ID", "SOFTWARE_MANUFACTURER", "SOFTWARE_NAME", "SOFTWARE_PARAMETERS", "SOFTWARE_VERSION", "SOFTWARE_FUNCTION", "SFUN_VALID", "SFUNID") AS 
  SELECT xs."REPORTID",xs."LABCODE",xs."LAB_DEFINED_ID",xs."SOFTWARE_MANUFACTURER",xs."SOFTWARE_NAME",xs."SOFTWARE_PARAMETERS",xs."SOFTWARE_VERSION",xs."SOFTWARE_FUNCTION",
  
(CASE WHEN (select count(1) from codetable c where c.typeid=3 and instr(':' || xs.software_function ||  ':', ':' || c.name || ':' )>0) = REGEXP_COUNT(xs.software_function,':')+1 THEN 'Y'
                   ELSE 'N' end) as sfun_valid,              
            xs."REPORTID"  sfunid
  FROM XML_SOFTWARE_T xs
/
CREATE OR REPLACE FORCE EDITIONABLE VIEW  "HML_ALLELE" ("REPORTID", "SAMPLEID", "ALIGN_REF_DB", "BC_REF_DB", "LOCUS_NAME") AS 
  select distinct x.reportid,SAMPLEID, AST.DB || ' ' || AST.VERSION ALIGN_REF_DB, AST.DB || ' ' || AST.VERSION BC_REF_DB, locus LOCUS_NAME
from xmlfile x,

XMLTable(xmlnamespaces('http://schemas.nmdp.org/spec/hml/1.0.1' as "t"),'/t:hml/t:sample' PASSING XMLType(x.xml,1)
                COLUMNS
                    SAMPLEID VARCHAR2(60) PATH '@id',
                    AST  XMLType      PATH 't:typing'
                     ) ST,
XMLTable(xmlnamespaces('http://schemas.nmdp.org/spec/hml/1.0.1' as "t"),'/t:typing/t:allele-assignment' PASSING ST.AST
                COLUMNS
                    db VARCHAR2(60) PATH '@allele-db',
                    version VARCHAR2(39) PATH '@allele-version',
                    HT  XMLType      PATH 't:haploid') AST,
XMLTable(xmlnamespaces('http://schemas.nmdp.org/spec/hml/1.0.1' as "t"),'/t:haploid' PASSING AST.HT
                COLUMNS
                    locus VARCHAR2(30) PATH '@locus') HT

 where nvl(x.ishml,'N')='Y'
/
CREATE OR REPLACE FORCE EDITIONABLE VIEW  "HML_LOC" ("REPORTID", "SAMPLEID", "LOCUS_NAME", "DATAFILELOC") AS 
  select x.reportid,SAMPLEID, locus LOCUS_NAME ,uri DATAFILELOC
from xmlfile x,

XMLTable(xmlnamespaces('http://schemas.nmdp.org/spec/hml/1.0.1' as "t"),'/t:hml/t:sample' PASSING XMLType(x.xml,1)
                COLUMNS
                    SAMPLEID VARCHAR2(60) PATH '@id',
                    AST  XMLType      PATH 't:typing/t:typing-method/t:sbt-ngs'
                     ) ST,
XMLTable(xmlnamespaces('http://schemas.nmdp.org/spec/hml/1.0.1' as "t"),'/t:sbt-ngs' PASSING ST.AST
                COLUMNS
                    locus VARCHAR2(30) PATH '@locus',
                    HT  XMLType      PATH 't:raw-reads') AST,
XMLTable(xmlnamespaces('http://schemas.nmdp.org/spec/hml/1.0.1' as "t"),'/t:raw-reads' PASSING AST.HT
                COLUMNS
                    uri VARCHAR2(300) PATH '@uri') HT

 where nvl(x.ishml,'N')='Y'
/
CREATE OR REPLACE FORCE EDITIONABLE VIEW  "HML_CONSEQV" ("REPORTID", "SAMPLEID", "HLATYPING", "PHASEGROUP", "SPOSITION", "VARIANTS", "CON_SEQ") AS 
  select x.reportid,SAMPLEID, RS.name HLATyping ,CSB.phasegroup-1 phasegroup,CSB.start1 SPOSITION,CSB.VARI.getClobVal() VARIANTS,SQ.sequence CON_SEQ
from xmlfile x,

XMLTable(xmlnamespaces('http://schemas.nmdp.org/spec/hml/1.0.1' as "t"),'/t:hml/t:sample' PASSING XMLType(x.xml,1)
                COLUMNS
                    SAMPLEID VARCHAR2(60) PATH '@id',
                    AST  XMLType      PATH 't:typing'
                     ) ST,
XMLTable(xmlnamespaces('http://schemas.nmdp.org/spec/hml/1.0.1' as "t"),'/t:typing/t:consensus-sequence/t:reference-database/t:reference-sequence' PASSING ST.AST
                COLUMNS
                    id VARCHAR2(60) PATH '@id',
                    name VARCHAR2(80) PATH '@name') RS,
XMLTable(xmlnamespaces('http://schemas.nmdp.org/spec/hml/1.0.1' as "t"),'/t:typing/t:consensus-sequence/t:consensus-sequence-block' PASSING ST.AST
                COLUMNS
                    rsd VARCHAR2(60) PATH '@reference-sequence-id',
                    start1 number PATH '@start',
                    phasegroup number PATH '@phase-set',
                    SEQ XMLType PATH 't:sequence',
                    VARI XMLType PATH 't:variant') CSB,
XMLTable(xmlnamespaces('http://schemas.nmdp.org/spec/hml/1.0.1' as "t"),'/t:sequence' PASSING CSB.SEQ
                COLUMNS
                    sequence clob PATH '/') SQ


 where nvl(x.ishml,'N')='Y' and RS.ID=CSB.RSD
/
CREATE OR REPLACE FORCE EDITIONABLE VIEW  "HML_SAMPLETYPING" ("REPORTID", "LABCODE", "LAB_DEFINED_ID", "SAMPLEID", "HLATYPING", "ALIGN_REF_DB", "BC_REF_DB", "CON_SEQ", "FEATURE", "LOCUS_NAME", "MEANREADDEPTH", "DATAFILELOC", "PHASINGGROUP", "SPOSITION", "NOVELPOLYMORPHISM", "GENOTYPEANNOTATION") AS 
  select hc.reportid,hi.LABCODE,hi.LAB_DEFINED_ID,hc.sampleid,hc.hlatyping,ha.ALIGN_REF_DB,ha.BC_REF_DB,hc.CON_SEQ,cast('Genomic - Unknown Location' as  varchar2(80)) Feature ,ha.LOCUS_NAME,cast(NULL as varchar2(10)) MEANREADDEPTH,
hl.DATAFILELOC, hc.PHASEGROUP PHASINGGROUP,hc.SPOSITION, hc.variants NOVELPOLYMORPHISM, cast(null as varchar2(300)) GENOTYPEANNOTATION
 from hml_conseq hc 
     left join hml_info hi on hc.reportid=hi.reportid 
     left join hml_allele ha on hc.reportid=ha.reportid and hc.sampleid=ha.sampleid and hc.locus_name=ha.locus_name
     left join hml_loc hl on hc.reportid=hl.reportid and hc.sampleid=hl.sampleid and hc.locus_name=hl.LOCUS_NAME
/
CREATE OR REPLACE FORCE EDITIONABLE VIEW  "XML_SAMPLE_TYPING_U" ("REPORTID", "LABCODE", "LAB_DEFINED_ID", "SAMPLEID", "HLATYPING", "ALIGN_REF_DB", "BC_REF_DB", "CON_SEQ", "FEATURE", "LOCUS_NAME", "MEANREADDEPTH", "DATAFILELOC", "PHASINGGROUP", "SPOSITION", "NOVELPOLYMORPHISM", "GENOTYPEANNOTATION", "FEATURENUMBER") AS 
  select "REPORTID","LABCODE","LAB_DEFINED_ID","SAMPLEID","HLATYPING","ALIGN_REF_DB","BC_REF_DB","CON_SEQ","FEATURE","LOCUS_NAME","MEANREADDEPTH","DATAFILELOC","PHASINGGROUP","SPOSITION","NOVELPOLYMORPHISM","GENOTYPEANNOTATION","FEATURENUMBER" from xml_sample_typing
/
CREATE OR REPLACE FORCE EDITIONABLE VIEW  "XML_INFO_U" ("REPORTID", "LABCODE", "LAB_DEFINED_ID") AS 
  select "REPORTID","LABCODE","LAB_DEFINED_ID" from xml_info
/
CREATE OR REPLACE FORCE EDITIONABLE VIEW  "XML_SAMPLE_U" ("REPORTID", "LABCODE", "LAB_DEFINED_ID", "SAMPLEID", "GENOTYPE_GL") AS 
  select "REPORTID","LABCODE","LAB_DEFINED_ID","SAMPLEID","GENOTYPE_GL" from xml_sample
/
CREATE OR REPLACE FORCE EDITIONABLE VIEW  "HML_CONSEQ" ("REPORTID", "SAMPLEID", "HLATYPING", "LOCUS_NAME", "PHASEGROUP", "SPOSITION", "VARIANTS", "CON_SEQ") AS 
  select x.reportid,SAMPLEID, RS.name HLATyping,  REGEXP_REPLACE(RS.name,'\*.*', '') LOCUS_NAME, CSB.phasegroup-1 phasegroup,CSB.start1 SPOSITION,CSB.VARI.getClobVal() VARIANTS,SQ.sequence CON_SEQ
from xmlfile x,

XMLTable(xmlnamespaces('http://schemas.nmdp.org/spec/hml/1.0.1' as "t"),'/t:hml/t:sample' PASSING XMLType(x.xml,1)
                COLUMNS
                    SAMPLEID VARCHAR2(60) PATH '@id',
                    AST  XMLType      PATH 't:typing'
                     ) ST,
XMLTable(xmlnamespaces('http://schemas.nmdp.org/spec/hml/1.0.1' as "t"),'/t:typing/t:consensus-sequence/t:reference-database/t:reference-sequence' PASSING ST.AST
                COLUMNS
                    id VARCHAR2(60) PATH '@id',
                    name VARCHAR2(80) PATH '@name') RS,
XMLTable(xmlnamespaces('http://schemas.nmdp.org/spec/hml/1.0.1' as "t"),'/t:typing/t:consensus-sequence/t:consensus-sequence-block' PASSING ST.AST
                COLUMNS
                    rsd VARCHAR2(60) PATH '@reference-sequence-id',
                    start1 number PATH '@start',
                    phasegroup number PATH '@phase-set',
                    SEQ XMLType PATH 't:sequence',
                    VARI XMLType PATH 't:variant') CSB,
XMLTable(xmlnamespaces('http://schemas.nmdp.org/spec/hml/1.0.1' as "t"),'/t:sequence' PASSING CSB.SEQ
                COLUMNS
                    sequence clob PATH '/') SQ


 where nvl(x.ishml,'N')='Y' and RS.ID=CSB.RSD
/
CREATE OR REPLACE FORCE EDITIONABLE VIEW  "GENDX_INFO" ("REPORTID", "LABCODE", "LAB_DEFINED_ID") AS 
  select x.reportid, lab.labcode,lab.Lab_defined_ID
from xmlfile x ,
XMLTable('/gendex' PASSING XMLType(x.xml,1)
                  COLUMNS
                    labcode    VARCHAR2(50) PATH '@LabCode',
                    Lab_defined_ID    VARCHAR2(50) PATH '@Lab_defined_ID') lab where nvl(x.ishml,'N')='G'
/
CREATE OR REPLACE FORCE EDITIONABLE VIEW  "GENDX_GLSTRING" ("USERID", "SAMPLEID", "GLSTRING") AS 
  select userid,sampleid, listagg(glstring2, '^') within group (order by userid) as glstring from 
(select userid, sampleid, locus, listagg( glstring1,'|') within group (order by userid) as glstring2 from 
(select USERID,	SAMPLEID,	LOCUS,	ID, LISTAGG(GLSTRING1,'+') WITHIN GROUP (ORDER BY userid) AS glstring1 from GENDX_gl2  group by userid,sampleid,locus,id) 
     group by userid,sampleid,locus) 
group by userid,sampleid
/
CREATE OR REPLACE FORCE EDITIONABLE VIEW  "GENDX_GL1" ("USERID", "SAMPLEID", "LOCUS", "ID", "GLSTRING1") AS 
  select userid, g.SAMPLEID, c.name "LOCUS",Matchset.id, refAllele glstring1 from GENDX_XML g left join CODETABLE c on locus=mthid, 
XMLTable('/Sample/Matchsets/Matchset' PASSING XMLType(g.xml,1)
                  COLUMNS
                    id    VARCHAR2(50) PATH '@id',
                    mc  XMLType      PATH 'Matchcombination/MatchId') Matchset,
XMLTable('/MatchId' PASSING Matchset.mc
                  COLUMNS
                    refAllele    VARCHAR2(60) PATH '@refAllele') MatchId
/
CREATE OR REPLACE FORCE EDITIONABLE VIEW  "GENDX_CONV" ("USERID", "SAMPLEID", "LOCUS", "HID", "LBEGIN", "LEND", "CON") AS 
  select userid, g.SAMPLEID, c.name "LOCUS",s.id,s.lbegin,s.lend,s.con from GENDX_XML g left join CODETABLE c on locus=mthid, 
XMLTable('/Sample/Haplotypes/Haplotype' PASSING XMLType(g.xml,1)
                  COLUMNS
                    id    VARCHAR2(50) PATH '@id',
                    lbegin    VARCHAR2(50) PATH '@begin',
                    lend    VARCHAR2(50) PATH '@end',
                    con   clob PATH '/') s
/
CREATE OR REPLACE FORCE EDITIONABLE VIEW  "GENDX_ALLELEV" ("USERID", "SAMPLEID", "LOCUS", "TYPING", "PHASING", "HID") AS 
  select userid, g.SAMPLEID, c.name "LOCUS",s.typing,s.phasing,s2.hid from GENDX_XML g left join CODETABLE c on locus=mthid, 
XMLTable('/Sample/Matches/Match' PASSING XMLType(g.xml,1)
                  COLUMNS
                    typing    VARCHAR2(50) PATH '@id',
                    phasing    VARCHAR2(50) PATH '@phasing',
                    s2    xmltype PATH 'Haplotypecombination/HaplotypeId') s,

XMLTable('/HaplotypeId' PASSING s.s2
               COLUMNS
               hid   VARCHAR2(50) PATH '/') s2
/
CREATE OR REPLACE FORCE EDITIONABLE VIEW  "GENDX_FILEV" ("USERID", "SAMPLEID", "LOCUS", "FILELOC") AS 
  select userid, g.SAMPLEID, c.name "LOCUS",s.fileloc from GENDX_XML g left join CODETABLE c on locus=mthid, 
XMLTable('/Sample' PASSING XMLType(g.xml,1)
                  COLUMNS
                    fileloc    VARCHAR2(50) PATH '@file') s
/
CREATE OR REPLACE FORCE EDITIONABLE VIEW  "GENDX_LOCUSV" ("USERID", "SAMPLEID", "LOCUS", "TYPING", "FILELOC", "PHASING", "LBEGIN", "LEND", "CON") AS 
  select ga.userid,ga.sampleid,ga.locus,ga.typing,gf.fileloc, to_number(DECODE(INSTR(ga.hid,'homo'),0,ga.phasing,'1'))-1 phasing,gc.lbegin,gc.lend,gc.con from gendx_allelev ga left join gendx_conv gc on ga.userid=gc.userid and ga.sampleid=gc.sampleid and ga.locus=gc.locus and ga.hid=gc.hid left join gendx_filev gf on ga.userid=gf.userid and ga.sampleid=gf.sampleid and ga.locus=gf.locus
/
CREATE OR REPLACE FORCE EDITIONABLE VIEW  "XML_GENANN" ("REPORTID", "LABCODE", "LAB_DEFINED_ID", "SAMPLEID", "ANNOTATION") AS 
  select x.reportid, lab.labcode,lab.Lab_defined_ID, labsample.SampleID, salocus.Annotation
from xmlfile x,
XMLTable('/IHIW_Report/Lab' PASSING XMLType(x.xml,871)
                  COLUMNS
                    labcode    VARCHAR2(50) PATH '@LabCode',
                    Lab_defined_ID    VARCHAR2(50) PATH '@Lab_defined_ID',
                    sample  XMLType      PATH 'Sample') lab,
XMLTable('/Sample' PASSING lab.sample
                  COLUMNS
                    SampleID    VARCHAR2(60) PATH '@SampleID',
                    Locus     xmltype PATH 'Genotyping/GenotypeAnnotation') labsample,
XMLTable('/GenotypeAnnotation' PASSING labsample.Locus
                  COLUMNS
                    Annotation    VARCHAR2(100) PATH '@Annotation'
                   ) salocus  where nvl(x.ishml,'N')='N' AND X.XML IS NOT NULL
/
CREATE OR REPLACE FORCE EDITIONABLE VIEW  "XML_FEACO" ("REPORTID", "LABCODE", "LAB_DEFINED_ID", "SAMPLEID", "LOCUS", "FEATURENUMBER", "FEATURESTART", "FEATURESTOP") AS 
  select x.reportid, lab.labcode,lab.Lab_defined_ID, labsample.SampleID, salocus.Locus,salocus.FeatureNumber,salocus.FeatureStart,salocus.FeatureStop
from xmlfile x,
XMLTable('/IHIW_Report/Lab' PASSING XMLType(x.xml,1)
                  COLUMNS
                    labcode    VARCHAR2(50) PATH '@LabCode',
                    Lab_defined_ID    VARCHAR2(50) PATH '@Lab_defined_ID',
                    sample  XMLType      PATH 'Sample') lab,
XMLTable('/Sample' PASSING lab.sample
                  COLUMNS
                    SampleID    VARCHAR2(60) PATH '@SampleID',
                    fc     xmltype PATH 'Genotyping/FeatureCoordinate') labsample,
XMLTable('/FeatureCoordinate' PASSING labsample.fc
                  COLUMNS
                    Locus    VARCHAR2(30) PATH '@Locus',
                    FeatureNumber    number PATH '@FeatureNumber',
                     FeatureStart    number PATH '@FeatureStart',
                     FeatureStop    number PATH '@FeatureStop'
                   ) salocus  where nvl(x.ishml,'N')='N' and x.xml is not null
/
CREATE OR REPLACE FORCE EDITIONABLE VIEW  "XML_FEACO_V" ("REPORTID", "LABCODE", "LAB_DEFINED_ID", "SAMPLEID", "LOCUS", "FEATURENUMBER", "FEATURESTART", "FEATURESTOP", "LOCUS_VALID", "LOCUS_ID", "SAMID") AS 
  select xst."REPORTID",xst."LABCODE",xst."LAB_DEFINED_ID",xst."SAMPLEID",xst."LOCUS",xst."FEATURENUMBER",xst."FEATURESTART",xst."FEATURESTOP", (case when ct2.mthid is null then 'N' else 'Y' end) locus_valid ,ct2.mthid locus_id,s.samid
  FROM XML_FEACO_t xst 
  left join codetable ct2 on xst.locus like ct2.name and ct2.typeid=5
  left join xml_sample_v s on s.sampleid like xst.sampleid and s.reportid=xst.reportid
/
CREATE OR REPLACE FORCE EDITIONABLE VIEW  "XML_GENANN_V" ("REPORTID", "LABCODE", "LAB_DEFINED_ID", "SAMPLEID", "ANNOTATION", "SAMID") AS 
  SELECT XST."REPORTID",XST."LABCODE",XST."LAB_DEFINED_ID",XST."SAMPLEID",XST."ANNOTATION",s.samid FROM XML_GENANN_t XST left join xml_sample_v s on s.sampleid like xst.sampleid and s.reportid=xst.reportid
/
CREATE OR REPLACE FORCE EDITIONABLE VIEW  "TRANSPLANTATIONVIEW" ("TRPID", "LABCODE", "LABID", "TRP_CODE", "TRP_DATE", "TX_INC_CRI", "TRANSPLANTATION_TYPE", "DONOR_ID", "DONOR_GENDER", "DONOR_AGE", "DONOR_ETHNICITY", "DONOR_INC_CRI", "DONOR_GL", "RECIPIENT_ID", "RECIPIENT_GENDER", "RECIPIENT_AGE", "RECIPIENT_ETHNICITY", "RECIPIENT_INC_CRI", "RECIPIENT_GL", "CREATE_TIME", "CREATED_BY", "MODIFY_TIME", "MODIFIED_BY", "DRAW_DATE", "TREATMENT", "IGG1_AB", "IGG1_PA", "IGG1_DSA", "IGG2_AB", "IGG2_PA", "IGG2_DSA", "C1Q1_AB", "C1Q1_PA", "C1Q1_DSA", "C1Q2_AB", "C1Q2_PA", "C1Q2_DSA") AS 
  select tp.trpid,il.labcode,il.labid,tp.trp_code,tp.trp_date,tp.INCCR TX_inc_cri, c.name transplantation_type,number2id(tp.donorid) donor_id, p1.sex donor_gender, s1.birthday donor_age, e1.name donor_ethnicity,s1.INC_CRITERIA donor_inc_cri, tp.donor_gl, number2id(tp.recipientid) recipient_id, p2.sex recipient_gender,  s2.birthday recipient_age, e2.name recipient_ethnicity,s2.INC_CRITERIA recipient_inc_cri, tp.recipient_gl,tp.create_time,iu1.username created_by, tp.modify_time ,iu2.username modified_by,DRAW_DATE,TREATMENT,IGG1_AB,IGG1_PA,IGG1_DSA,IGG2_AB,IGG2_PA,IGG2_DSA,C1Q1_AB,C1Q1_PA,C1Q1_DSA,C1Q2_AB,C1Q2_PA,C1Q2_DSA
from transplantation tp left join sample s1 on tp.donorid=s1.samid 
left join sample s2 on tp.recipientid=s2.samid 
left join ihiw_lab il on tp.sublabid=il.labid
left join pedigree p1 on p1.samid=s1.samid 
left join pedigree p2 on p2.samid=s2.samid
left join ethnicity e1 on e1.ethid=s1.ethid
left join ethnicity e2 on e2.ethid=s2.ethid
left join codetable c on c.mthid=tp.organ
left join ihiw_user iu1 on iu1.userid=tp.create_by
left join ihiw_user iu2 on iu2.userid=tp.modify_by
left join abcalling ab on tp.donorid=ab.donor_id and tp.recipientid=ab.patient_id
/
CREATE OR REPLACE FORCE EDITIONABLE VIEW  "PEDIGREE_PARENTS" ("FAMILY_ID", "SAMID", "PATERNAL_ID", "MATERNAL_ID", "SEX", "PHENOTYPE", "SUBLABID") AS 
  select DISTINCT p1.family_id family_id, p1.MATERNAL_ID samid, NULL PATERNAL_ID, NULL MATERNAL_ID, 'F' sex, NULL PHENOTYPE, p1.sublabid sublabid from pedigree p1 where not exists (select p1.samid from pedigree p2 where p2.samid=p1.MATERNAL_ID) and p1.MATERNAL_ID is not null
union all
select DISTINCT p1.family_id family_id, p1.paternal_id samid, NULL PATERNAL_ID, NULL MATERNAL_ID, 'M' sex, NULL PHENOTYPE, p1.sublabid sublabid from pedigree p1 where not exists (select p1.samid from pedigree p2 where p2.samid=p1.paternal_id) and p1.paternal_id is not null
/
CREATE OR REPLACE FORCE EDITIONABLE VIEW  "PEDIGREE_ALL" ("FAMILY_ID", "SAMID", "PATERNAL_ID", "MATERNAL_ID", "SEX", "PHENOTYPE", "SUBLABID") AS 
  select FAMILY_ID,SAMID,PATERNAL_ID,MATERNAL_ID,SEX,PHENOTYPE,SUBLABID from pedigree
union all
select FAMILY_ID,SAMID,PATERNAL_ID,MATERNAL_ID,SEX,PHENOTYPE,SUBLABID from pedigree_parents
/
CREATE OR REPLACE EDITIONABLE TYPE  "TESTYPTE_T" AS table of testtype
/
CREATE OR REPLACE EDITIONABLE TYPE  "TESTTYPE" AS OBJECT
    (
        name VARCHAR(50),
        id NUMBER
    )
/
CREATE OR REPLACE EDITIONABLE TYPE  "TESTTYPE_T" AS table of testtype
/
CREATE OR REPLACE EDITIONABLE TYPE  "RPPNG" AS OBJECT
    (
        name VARCHAR(50),
        id NUMBER,
        image blob
    )
/
CREATE OR REPLACE EDITIONABLE TYPE  "RQPNG_T" AS table of rppng
/
CREATE MATERIALIZED VIEW  "GENDX_GL2" ("USERID", "SAMPLEID", "LOCUS", "ID", "GLSTRING1")
  ORGANIZATION HEAP PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "APEX_1712446894753861" 
  BUILD IMMEDIATE
  USING INDEX 
  REFRESH FORCE ON DEMAND
  USING DEFAULT LOCAL ROLLBACK SEGMENT
  USING ENFORCED CONSTRAINTS DISABLE QUERY REWRITE
  AS select userid, g.SAMPLEID, c.name "LOCUS",Matchset.id, refAllele glstring1 from GENDX_XML g left join CODETABLE c on locus=mthid, 
XMLTable('/Sample/Matchsets/Matchset' PASSING XMLType(g.xml,1)
                  COLUMNS
                    id    VARCHAR2(50) PATH '@id',
                    mc  XMLType      PATH 'Matchcombination/MatchId') Matchset,
XMLTable('/MatchId' PASSING Matchset.mc
                  COLUMNS
                    refAllele    VARCHAR2(60) PATH '@refAllele') MatchId
/
